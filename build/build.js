
/**
 * Require the given path.
 *
 * @param {String} path
 * @return {Object} exports
 * @api public
 */

function require(path, parent, orig) {
  var resolved = require.resolve(path);

  // lookup failed
  if (null == resolved) {
    orig = orig || path;
    parent = parent || 'root';
    var err = new Error('Failed to require "' + orig + '" from "' + parent + '"');
    err.path = orig;
    err.parent = parent;
    err.require = true;
    throw err;
  }

  var module = require.modules[resolved];

  // perform real require()
  // by invoking the module's
  // registered function
  if (!module._resolving && !module.exports) {
    var mod = {};
    mod.exports = {};
    mod.client = mod.component = true;
    module._resolving = true;
    module.call(this, mod.exports, require.relative(resolved), mod);
    delete module._resolving;
    module.exports = mod.exports;
  }

  return module.exports;
}

/**
 * Registered modules.
 */

require.modules = {};

/**
 * Registered aliases.
 */

require.aliases = {};

/**
 * Resolve `path`.
 *
 * Lookup:
 *
 *   - PATH/index.js
 *   - PATH.js
 *   - PATH
 *
 * @param {String} path
 * @return {String} path or null
 * @api private
 */

require.resolve = function(path) {
  if (path.charAt(0) === '/') path = path.slice(1);

  var paths = [
    path,
    path + '.js',
    path + '.json',
    path + '/index.js',
    path + '/index.json'
  ];

  for (var i = 0; i < paths.length; i++) {
    var path = paths[i];
    if (require.modules.hasOwnProperty(path)) return path;
    if (require.aliases.hasOwnProperty(path)) return require.aliases[path];
  }
};

/**
 * Normalize `path` relative to the current path.
 *
 * @param {String} curr
 * @param {String} path
 * @return {String}
 * @api private
 */

require.normalize = function(curr, path) {
  var segs = [];

  if ('.' != path.charAt(0)) return path;

  curr = curr.split('/');
  path = path.split('/');

  for (var i = 0; i < path.length; ++i) {
    if ('..' == path[i]) {
      curr.pop();
    } else if ('.' != path[i] && '' != path[i]) {
      segs.push(path[i]);
    }
  }

  return curr.concat(segs).join('/');
};

/**
 * Register module at `path` with callback `definition`.
 *
 * @param {String} path
 * @param {Function} definition
 * @api private
 */

require.register = function(path, definition) {
  require.modules[path] = definition;
};

/**
 * Alias a module definition.
 *
 * @param {String} from
 * @param {String} to
 * @api private
 */

require.alias = function(from, to) {
  if (!require.modules.hasOwnProperty(from)) {
    throw new Error('Failed to alias "' + from + '", it does not exist');
  }
  require.aliases[to] = from;
};

/**
 * Return a require function relative to the `parent` path.
 *
 * @param {String} parent
 * @return {Function}
 * @api private
 */

require.relative = function(parent) {
  var p = require.normalize(parent, '..');

  /**
   * lastIndexOf helper.
   */

  function lastIndexOf(arr, obj) {
    var i = arr.length;
    while (i--) {
      if (arr[i] === obj) return i;
    }
    return -1;
  }

  /**
   * The relative require() itself.
   */

  function localRequire(path) {
    var resolved = localRequire.resolve(path);
    return require(resolved, parent, path);
  }

  /**
   * Resolve relative to the parent.
   */

  localRequire.resolve = function(path) {
    var c = path.charAt(0);
    if ('/' == c) return path.slice(1);
    if ('.' == c) return require.normalize(p, path);

    // resolve deps by returning
    // the dep in the nearest "deps"
    // directory
    var segs = parent.split('/');
    var i = lastIndexOf(segs, 'deps') + 1;
    if (!i) i = 0;
    path = segs.slice(0, i + 1).join('/') + '/deps/' + path;
    return path;
  };

  /**
   * Check if module is defined at `path`.
   */

  localRequire.exists = function(path) {
    return require.modules.hasOwnProperty(localRequire.resolve(path));
  };

  return localRequire;
};
require.register("the-gss-preparser/lib/gss-preparser.js", Function("exports, require, module",
"module.exports = (function(){\n\
  /*\n\
   * Generated by PEG.js 0.7.0.\n\
   *\n\
   * http://pegjs.majda.cz/\n\
   */\n\
  \n\
  function quote(s) {\n\
    /*\n\
     * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a\n\
     * string literal except for the closing quote character, backslash,\n\
     * carriage return, line separator, paragraph separator, and line feed.\n\
     * Any character may appear in the form of an escape sequence.\n\
     *\n\
     * For portability, we also escape escape all control and non-ASCII\n\
     * characters. Note that \"\\0\" and \"\\v\" escape sequences are not used\n\
     * because JSHint does not like the first and IE the second.\n\
     */\n\
     return '\"' + s\n\
      .replace(/\\\\/g, '\\\\\\\\')  // backslash\n\
      .replace(/\"/g, '\\\\\"')    // closing quote character\n\
      .replace(/\\x08/g, '\\\\b') // backspace\n\
      .replace(/\\t/g, '\\\\t')   // horizontal tab\n\
      .replace(/\\n\
/g, '\\\\n\
')   // line feed\n\
      .replace(/\\f/g, '\\\\f')   // form feed\n\
      .replace(/\\r/g, '\\\\r')   // carriage return\n\
      .replace(/[\\x00-\\x07\\x0B\\x0E-\\x1F\\x80-\\uFFFF]/g, escape)\n\
      + '\"';\n\
  }\n\
  \n\
  var result = {\n\
    /*\n\
     * Parses the input with a generated parser. If the parsing is successfull,\n\
     * returns a value explicitly or implicitly specified by the grammar from\n\
     * which the parser was generated (see |PEG.buildParser|). If the parsing is\n\
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.\n\
     */\n\
    parse: function(input, startRule) {\n\
      var parseFunctions = {\n\
        \"statements\": parse_statements,\n\
        \"statement\": parse_statement,\n\
        \"nestedStatement\": parse_nestedStatement,\n\
        \"nestedStatements\": parse_nestedStatements,\n\
        \"ccss\": parse_ccss,\n\
        \"ccssOp\": parse_ccssOp,\n\
        \"ContextualCCSSLine\": parse_ContextualCCSSLine,\n\
        \"cssLine\": parse_cssLine,\n\
        \"vfl\": parse_vfl,\n\
        \"gtl\": parse_gtl,\n\
        \"cssBlock\": parse_cssBlock,\n\
        \"Ruleset\": parse_Ruleset,\n\
        \"Directive\": parse_Directive,\n\
        \"DirectiveName\": parse_DirectiveName,\n\
        \"BlockedStatements\": parse_BlockedStatements,\n\
        \"SelectorList\": parse_SelectorList,\n\
        \"SelectorListEnd\": parse_SelectorListEnd,\n\
        \"Selector\": parse_Selector,\n\
        \"comment\": parse_comment,\n\
        \"_\": parse__,\n\
        \"__\": parse___,\n\
        \"space\": parse_space,\n\
        \"char\": parse_char,\n\
        \"anychar\": parse_anychar,\n\
        \"multitoend\": parse_multitoend,\n\
        \"anytoend\": parse_anytoend,\n\
        \"TextToColon\": parse_TextToColon,\n\
        \"TextToSemicolon\": parse_TextToSemicolon,\n\
        \"_terminators\": parse__terminators,\n\
        \"LineTerminator\": parse_LineTerminator\n\
      };\n\
      \n\
      if (startRule !== undefined) {\n\
        if (parseFunctions[startRule] === undefined) {\n\
          throw new Error(\"Invalid rule name: \" + quote(startRule) + \".\");\n\
        }\n\
      } else {\n\
        startRule = \"statements\";\n\
      }\n\
      \n\
      var pos = 0;\n\
      var reportFailures = 0;\n\
      var rightmostFailuresPos = 0;\n\
      var rightmostFailuresExpected = [];\n\
      \n\
      function padLeft(input, padding, length) {\n\
        var result = input;\n\
        \n\
        var padLength = length - input.length;\n\
        for (var i = 0; i < padLength; i++) {\n\
          result = padding + result;\n\
        }\n\
        \n\
        return result;\n\
      }\n\
      \n\
      function escape(ch) {\n\
        var charCode = ch.charCodeAt(0);\n\
        var escapeChar;\n\
        var length;\n\
        \n\
        if (charCode <= 0xFF) {\n\
          escapeChar = 'x';\n\
          length = 2;\n\
        } else {\n\
          escapeChar = 'u';\n\
          length = 4;\n\
        }\n\
        \n\
        return '\\\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);\n\
      }\n\
      \n\
      function matchFailed(failure) {\n\
        if (pos < rightmostFailuresPos) {\n\
          return;\n\
        }\n\
        \n\
        if (pos > rightmostFailuresPos) {\n\
          rightmostFailuresPos = pos;\n\
          rightmostFailuresExpected = [];\n\
        }\n\
        \n\
        rightmostFailuresExpected.push(failure);\n\
      }\n\
      \n\
      function parse_statements() {\n\
        var result0, result1, result2, result3;\n\
        var pos0, pos1;\n\
        \n\
        pos0 = pos;\n\
        pos1 = pos;\n\
        result0 = [];\n\
        result1 = parse_LineTerminator();\n\
        while (result1 !== null) {\n\
          result0.push(result1);\n\
          result1 = parse_LineTerminator();\n\
        }\n\
        if (result0 !== null) {\n\
          result2 = parse_statement();\n\
          if (result2 !== null) {\n\
            result1 = [];\n\
            while (result2 !== null) {\n\
              result1.push(result2);\n\
              result2 = parse_statement();\n\
            }\n\
          } else {\n\
            result1 = null;\n\
          }\n\
          if (result1 !== null) {\n\
            result2 = [];\n\
            result3 = parse_LineTerminator();\n\
            while (result3 !== null) {\n\
              result2.push(result3);\n\
              result3 = parse_LineTerminator();\n\
            }\n\
            if (result2 !== null) {\n\
              result0 = [result0, result1, result2];\n\
            } else {\n\
              result0 = null;\n\
              pos = pos1;\n\
            }\n\
          } else {\n\
            result0 = null;\n\
            pos = pos1;\n\
          }\n\
        } else {\n\
          result0 = null;\n\
          pos = pos1;\n\
        }\n\
        if (result0 !== null) {\n\
          result0 = (function(offset, s) {return s})(pos0, result0[1]);\n\
        }\n\
        if (result0 === null) {\n\
          pos = pos0;\n\
        }\n\
        if (result0 === null) {\n\
          result0 = parse__();\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_statement() {\n\
        var result0;\n\
        \n\
        reportFailures++;\n\
        result0 = parse_Ruleset();\n\
        if (result0 === null) {\n\
          result0 = parse_ccss();\n\
          if (result0 === null) {\n\
            result0 = parse_Directive();\n\
            if (result0 === null) {\n\
              result0 = parse_cssLine();\n\
            }\n\
          }\n\
        }\n\
        reportFailures--;\n\
        if (reportFailures === 0 && result0 === null) {\n\
          matchFailed(\"Statement\");\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_nestedStatement() {\n\
        var result0;\n\
        \n\
        reportFailures++;\n\
        result0 = parse_Ruleset();\n\
        if (result0 === null) {\n\
          result0 = parse_ccss();\n\
          if (result0 === null) {\n\
            result0 = parse_Directive();\n\
            if (result0 === null) {\n\
              result0 = parse_ContextualCCSSLine();\n\
              if (result0 === null) {\n\
                result0 = parse_cssLine();\n\
              }\n\
            }\n\
          }\n\
        }\n\
        reportFailures--;\n\
        if (reportFailures === 0 && result0 === null) {\n\
          matchFailed(\"Nested Statement\");\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_nestedStatements() {\n\
        var result0, result1, result2, result3;\n\
        var pos0, pos1;\n\
        \n\
        pos0 = pos;\n\
        pos1 = pos;\n\
        result0 = [];\n\
        result1 = parse_LineTerminator();\n\
        while (result1 !== null) {\n\
          result0.push(result1);\n\
          result1 = parse_LineTerminator();\n\
        }\n\
        if (result0 !== null) {\n\
          result1 = [];\n\
          result2 = parse_nestedStatement();\n\
          while (result2 !== null) {\n\
            result1.push(result2);\n\
            result2 = parse_nestedStatement();\n\
          }\n\
          if (result1 !== null) {\n\
            result2 = [];\n\
            result3 = parse_LineTerminator();\n\
            while (result3 !== null) {\n\
              result2.push(result3);\n\
              result3 = parse_LineTerminator();\n\
            }\n\
            if (result2 !== null) {\n\
              result0 = [result0, result1, result2];\n\
            } else {\n\
              result0 = null;\n\
              pos = pos1;\n\
            }\n\
          } else {\n\
            result0 = null;\n\
            pos = pos1;\n\
          }\n\
        } else {\n\
          result0 = null;\n\
          pos = pos1;\n\
        }\n\
        if (result0 !== null) {\n\
          result0 = (function(offset, s) {return s})(pos0, result0[1]);\n\
        }\n\
        if (result0 === null) {\n\
          pos = pos0;\n\
        }\n\
        if (result0 === null) {\n\
          result0 = parse__();\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_ccss() {\n\
        var result0, result1, result2, result3, result4, result5, result6, result7, result8;\n\
        var pos0, pos1;\n\
        \n\
        reportFailures++;\n\
        pos0 = pos;\n\
        pos1 = pos;\n\
        result0 = parse__();\n\
        if (result0 !== null) {\n\
          result2 = parse_char();\n\
          if (result2 !== null) {\n\
            result1 = [];\n\
            while (result2 !== null) {\n\
              result1.push(result2);\n\
              result2 = parse_char();\n\
            }\n\
          } else {\n\
            result1 = null;\n\
          }\n\
          if (result1 !== null) {\n\
            result2 = parse__();\n\
            if (result2 !== null) {\n\
              result3 = parse_ccssOp();\n\
              if (result3 !== null) {\n\
                result4 = parse_anytoend();\n\
                if (result4 !== null) {\n\
                  result0 = [result0, result1, result2, result3, result4];\n\
                } else {\n\
                  result0 = null;\n\
                  pos = pos1;\n\
                }\n\
              } else {\n\
                result0 = null;\n\
                pos = pos1;\n\
              }\n\
            } else {\n\
              result0 = null;\n\
              pos = pos1;\n\
            }\n\
          } else {\n\
            result0 = null;\n\
            pos = pos1;\n\
          }\n\
        } else {\n\
          result0 = null;\n\
          pos = pos1;\n\
        }\n\
        if (result0 !== null) {\n\
          result0 = (function(offset, ccss) { \n\
            return {type:'constraint', cssText: p.stringify(ccss)}; \n\
          })(pos0, result0);\n\
        }\n\
        if (result0 === null) {\n\
          pos = pos0;\n\
        }\n\
        if (result0 === null) {\n\
          pos0 = pos;\n\
          pos1 = pos;\n\
          result0 = parse__();\n\
          if (result0 !== null) {\n\
            if (input.charCodeAt(pos) === 64) {\n\
              result1 = \"@\";\n\
              pos++;\n\
            } else {\n\
              result1 = null;\n\
              if (reportFailures === 0) {\n\
                matchFailed(\"\\\"@\\\"\");\n\
              }\n\
            }\n\
            if (result1 !== null) {\n\
              if (input.substr(pos, 5) === \"-gss-\") {\n\
                result2 = \"-gss-\";\n\
                pos += 5;\n\
              } else {\n\
                result2 = null;\n\
                if (reportFailures === 0) {\n\
                  matchFailed(\"\\\"-gss-\\\"\");\n\
                }\n\
              }\n\
              result2 = result2 !== null ? result2 : \"\";\n\
              if (result2 !== null) {\n\
                if (input.substr(pos, 4) === \"stay\") {\n\
                  result3 = \"stay\";\n\
                  pos += 4;\n\
                } else {\n\
                  result3 = null;\n\
                  if (reportFailures === 0) {\n\
                    matchFailed(\"\\\"stay\\\"\");\n\
                  }\n\
                }\n\
                if (result3 !== null) {\n\
                  result4 = parse_anytoend();\n\
                  if (result4 !== null) {\n\
                    result0 = [result0, result1, result2, result3, result4];\n\
                  } else {\n\
                    result0 = null;\n\
                    pos = pos1;\n\
                  }\n\
                } else {\n\
                  result0 = null;\n\
                  pos = pos1;\n\
                }\n\
              } else {\n\
                result0 = null;\n\
                pos = pos1;\n\
              }\n\
            } else {\n\
              result0 = null;\n\
              pos = pos1;\n\
            }\n\
          } else {\n\
            result0 = null;\n\
            pos = pos1;\n\
          }\n\
          if (result0 !== null) {\n\
            result0 = (function(offset, stay) { \n\
              return {type:'constraint', cssText: p.stringify(stay)}; \n\
            })(pos0, result0);\n\
          }\n\
          if (result0 === null) {\n\
            pos = pos0;\n\
          }\n\
          if (result0 === null) {\n\
            pos0 = pos;\n\
            pos1 = pos;\n\
            result0 = parse__();\n\
            if (result0 !== null) {\n\
              if (input.charCodeAt(pos) === 64) {\n\
                result1 = \"@\";\n\
                pos++;\n\
              } else {\n\
                result1 = null;\n\
                if (reportFailures === 0) {\n\
                  matchFailed(\"\\\"@\\\"\");\n\
                }\n\
              }\n\
              if (result1 !== null) {\n\
                if (input.substr(pos, 5) === \"-gss-\") {\n\
                  result2 = \"-gss-\";\n\
                  pos += 5;\n\
                } else {\n\
                  result2 = null;\n\
                  if (reportFailures === 0) {\n\
                    matchFailed(\"\\\"-gss-\\\"\");\n\
                  }\n\
                }\n\
                result2 = result2 !== null ? result2 : \"\";\n\
                if (result2 !== null) {\n\
                  if (input.substr(pos, 5) === \"chain\") {\n\
                    result3 = \"chain\";\n\
                    pos += 5;\n\
                  } else {\n\
                    result3 = null;\n\
                    if (reportFailures === 0) {\n\
                      matchFailed(\"\\\"chain\\\"\");\n\
                    }\n\
                  }\n\
                  if (result3 !== null) {\n\
                    result4 = parse_anytoend();\n\
                    if (result4 !== null) {\n\
                      result0 = [result0, result1, result2, result3, result4];\n\
                    } else {\n\
                      result0 = null;\n\
                      pos = pos1;\n\
                    }\n\
                  } else {\n\
                    result0 = null;\n\
                    pos = pos1;\n\
                  }\n\
                } else {\n\
                  result0 = null;\n\
                  pos = pos1;\n\
                }\n\
              } else {\n\
                result0 = null;\n\
                pos = pos1;\n\
              }\n\
            } else {\n\
              result0 = null;\n\
              pos = pos1;\n\
            }\n\
            if (result0 !== null) {\n\
              result0 = (function(offset, chain) { \n\
                return {type:'constraint', cssText: p.stringify(chain)}; \n\
              })(pos0, result0);\n\
            }\n\
            if (result0 === null) {\n\
              pos = pos0;\n\
            }\n\
            if (result0 === null) {\n\
              pos0 = pos;\n\
              pos1 = pos;\n\
              result0 = parse__();\n\
              if (result0 !== null) {\n\
                if (input.charCodeAt(pos) === 64) {\n\
                  result1 = \"@\";\n\
                  pos++;\n\
                } else {\n\
                  result1 = null;\n\
                  if (reportFailures === 0) {\n\
                    matchFailed(\"\\\"@\\\"\");\n\
                  }\n\
                }\n\
                if (result1 !== null) {\n\
                  if (input.substr(pos, 5) === \"-gss-\") {\n\
                    result2 = \"-gss-\";\n\
                    pos += 5;\n\
                  } else {\n\
                    result2 = null;\n\
                    if (reportFailures === 0) {\n\
                      matchFailed(\"\\\"-gss-\\\"\");\n\
                    }\n\
                  }\n\
                  result2 = result2 !== null ? result2 : \"\";\n\
                  if (result2 !== null) {\n\
                    if (input.substr(pos, 8) === \"for-each\") {\n\
                      result3 = \"for-each\";\n\
                      pos += 8;\n\
                    } else {\n\
                      result3 = null;\n\
                      if (reportFailures === 0) {\n\
                        matchFailed(\"\\\"for-each\\\"\");\n\
                      }\n\
                    }\n\
                    if (result3 === null) {\n\
                      if (input.substr(pos, 7) === \"for-all\") {\n\
                        result3 = \"for-all\";\n\
                        pos += 7;\n\
                      } else {\n\
                        result3 = null;\n\
                        if (reportFailures === 0) {\n\
                          matchFailed(\"\\\"for-all\\\"\");\n\
                        }\n\
                      }\n\
                    }\n\
                    if (result3 !== null) {\n\
                      if (/^[^`]/.test(input.charAt(pos))) {\n\
                        result5 = input.charAt(pos);\n\
                        pos++;\n\
                      } else {\n\
                        result5 = null;\n\
                        if (reportFailures === 0) {\n\
                          matchFailed(\"[^`]\");\n\
                        }\n\
                      }\n\
                      if (result5 !== null) {\n\
                        result4 = [];\n\
                        while (result5 !== null) {\n\
                          result4.push(result5);\n\
                          if (/^[^`]/.test(input.charAt(pos))) {\n\
                            result5 = input.charAt(pos);\n\
                            pos++;\n\
                          } else {\n\
                            result5 = null;\n\
                            if (reportFailures === 0) {\n\
                              matchFailed(\"[^`]\");\n\
                            }\n\
                          }\n\
                        }\n\
                      } else {\n\
                        result4 = null;\n\
                      }\n\
                      if (result4 !== null) {\n\
                        if (input.substr(pos, 3) === \"```\") {\n\
                          result5 = \"```\";\n\
                          pos += 3;\n\
                        } else {\n\
                          result5 = null;\n\
                          if (reportFailures === 0) {\n\
                            matchFailed(\"\\\"```\\\"\");\n\
                          }\n\
                        }\n\
                        if (result5 !== null) {\n\
                          if (/^[^`]/.test(input.charAt(pos))) {\n\
                            result7 = input.charAt(pos);\n\
                            pos++;\n\
                          } else {\n\
                            result7 = null;\n\
                            if (reportFailures === 0) {\n\
                              matchFailed(\"[^`]\");\n\
                            }\n\
                          }\n\
                          if (result7 !== null) {\n\
                            result6 = [];\n\
                            while (result7 !== null) {\n\
                              result6.push(result7);\n\
                              if (/^[^`]/.test(input.charAt(pos))) {\n\
                                result7 = input.charAt(pos);\n\
                                pos++;\n\
                              } else {\n\
                                result7 = null;\n\
                                if (reportFailures === 0) {\n\
                                  matchFailed(\"[^`]\");\n\
                                }\n\
                              }\n\
                            }\n\
                          } else {\n\
                            result6 = null;\n\
                          }\n\
                          if (result6 !== null) {\n\
                            if (input.substr(pos, 3) === \"```\") {\n\
                              result7 = \"```\";\n\
                              pos += 3;\n\
                            } else {\n\
                              result7 = null;\n\
                              if (reportFailures === 0) {\n\
                                matchFailed(\"\\\"```\\\"\");\n\
                              }\n\
                            }\n\
                            if (result7 !== null) {\n\
                              result8 = parse_anytoend();\n\
                              if (result8 !== null) {\n\
                                result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8];\n\
                              } else {\n\
                                result0 = null;\n\
                                pos = pos1;\n\
                              }\n\
                            } else {\n\
                              result0 = null;\n\
                              pos = pos1;\n\
                            }\n\
                          } else {\n\
                            result0 = null;\n\
                            pos = pos1;\n\
                          }\n\
                        } else {\n\
                          result0 = null;\n\
                          pos = pos1;\n\
                        }\n\
                      } else {\n\
                        result0 = null;\n\
                        pos = pos1;\n\
                      }\n\
                    } else {\n\
                      result0 = null;\n\
                      pos = pos1;\n\
                    }\n\
                  } else {\n\
                    result0 = null;\n\
                    pos = pos1;\n\
                  }\n\
                } else {\n\
                  result0 = null;\n\
                  pos = pos1;\n\
                }\n\
              } else {\n\
                result0 = null;\n\
                pos = pos1;\n\
              }\n\
              if (result0 !== null) {\n\
                result0 = (function(offset, forlooper) { \n\
                  return {type:'constraint', cssText: p.stringify(forlooper)}; \n\
                })(pos0, result0);\n\
              }\n\
              if (result0 === null) {\n\
                pos = pos0;\n\
              }\n\
            }\n\
          }\n\
        }\n\
        reportFailures--;\n\
        if (reportFailures === 0 && result0 === null) {\n\
          matchFailed(\"CCSS\");\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_ccssOp() {\n\
        var result0;\n\
        \n\
        if (input.substr(pos, 2) === \">=\") {\n\
          result0 = \">=\";\n\
          pos += 2;\n\
        } else {\n\
          result0 = null;\n\
          if (reportFailures === 0) {\n\
            matchFailed(\"\\\">=\\\"\");\n\
          }\n\
        }\n\
        if (result0 === null) {\n\
          if (input.substr(pos, 2) === \"==\") {\n\
            result0 = \"==\";\n\
            pos += 2;\n\
          } else {\n\
            result0 = null;\n\
            if (reportFailures === 0) {\n\
              matchFailed(\"\\\"==\\\"\");\n\
            }\n\
          }\n\
          if (result0 === null) {\n\
            if (input.substr(pos, 2) === \"<=\") {\n\
              result0 = \"<=\";\n\
              pos += 2;\n\
            } else {\n\
              result0 = null;\n\
              if (reportFailures === 0) {\n\
                matchFailed(\"\\\"<=\\\"\");\n\
              }\n\
            }\n\
            if (result0 === null) {\n\
              if (input.substr(pos, 2) === \"=>\") {\n\
                result0 = \"=>\";\n\
                pos += 2;\n\
              } else {\n\
                result0 = null;\n\
                if (reportFailures === 0) {\n\
                  matchFailed(\"\\\"=>\\\"\");\n\
                }\n\
              }\n\
              if (result0 === null) {\n\
                if (input.substr(pos, 2) === \"=<\") {\n\
                  result0 = \"=<\";\n\
                  pos += 2;\n\
                } else {\n\
                  result0 = null;\n\
                  if (reportFailures === 0) {\n\
                    matchFailed(\"\\\"=<\\\"\");\n\
                  }\n\
                }\n\
              }\n\
            }\n\
          }\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_ContextualCCSSLine() {\n\
        var result0, result1, result2, result3, result4, result5;\n\
        var pos0, pos1;\n\
        \n\
        reportFailures++;\n\
        pos0 = pos;\n\
        pos1 = pos;\n\
        result0 = parse__();\n\
        if (result0 !== null) {\n\
          if (/^[a-zA-Z0-9\\-_$]/.test(input.charAt(pos))) {\n\
            result2 = input.charAt(pos);\n\
            pos++;\n\
          } else {\n\
            result2 = null;\n\
            if (reportFailures === 0) {\n\
              matchFailed(\"[a-zA-Z0-9\\\\-_$]\");\n\
            }\n\
          }\n\
          if (result2 !== null) {\n\
            result1 = [];\n\
            while (result2 !== null) {\n\
              result1.push(result2);\n\
              if (/^[a-zA-Z0-9\\-_$]/.test(input.charAt(pos))) {\n\
                result2 = input.charAt(pos);\n\
                pos++;\n\
              } else {\n\
                result2 = null;\n\
                if (reportFailures === 0) {\n\
                  matchFailed(\"[a-zA-Z0-9\\\\-_$]\");\n\
                }\n\
              }\n\
            }\n\
          } else {\n\
            result1 = null;\n\
          }\n\
          if (result1 !== null) {\n\
            if (input.charCodeAt(pos) === 58) {\n\
              result2 = \":\";\n\
              pos++;\n\
            } else {\n\
              result2 = null;\n\
              if (reportFailures === 0) {\n\
                matchFailed(\"\\\":\\\"\");\n\
              }\n\
            }\n\
            if (result2 !== null) {\n\
              result3 = parse__();\n\
              if (result3 !== null) {\n\
                result4 = parse_ccssOp();\n\
                if (result4 !== null) {\n\
                  result5 = parse_anytoend();\n\
                  if (result5 !== null) {\n\
                    result0 = [result0, result1, result2, result3, result4, result5];\n\
                  } else {\n\
                    result0 = null;\n\
                    pos = pos1;\n\
                  }\n\
                } else {\n\
                  result0 = null;\n\
                  pos = pos1;\n\
                }\n\
              } else {\n\
                result0 = null;\n\
                pos = pos1;\n\
              }\n\
            } else {\n\
              result0 = null;\n\
              pos = pos1;\n\
            }\n\
          } else {\n\
            result0 = null;\n\
            pos = pos1;\n\
          }\n\
        } else {\n\
          result0 = null;\n\
          pos = pos1;\n\
        }\n\
        if (result0 !== null) {\n\
          result0 = (function(offset, prop, op, tail) {\n\
              return {type:'constraint', cssText: \"::[\"+p.trim(prop)+\"]\"+\" \"+op+\" \"+p.stringify(tail)};\n\
            })(pos0, result0[1], result0[4], result0[5]);\n\
        }\n\
        if (result0 === null) {\n\
          pos = pos0;\n\
        }\n\
        reportFailures--;\n\
        if (reportFailures === 0 && result0 === null) {\n\
          matchFailed(\"Contextual CCSS Statement\");\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_cssLine() {\n\
        var result0, result1, result2;\n\
        var pos0, pos1;\n\
        \n\
        reportFailures++;\n\
        pos0 = pos;\n\
        pos1 = pos;\n\
        result0 = parse__();\n\
        if (result0 !== null) {\n\
          result1 = parse_TextToColon();\n\
          if (result1 !== null) {\n\
            result2 = parse_TextToSemicolon();\n\
            if (result2 !== null) {\n\
              result0 = [result0, result1, result2];\n\
            } else {\n\
              result0 = null;\n\
              pos = pos1;\n\
            }\n\
          } else {\n\
            result0 = null;\n\
            pos = pos1;\n\
          }\n\
        } else {\n\
          result0 = null;\n\
          pos = pos1;\n\
        }\n\
        if (result0 !== null) {\n\
          result0 = (function(offset, key, val) { return {type:'style', key:key, val:val}; })(pos0, result0[1], result0[2]);\n\
        }\n\
        if (result0 === null) {\n\
          pos = pos0;\n\
        }\n\
        reportFailures--;\n\
        if (reportFailures === 0 && result0 === null) {\n\
          matchFailed(\"CSS Line\");\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_vfl() {\n\
        var result0, result1, result2, result3;\n\
        var pos0, pos1;\n\
        \n\
        pos0 = pos;\n\
        pos1 = pos;\n\
        result0 = parse__();\n\
        if (result0 !== null) {\n\
          if (input.substr(pos, 6) === \"@-gss-\") {\n\
            result1 = \"@-gss-\";\n\
            pos += 6;\n\
          } else {\n\
            result1 = null;\n\
            if (reportFailures === 0) {\n\
              matchFailed(\"\\\"@-gss-\\\"\");\n\
            }\n\
          }\n\
          if (result1 === null) {\n\
            if (input.charCodeAt(pos) === 64) {\n\
              result1 = \"@\";\n\
              pos++;\n\
            } else {\n\
              result1 = null;\n\
              if (reportFailures === 0) {\n\
                matchFailed(\"\\\"@\\\"\");\n\
              }\n\
            }\n\
          }\n\
          if (result1 !== null) {\n\
            if (input.substr(pos, 10) === \"horizontal\") {\n\
              result2 = \"horizontal\";\n\
              pos += 10;\n\
            } else {\n\
              result2 = null;\n\
              if (reportFailures === 0) {\n\
                matchFailed(\"\\\"horizontal\\\"\");\n\
              }\n\
            }\n\
            if (result2 === null) {\n\
              if (input.substr(pos, 8) === \"vertical\") {\n\
                result2 = \"vertical\";\n\
                pos += 8;\n\
              } else {\n\
                result2 = null;\n\
                if (reportFailures === 0) {\n\
                  matchFailed(\"\\\"vertical\\\"\");\n\
                }\n\
              }\n\
              if (result2 === null) {\n\
                if (input.charCodeAt(pos) === 104) {\n\
                  result2 = \"h\";\n\
                  pos++;\n\
                } else {\n\
                  result2 = null;\n\
                  if (reportFailures === 0) {\n\
                    matchFailed(\"\\\"h\\\"\");\n\
                  }\n\
                }\n\
                if (result2 === null) {\n\
                  if (input.charCodeAt(pos) === 118) {\n\
                    result2 = \"v\";\n\
                    pos++;\n\
                  } else {\n\
                    result2 = null;\n\
                    if (reportFailures === 0) {\n\
                      matchFailed(\"\\\"v\\\"\");\n\
                    }\n\
                  }\n\
                }\n\
              }\n\
            }\n\
            if (result2 !== null) {\n\
              result3 = parse_anytoend();\n\
              if (result3 !== null) {\n\
                result0 = [result0, result1, result2, result3];\n\
              } else {\n\
                result0 = null;\n\
                pos = pos1;\n\
              }\n\
            } else {\n\
              result0 = null;\n\
              pos = pos1;\n\
            }\n\
          } else {\n\
            result0 = null;\n\
            pos = pos1;\n\
          }\n\
        } else {\n\
          result0 = null;\n\
          pos = pos1;\n\
        }\n\
        if (result0 !== null) {\n\
          result0 = (function(offset, vfl) { return ['vfl', parser.stringify(vfl)]; })(pos0, result0);\n\
        }\n\
        if (result0 === null) {\n\
          pos = pos0;\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_gtl() {\n\
        var result0, result1, result2, result3;\n\
        var pos0, pos1;\n\
        \n\
        pos0 = pos;\n\
        pos1 = pos;\n\
        result0 = parse__();\n\
        if (result0 !== null) {\n\
          if (input.substr(pos, 6) === \"@-gss-\") {\n\
            result1 = \"@-gss-\";\n\
            pos += 6;\n\
          } else {\n\
            result1 = null;\n\
            if (reportFailures === 0) {\n\
              matchFailed(\"\\\"@-gss-\\\"\");\n\
            }\n\
          }\n\
          if (result1 !== null) {\n\
            if (input.substr(pos, 6) === \"layout\") {\n\
              result2 = \"layout\";\n\
              pos += 6;\n\
            } else {\n\
              result2 = null;\n\
              if (reportFailures === 0) {\n\
                matchFailed(\"\\\"layout\\\"\");\n\
              }\n\
            }\n\
            if (result2 === null) {\n\
              if (input.substr(pos, 8) === \"template\") {\n\
                result2 = \"template\";\n\
                pos += 8;\n\
              } else {\n\
                result2 = null;\n\
                if (reportFailures === 0) {\n\
                  matchFailed(\"\\\"template\\\"\");\n\
                }\n\
              }\n\
            }\n\
            if (result2 !== null) {\n\
              result3 = parse_multitoend();\n\
              if (result3 !== null) {\n\
                result0 = [result0, result1, result2, result3];\n\
              } else {\n\
                result0 = null;\n\
                pos = pos1;\n\
              }\n\
            } else {\n\
              result0 = null;\n\
              pos = pos1;\n\
            }\n\
          } else {\n\
            result0 = null;\n\
            pos = pos1;\n\
          }\n\
        } else {\n\
          result0 = null;\n\
          pos = pos1;\n\
        }\n\
        if (result0 !== null) {\n\
          result0 = (function(offset, gtl) { return ['gtl', parser.stringify(gtl)]; })(pos0, result0);\n\
        }\n\
        if (result0 === null) {\n\
          pos = pos0;\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_cssBlock() {\n\
        var result0, result1;\n\
        var pos0, pos1;\n\
        \n\
        pos0 = pos;\n\
        pos1 = pos;\n\
        result1 = parse_anychar();\n\
        if (result1 !== null) {\n\
          result0 = [];\n\
          while (result1 !== null) {\n\
            result0.push(result1);\n\
            result1 = parse_anychar();\n\
          }\n\
        } else {\n\
          result0 = null;\n\
        }\n\
        if (result0 !== null) {\n\
          result1 = parse_multitoend();\n\
          if (result1 !== null) {\n\
            result0 = [result0, result1];\n\
          } else {\n\
            result0 = null;\n\
            pos = pos1;\n\
          }\n\
        } else {\n\
          result0 = null;\n\
          pos = pos1;\n\
        }\n\
        if (result0 !== null) {\n\
          result0 = (function(offset, block) { return ['css', parser.stringify(block)]; })(pos0, result0);\n\
        }\n\
        if (result0 === null) {\n\
          pos = pos0;\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_Ruleset() {\n\
        var result0, result1, result2;\n\
        var pos0, pos1;\n\
        \n\
        reportFailures++;\n\
        pos0 = pos;\n\
        pos1 = pos;\n\
        result0 = parse__();\n\
        if (result0 !== null) {\n\
          result1 = parse_SelectorList();\n\
          if (result1 !== null) {\n\
            result2 = parse_BlockedStatements();\n\
            if (result2 !== null) {\n\
              result0 = [result0, result1, result2];\n\
            } else {\n\
              result0 = null;\n\
              pos = pos1;\n\
            }\n\
          } else {\n\
            result0 = null;\n\
            pos = pos1;\n\
          }\n\
        } else {\n\
          result0 = null;\n\
          pos = pos1;\n\
        }\n\
        if (result0 !== null) {\n\
          result0 = (function(offset, $, s) {\n\
            return {type:'ruleset',selectors:$,rules:s};\n\
          })(pos0, result0[1], result0[2]);\n\
        }\n\
        if (result0 === null) {\n\
          pos = pos0;\n\
        }\n\
        reportFailures--;\n\
        if (reportFailures === 0 && result0 === null) {\n\
          matchFailed(\"Ruleset\");\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_Directive() {\n\
        var result0, result1, result2;\n\
        var pos0, pos1;\n\
        \n\
        reportFailures++;\n\
        pos0 = pos;\n\
        pos1 = pos;\n\
        result0 = parse_DirectiveName();\n\
        if (result0 !== null) {\n\
          result1 = [];\n\
          if (/^[^@{};]/.test(input.charAt(pos))) {\n\
            result2 = input.charAt(pos);\n\
            pos++;\n\
          } else {\n\
            result2 = null;\n\
            if (reportFailures === 0) {\n\
              matchFailed(\"[^@{};]\");\n\
            }\n\
          }\n\
          while (result2 !== null) {\n\
            result1.push(result2);\n\
            if (/^[^@{};]/.test(input.charAt(pos))) {\n\
              result2 = input.charAt(pos);\n\
              pos++;\n\
            } else {\n\
              result2 = null;\n\
              if (reportFailures === 0) {\n\
                matchFailed(\"[^@{};]\");\n\
              }\n\
            }\n\
          }\n\
          if (result1 !== null) {\n\
            result2 = parse_BlockedStatements();\n\
            if (result2 !== null) {\n\
              result0 = [result0, result1, result2];\n\
            } else {\n\
              result0 = null;\n\
              pos = pos1;\n\
            }\n\
          } else {\n\
            result0 = null;\n\
            pos = pos1;\n\
          }\n\
        } else {\n\
          result0 = null;\n\
          pos = pos1;\n\
        }\n\
        if (result0 !== null) {\n\
          result0 = (function(offset, name, terms, s) {\n\
            var o;\n\
            o = {type:'directive',name:p.trim(name),terms:p.trim(terms)};\n\
            if (!!s) {o.rules = s;}\n\
            return o;\n\
          })(pos0, result0[0], result0[1], result0[2]);\n\
        }\n\
        if (result0 === null) {\n\
          pos = pos0;\n\
        }\n\
        if (result0 === null) {\n\
          pos0 = pos;\n\
          pos1 = pos;\n\
          result0 = parse_DirectiveName();\n\
          if (result0 !== null) {\n\
            result1 = parse_TextToSemicolon();\n\
            if (result1 !== null) {\n\
              result0 = [result0, result1];\n\
            } else {\n\
              result0 = null;\n\
              pos = pos1;\n\
            }\n\
          } else {\n\
            result0 = null;\n\
            pos = pos1;\n\
          }\n\
          if (result0 !== null) {\n\
            result0 = (function(offset, name, terms) {\n\
              var o;\n\
              o = {type:'directive',name:p.trim(name),terms:p.trim(terms)};    \n\
              return o;\n\
            })(pos0, result0[0], result0[1]);\n\
          }\n\
          if (result0 === null) {\n\
            pos = pos0;\n\
          }\n\
        }\n\
        reportFailures--;\n\
        if (reportFailures === 0 && result0 === null) {\n\
          matchFailed(\"Directive\");\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_DirectiveName() {\n\
        var result0, result1, result2, result3;\n\
        var pos0, pos1;\n\
        \n\
        reportFailures++;\n\
        pos0 = pos;\n\
        pos1 = pos;\n\
        result0 = parse__();\n\
        if (result0 !== null) {\n\
          if (input.charCodeAt(pos) === 64) {\n\
            result1 = \"@\";\n\
            pos++;\n\
          } else {\n\
            result1 = null;\n\
            if (reportFailures === 0) {\n\
              matchFailed(\"\\\"@\\\"\");\n\
            }\n\
          }\n\
          if (result1 !== null) {\n\
            if (/^[a-zA-Z0-9\\-_$]/.test(input.charAt(pos))) {\n\
              result3 = input.charAt(pos);\n\
              pos++;\n\
            } else {\n\
              result3 = null;\n\
              if (reportFailures === 0) {\n\
                matchFailed(\"[a-zA-Z0-9\\\\-_$]\");\n\
              }\n\
            }\n\
            if (result3 !== null) {\n\
              result2 = [];\n\
              while (result3 !== null) {\n\
                result2.push(result3);\n\
                if (/^[a-zA-Z0-9\\-_$]/.test(input.charAt(pos))) {\n\
                  result3 = input.charAt(pos);\n\
                  pos++;\n\
                } else {\n\
                  result3 = null;\n\
                  if (reportFailures === 0) {\n\
                    matchFailed(\"[a-zA-Z0-9\\\\-_$]\");\n\
                  }\n\
                }\n\
              }\n\
            } else {\n\
              result2 = null;\n\
            }\n\
            if (result2 !== null) {\n\
              result0 = [result0, result1, result2];\n\
            } else {\n\
              result0 = null;\n\
              pos = pos1;\n\
            }\n\
          } else {\n\
            result0 = null;\n\
            pos = pos1;\n\
          }\n\
        } else {\n\
          result0 = null;\n\
          pos = pos1;\n\
        }\n\
        if (result0 !== null) {\n\
          result0 = (function(offset, name) {return p.trim(name);})(pos0, result0[2]);\n\
        }\n\
        if (result0 === null) {\n\
          pos = pos0;\n\
        }\n\
        reportFailures--;\n\
        if (reportFailures === 0 && result0 === null) {\n\
          matchFailed(\"Directive Name\");\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_BlockedStatements() {\n\
        var result0, result1, result2, result3, result4, result5, result6, result7, result8;\n\
        var pos0, pos1;\n\
        \n\
        reportFailures++;\n\
        pos0 = pos;\n\
        pos1 = pos;\n\
        result0 = parse__();\n\
        if (result0 !== null) {\n\
          if (input.charCodeAt(pos) === 123) {\n\
            result1 = \"{\";\n\
            pos++;\n\
          } else {\n\
            result1 = null;\n\
            if (reportFailures === 0) {\n\
              matchFailed(\"\\\"{\\\"\");\n\
            }\n\
          }\n\
          if (result1 !== null) {\n\
            result2 = parse__();\n\
            if (result2 !== null) {\n\
              result3 = parse_nestedStatements();\n\
              if (result3 !== null) {\n\
                result4 = parse__();\n\
                if (result4 !== null) {\n\
                  if (input.charCodeAt(pos) === 125) {\n\
                    result5 = \"}\";\n\
                    pos++;\n\
                  } else {\n\
                    result5 = null;\n\
                    if (reportFailures === 0) {\n\
                      matchFailed(\"\\\"}\\\"\");\n\
                    }\n\
                  }\n\
                  if (result5 !== null) {\n\
                    result6 = parse__();\n\
                    if (result6 !== null) {\n\
                      result7 = [];\n\
                      result8 = parse_LineTerminator();\n\
                      while (result8 !== null) {\n\
                        result7.push(result8);\n\
                        result8 = parse_LineTerminator();\n\
                      }\n\
                      if (result7 !== null) {\n\
                        result0 = [result0, result1, result2, result3, result4, result5, result6, result7];\n\
                      } else {\n\
                        result0 = null;\n\
                        pos = pos1;\n\
                      }\n\
                    } else {\n\
                      result0 = null;\n\
                      pos = pos1;\n\
                    }\n\
                  } else {\n\
                    result0 = null;\n\
                    pos = pos1;\n\
                  }\n\
                } else {\n\
                  result0 = null;\n\
                  pos = pos1;\n\
                }\n\
              } else {\n\
                result0 = null;\n\
                pos = pos1;\n\
              }\n\
            } else {\n\
              result0 = null;\n\
              pos = pos1;\n\
            }\n\
          } else {\n\
            result0 = null;\n\
            pos = pos1;\n\
          }\n\
        } else {\n\
          result0 = null;\n\
          pos = pos1;\n\
        }\n\
        if (result0 !== null) {\n\
          result0 = (function(offset, s) {return s;})(pos0, result0[3]);\n\
        }\n\
        if (result0 === null) {\n\
          pos = pos0;\n\
        }\n\
        reportFailures--;\n\
        if (reportFailures === 0 && result0 === null) {\n\
          matchFailed(\"Statement Blocks\");\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_SelectorList() {\n\
        var result0, result1, result2;\n\
        var pos0, pos1;\n\
        \n\
        reportFailures++;\n\
        pos0 = pos;\n\
        pos1 = pos;\n\
        result0 = parse_Selector();\n\
        if (result0 !== null) {\n\
          result1 = [];\n\
          result2 = parse_SelectorListEnd();\n\
          while (result2 !== null) {\n\
            result1.push(result2);\n\
            result2 = parse_SelectorListEnd();\n\
          }\n\
          if (result1 !== null) {\n\
            result0 = [result0, result1];\n\
          } else {\n\
            result0 = null;\n\
            pos = pos1;\n\
          }\n\
        } else {\n\
          result0 = null;\n\
          pos = pos1;\n\
        }\n\
        if (result0 !== null) {\n\
          result0 = (function(offset, $, $s) {return [$].concat($s)})(pos0, result0[0], result0[1]);\n\
        }\n\
        if (result0 === null) {\n\
          pos = pos0;\n\
        }\n\
        reportFailures--;\n\
        if (reportFailures === 0 && result0 === null) {\n\
          matchFailed(\"SelectorList\");\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_SelectorListEnd() {\n\
        var result0, result1, result2;\n\
        var pos0, pos1;\n\
        \n\
        pos0 = pos;\n\
        pos1 = pos;\n\
        result0 = parse__();\n\
        if (result0 !== null) {\n\
          if (input.charCodeAt(pos) === 44) {\n\
            result1 = \",\";\n\
            pos++;\n\
          } else {\n\
            result1 = null;\n\
            if (reportFailures === 0) {\n\
              matchFailed(\"\\\",\\\"\");\n\
            }\n\
          }\n\
          if (result1 !== null) {\n\
            result2 = parse_Selector();\n\
            if (result2 !== null) {\n\
              result0 = [result0, result1, result2];\n\
            } else {\n\
              result0 = null;\n\
              pos = pos1;\n\
            }\n\
          } else {\n\
            result0 = null;\n\
            pos = pos1;\n\
          }\n\
        } else {\n\
          result0 = null;\n\
          pos = pos1;\n\
        }\n\
        if (result0 !== null) {\n\
          result0 = (function(offset, $) {return $})(pos0, result0[2]);\n\
        }\n\
        if (result0 === null) {\n\
          pos = pos0;\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_Selector() {\n\
        var result0, result1, result2;\n\
        var pos0, pos1;\n\
        \n\
        reportFailures++;\n\
        pos0 = pos;\n\
        pos1 = pos;\n\
        result0 = parse__();\n\
        if (result0 !== null) {\n\
          if (/^[^@{},;]/.test(input.charAt(pos))) {\n\
            result2 = input.charAt(pos);\n\
            pos++;\n\
          } else {\n\
            result2 = null;\n\
            if (reportFailures === 0) {\n\
              matchFailed(\"[^@{},;]\");\n\
            }\n\
          }\n\
          if (result2 !== null) {\n\
            result1 = [];\n\
            while (result2 !== null) {\n\
              result1.push(result2);\n\
              if (/^[^@{},;]/.test(input.charAt(pos))) {\n\
                result2 = input.charAt(pos);\n\
                pos++;\n\
              } else {\n\
                result2 = null;\n\
                if (reportFailures === 0) {\n\
                  matchFailed(\"[^@{},;]\");\n\
                }\n\
              }\n\
            }\n\
          } else {\n\
            result1 = null;\n\
          }\n\
          if (result1 !== null) {\n\
            result2 = parse__();\n\
            if (result2 !== null) {\n\
              result0 = [result0, result1, result2];\n\
            } else {\n\
              result0 = null;\n\
              pos = pos1;\n\
            }\n\
          } else {\n\
            result0 = null;\n\
            pos = pos1;\n\
          }\n\
        } else {\n\
          result0 = null;\n\
          pos = pos1;\n\
        }\n\
        if (result0 !== null) {\n\
          result0 = (function(offset, $) {return $.join(\"\").trim()})(pos0, result0[1]);\n\
        }\n\
        if (result0 === null) {\n\
          pos = pos0;\n\
        }\n\
        reportFailures--;\n\
        if (reportFailures === 0 && result0 === null) {\n\
          matchFailed(\"Selector\");\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_comment() {\n\
        var result0, result1, result2, result3, result4, result5, result6, result7, result8;\n\
        var pos0, pos1, pos2;\n\
        \n\
        reportFailures++;\n\
        pos0 = pos;\n\
        pos1 = pos;\n\
        result0 = parse__();\n\
        if (result0 !== null) {\n\
          if (input.substr(pos, 2) === \"/*\") {\n\
            result1 = \"/*\";\n\
            pos += 2;\n\
          } else {\n\
            result1 = null;\n\
            if (reportFailures === 0) {\n\
              matchFailed(\"\\\"/*\\\"\");\n\
            }\n\
          }\n\
          if (result1 !== null) {\n\
            result2 = [];\n\
            if (/^[^*]/.test(input.charAt(pos))) {\n\
              result3 = input.charAt(pos);\n\
              pos++;\n\
            } else {\n\
              result3 = null;\n\
              if (reportFailures === 0) {\n\
                matchFailed(\"[^*]\");\n\
              }\n\
            }\n\
            while (result3 !== null) {\n\
              result2.push(result3);\n\
              if (/^[^*]/.test(input.charAt(pos))) {\n\
                result3 = input.charAt(pos);\n\
                pos++;\n\
              } else {\n\
                result3 = null;\n\
                if (reportFailures === 0) {\n\
                  matchFailed(\"[^*]\");\n\
                }\n\
              }\n\
            }\n\
            if (result2 !== null) {\n\
              if (input.charCodeAt(pos) === 42) {\n\
                result4 = \"*\";\n\
                pos++;\n\
              } else {\n\
                result4 = null;\n\
                if (reportFailures === 0) {\n\
                  matchFailed(\"\\\"*\\\"\");\n\
                }\n\
              }\n\
              if (result4 !== null) {\n\
                result3 = [];\n\
                while (result4 !== null) {\n\
                  result3.push(result4);\n\
                  if (input.charCodeAt(pos) === 42) {\n\
                    result4 = \"*\";\n\
                    pos++;\n\
                  } else {\n\
                    result4 = null;\n\
                    if (reportFailures === 0) {\n\
                      matchFailed(\"\\\"*\\\"\");\n\
                    }\n\
                  }\n\
                }\n\
              } else {\n\
                result3 = null;\n\
              }\n\
              if (result3 !== null) {\n\
                result4 = [];\n\
                pos2 = pos;\n\
                if (/^[^\\/*]/.test(input.charAt(pos))) {\n\
                  result5 = input.charAt(pos);\n\
                  pos++;\n\
                } else {\n\
                  result5 = null;\n\
                  if (reportFailures === 0) {\n\
                    matchFailed(\"[^\\\\/*]\");\n\
                  }\n\
                }\n\
                if (result5 !== null) {\n\
                  result6 = [];\n\
                  if (/^[^*]/.test(input.charAt(pos))) {\n\
                    result7 = input.charAt(pos);\n\
                    pos++;\n\
                  } else {\n\
                    result7 = null;\n\
                    if (reportFailures === 0) {\n\
                      matchFailed(\"[^*]\");\n\
                    }\n\
                  }\n\
                  while (result7 !== null) {\n\
                    result6.push(result7);\n\
                    if (/^[^*]/.test(input.charAt(pos))) {\n\
                      result7 = input.charAt(pos);\n\
                      pos++;\n\
                    } else {\n\
                      result7 = null;\n\
                      if (reportFailures === 0) {\n\
                        matchFailed(\"[^*]\");\n\
                      }\n\
                    }\n\
                  }\n\
                  if (result6 !== null) {\n\
                    if (input.charCodeAt(pos) === 42) {\n\
                      result8 = \"*\";\n\
                      pos++;\n\
                    } else {\n\
                      result8 = null;\n\
                      if (reportFailures === 0) {\n\
                        matchFailed(\"\\\"*\\\"\");\n\
                      }\n\
                    }\n\
                    if (result8 !== null) {\n\
                      result7 = [];\n\
                      while (result8 !== null) {\n\
                        result7.push(result8);\n\
                        if (input.charCodeAt(pos) === 42) {\n\
                          result8 = \"*\";\n\
                          pos++;\n\
                        } else {\n\
                          result8 = null;\n\
                          if (reportFailures === 0) {\n\
                            matchFailed(\"\\\"*\\\"\");\n\
                          }\n\
                        }\n\
                      }\n\
                    } else {\n\
                      result7 = null;\n\
                    }\n\
                    if (result7 !== null) {\n\
                      result5 = [result5, result6, result7];\n\
                    } else {\n\
                      result5 = null;\n\
                      pos = pos2;\n\
                    }\n\
                  } else {\n\
                    result5 = null;\n\
                    pos = pos2;\n\
                  }\n\
                } else {\n\
                  result5 = null;\n\
                  pos = pos2;\n\
                }\n\
                while (result5 !== null) {\n\
                  result4.push(result5);\n\
                  pos2 = pos;\n\
                  if (/^[^\\/*]/.test(input.charAt(pos))) {\n\
                    result5 = input.charAt(pos);\n\
                    pos++;\n\
                  } else {\n\
                    result5 = null;\n\
                    if (reportFailures === 0) {\n\
                      matchFailed(\"[^\\\\/*]\");\n\
                    }\n\
                  }\n\
                  if (result5 !== null) {\n\
                    result6 = [];\n\
                    if (/^[^*]/.test(input.charAt(pos))) {\n\
                      result7 = input.charAt(pos);\n\
                      pos++;\n\
                    } else {\n\
                      result7 = null;\n\
                      if (reportFailures === 0) {\n\
                        matchFailed(\"[^*]\");\n\
                      }\n\
                    }\n\
                    while (result7 !== null) {\n\
                      result6.push(result7);\n\
                      if (/^[^*]/.test(input.charAt(pos))) {\n\
                        result7 = input.charAt(pos);\n\
                        pos++;\n\
                      } else {\n\
                        result7 = null;\n\
                        if (reportFailures === 0) {\n\
                          matchFailed(\"[^*]\");\n\
                        }\n\
                      }\n\
                    }\n\
                    if (result6 !== null) {\n\
                      if (input.charCodeAt(pos) === 42) {\n\
                        result8 = \"*\";\n\
                        pos++;\n\
                      } else {\n\
                        result8 = null;\n\
                        if (reportFailures === 0) {\n\
                          matchFailed(\"\\\"*\\\"\");\n\
                        }\n\
                      }\n\
                      if (result8 !== null) {\n\
                        result7 = [];\n\
                        while (result8 !== null) {\n\
                          result7.push(result8);\n\
                          if (input.charCodeAt(pos) === 42) {\n\
                            result8 = \"*\";\n\
                            pos++;\n\
                          } else {\n\
                            result8 = null;\n\
                            if (reportFailures === 0) {\n\
                              matchFailed(\"\\\"*\\\"\");\n\
                            }\n\
                          }\n\
                        }\n\
                      } else {\n\
                        result7 = null;\n\
                      }\n\
                      if (result7 !== null) {\n\
                        result5 = [result5, result6, result7];\n\
                      } else {\n\
                        result5 = null;\n\
                        pos = pos2;\n\
                      }\n\
                    } else {\n\
                      result5 = null;\n\
                      pos = pos2;\n\
                    }\n\
                  } else {\n\
                    result5 = null;\n\
                    pos = pos2;\n\
                  }\n\
                }\n\
                if (result4 !== null) {\n\
                  if (input.charCodeAt(pos) === 47) {\n\
                    result5 = \"/\";\n\
                    pos++;\n\
                  } else {\n\
                    result5 = null;\n\
                    if (reportFailures === 0) {\n\
                      matchFailed(\"\\\"/\\\"\");\n\
                    }\n\
                  }\n\
                  if (result5 !== null) {\n\
                    result6 = parse__();\n\
                    if (result6 !== null) {\n\
                      result7 = [];\n\
                      result8 = parse_LineTerminator();\n\
                      while (result8 !== null) {\n\
                        result7.push(result8);\n\
                        result8 = parse_LineTerminator();\n\
                      }\n\
                      if (result7 !== null) {\n\
                        result0 = [result0, result1, result2, result3, result4, result5, result6, result7];\n\
                      } else {\n\
                        result0 = null;\n\
                        pos = pos1;\n\
                      }\n\
                    } else {\n\
                      result0 = null;\n\
                      pos = pos1;\n\
                    }\n\
                  } else {\n\
                    result0 = null;\n\
                    pos = pos1;\n\
                  }\n\
                } else {\n\
                  result0 = null;\n\
                  pos = pos1;\n\
                }\n\
              } else {\n\
                result0 = null;\n\
                pos = pos1;\n\
              }\n\
            } else {\n\
              result0 = null;\n\
              pos = pos1;\n\
            }\n\
          } else {\n\
            result0 = null;\n\
            pos = pos1;\n\
          }\n\
        } else {\n\
          result0 = null;\n\
          pos = pos1;\n\
        }\n\
        if (result0 !== null) {\n\
          result0 = (function(offset) {return \"\"})(pos0);\n\
        }\n\
        if (result0 === null) {\n\
          pos = pos0;\n\
        }\n\
        reportFailures--;\n\
        if (reportFailures === 0 && result0 === null) {\n\
          matchFailed(\"Comment\");\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse__() {\n\
        var result0, result1;\n\
        \n\
        result0 = [];\n\
        result1 = parse_space();\n\
        while (result1 !== null) {\n\
          result0.push(result1);\n\
          result1 = parse_space();\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse___() {\n\
        var result0, result1;\n\
        \n\
        result1 = parse_space();\n\
        if (result1 !== null) {\n\
          result0 = [];\n\
          while (result1 !== null) {\n\
            result0.push(result1);\n\
            result1 = parse_space();\n\
          }\n\
        } else {\n\
          result0 = null;\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_space() {\n\
        var result0;\n\
        \n\
        reportFailures++;\n\
        if (input.charCodeAt(pos) === 32) {\n\
          result0 = \" \";\n\
          pos++;\n\
        } else {\n\
          result0 = null;\n\
          if (reportFailures === 0) {\n\
            matchFailed(\"\\\" \\\"\");\n\
          }\n\
        }\n\
        if (result0 === null) {\n\
          if (/^[\\t]/.test(input.charAt(pos))) {\n\
            result0 = input.charAt(pos);\n\
            pos++;\n\
          } else {\n\
            result0 = null;\n\
            if (reportFailures === 0) {\n\
              matchFailed(\"[\\\\t]\");\n\
            }\n\
          }\n\
          if (result0 === null) {\n\
            if (/^[\\xA0]/.test(input.charAt(pos))) {\n\
              result0 = input.charAt(pos);\n\
              pos++;\n\
            } else {\n\
              result0 = null;\n\
              if (reportFailures === 0) {\n\
                matchFailed(\"[\\\\xA0]\");\n\
              }\n\
            }\n\
          }\n\
        }\n\
        reportFailures--;\n\
        if (reportFailures === 0 && result0 === null) {\n\
          matchFailed(\"Space\");\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_char() {\n\
        var result0;\n\
        \n\
        reportFailures++;\n\
        if (/^[a-zA-Z0-9_#.[\\]\\-\"\"']/.test(input.charAt(pos))) {\n\
          result0 = input.charAt(pos);\n\
          pos++;\n\
        } else {\n\
          result0 = null;\n\
          if (reportFailures === 0) {\n\
            matchFailed(\"[a-zA-Z0-9_#.[\\\\]\\\\-\\\"\\\"']\");\n\
          }\n\
        }\n\
        reportFailures--;\n\
        if (reportFailures === 0 && result0 === null) {\n\
          matchFailed(\"char\");\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_anychar() {\n\
        var result0;\n\
        \n\
        if (/^[a-zA-Z0-9 .,#:+?!^=()_\\-$*\\/\\\\\"\"']/.test(input.charAt(pos))) {\n\
          result0 = input.charAt(pos);\n\
          pos++;\n\
        } else {\n\
          result0 = null;\n\
          if (reportFailures === 0) {\n\
            matchFailed(\"[a-zA-Z0-9 .,#:+?!^=()_\\\\-$*\\\\/\\\\\\\\\\\"\\\"']\");\n\
          }\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_multitoend() {\n\
        var result0, result1, result2, result3, result4;\n\
        var pos0;\n\
        \n\
        reportFailures++;\n\
        pos0 = pos;\n\
        result0 = [];\n\
        if (/^[^}]/.test(input.charAt(pos))) {\n\
          result1 = input.charAt(pos);\n\
          pos++;\n\
        } else {\n\
          result1 = null;\n\
          if (reportFailures === 0) {\n\
            matchFailed(\"[^}]\");\n\
          }\n\
        }\n\
        while (result1 !== null) {\n\
          result0.push(result1);\n\
          if (/^[^}]/.test(input.charAt(pos))) {\n\
            result1 = input.charAt(pos);\n\
            pos++;\n\
          } else {\n\
            result1 = null;\n\
            if (reportFailures === 0) {\n\
              matchFailed(\"[^}]\");\n\
            }\n\
          }\n\
        }\n\
        if (result0 !== null) {\n\
          if (input.charCodeAt(pos) === 125) {\n\
            result1 = \"}\";\n\
            pos++;\n\
          } else {\n\
            result1 = null;\n\
            if (reportFailures === 0) {\n\
              matchFailed(\"\\\"}\\\"\");\n\
            }\n\
          }\n\
          if (result1 !== null) {\n\
            result2 = parse__();\n\
            if (result2 !== null) {\n\
              result3 = [];\n\
              result4 = parse_LineTerminator();\n\
              while (result4 !== null) {\n\
                result3.push(result4);\n\
                result4 = parse_LineTerminator();\n\
              }\n\
              if (result3 !== null) {\n\
                result0 = [result0, result1, result2, result3];\n\
              } else {\n\
                result0 = null;\n\
                pos = pos0;\n\
              }\n\
            } else {\n\
              result0 = null;\n\
              pos = pos0;\n\
            }\n\
          } else {\n\
            result0 = null;\n\
            pos = pos0;\n\
          }\n\
        } else {\n\
          result0 = null;\n\
          pos = pos0;\n\
        }\n\
        reportFailures--;\n\
        if (reportFailures === 0 && result0 === null) {\n\
          matchFailed(\"multitoend\");\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_anytoend() {\n\
        var result0, result1, result2, result3, result4;\n\
        var pos0;\n\
        \n\
        reportFailures++;\n\
        pos0 = pos;\n\
        result0 = [];\n\
        if (/^[^;]/.test(input.charAt(pos))) {\n\
          result1 = input.charAt(pos);\n\
          pos++;\n\
        } else {\n\
          result1 = null;\n\
          if (reportFailures === 0) {\n\
            matchFailed(\"[^;]\");\n\
          }\n\
        }\n\
        while (result1 !== null) {\n\
          result0.push(result1);\n\
          if (/^[^;]/.test(input.charAt(pos))) {\n\
            result1 = input.charAt(pos);\n\
            pos++;\n\
          } else {\n\
            result1 = null;\n\
            if (reportFailures === 0) {\n\
              matchFailed(\"[^;]\");\n\
            }\n\
          }\n\
        }\n\
        if (result0 !== null) {\n\
          if (input.charCodeAt(pos) === 59) {\n\
            result1 = \";\";\n\
            pos++;\n\
          } else {\n\
            result1 = null;\n\
            if (reportFailures === 0) {\n\
              matchFailed(\"\\\";\\\"\");\n\
            }\n\
          }\n\
          if (result1 !== null) {\n\
            result2 = parse__();\n\
            if (result2 !== null) {\n\
              result3 = [];\n\
              result4 = parse_LineTerminator();\n\
              while (result4 !== null) {\n\
                result3.push(result4);\n\
                result4 = parse_LineTerminator();\n\
              }\n\
              if (result3 !== null) {\n\
                result0 = [result0, result1, result2, result3];\n\
              } else {\n\
                result0 = null;\n\
                pos = pos0;\n\
              }\n\
            } else {\n\
              result0 = null;\n\
              pos = pos0;\n\
            }\n\
          } else {\n\
            result0 = null;\n\
            pos = pos0;\n\
          }\n\
        } else {\n\
          result0 = null;\n\
          pos = pos0;\n\
        }\n\
        reportFailures--;\n\
        if (reportFailures === 0 && result0 === null) {\n\
          matchFailed(\"anytoend\");\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_TextToColon() {\n\
        var result0, result1, result2, result3, result4;\n\
        var pos0, pos1;\n\
        \n\
        reportFailures++;\n\
        pos0 = pos;\n\
        pos1 = pos;\n\
        if (/^[^:{}]/.test(input.charAt(pos))) {\n\
          result1 = input.charAt(pos);\n\
          pos++;\n\
        } else {\n\
          result1 = null;\n\
          if (reportFailures === 0) {\n\
            matchFailed(\"[^:{}]\");\n\
          }\n\
        }\n\
        if (result1 !== null) {\n\
          result0 = [];\n\
          while (result1 !== null) {\n\
            result0.push(result1);\n\
            if (/^[^:{}]/.test(input.charAt(pos))) {\n\
              result1 = input.charAt(pos);\n\
              pos++;\n\
            } else {\n\
              result1 = null;\n\
              if (reportFailures === 0) {\n\
                matchFailed(\"[^:{}]\");\n\
              }\n\
            }\n\
          }\n\
        } else {\n\
          result0 = null;\n\
        }\n\
        if (result0 !== null) {\n\
          if (input.charCodeAt(pos) === 58) {\n\
            result1 = \":\";\n\
            pos++;\n\
          } else {\n\
            result1 = null;\n\
            if (reportFailures === 0) {\n\
              matchFailed(\"\\\":\\\"\");\n\
            }\n\
          }\n\
          if (result1 !== null) {\n\
            result2 = parse__();\n\
            if (result2 !== null) {\n\
              result3 = [];\n\
              result4 = parse_LineTerminator();\n\
              while (result4 !== null) {\n\
                result3.push(result4);\n\
                result4 = parse_LineTerminator();\n\
              }\n\
              if (result3 !== null) {\n\
                result0 = [result0, result1, result2, result3];\n\
              } else {\n\
                result0 = null;\n\
                pos = pos1;\n\
              }\n\
            } else {\n\
              result0 = null;\n\
              pos = pos1;\n\
            }\n\
          } else {\n\
            result0 = null;\n\
            pos = pos1;\n\
          }\n\
        } else {\n\
          result0 = null;\n\
          pos = pos1;\n\
        }\n\
        if (result0 !== null) {\n\
          result0 = (function(offset, text) {return p.stringify(text)})(pos0, result0[0]);\n\
        }\n\
        if (result0 === null) {\n\
          pos = pos0;\n\
        }\n\
        reportFailures--;\n\
        if (reportFailures === 0 && result0 === null) {\n\
          matchFailed(\"TextToColon\");\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_TextToSemicolon() {\n\
        var result0, result1, result2, result3, result4;\n\
        var pos0, pos1;\n\
        \n\
        reportFailures++;\n\
        pos0 = pos;\n\
        pos1 = pos;\n\
        if (/^[^;{}]/.test(input.charAt(pos))) {\n\
          result1 = input.charAt(pos);\n\
          pos++;\n\
        } else {\n\
          result1 = null;\n\
          if (reportFailures === 0) {\n\
            matchFailed(\"[^;{}]\");\n\
          }\n\
        }\n\
        if (result1 !== null) {\n\
          result0 = [];\n\
          while (result1 !== null) {\n\
            result0.push(result1);\n\
            if (/^[^;{}]/.test(input.charAt(pos))) {\n\
              result1 = input.charAt(pos);\n\
              pos++;\n\
            } else {\n\
              result1 = null;\n\
              if (reportFailures === 0) {\n\
                matchFailed(\"[^;{}]\");\n\
              }\n\
            }\n\
          }\n\
        } else {\n\
          result0 = null;\n\
        }\n\
        if (result0 !== null) {\n\
          if (input.charCodeAt(pos) === 59) {\n\
            result1 = \";\";\n\
            pos++;\n\
          } else {\n\
            result1 = null;\n\
            if (reportFailures === 0) {\n\
              matchFailed(\"\\\";\\\"\");\n\
            }\n\
          }\n\
          if (result1 !== null) {\n\
            result2 = parse__();\n\
            if (result2 !== null) {\n\
              result3 = [];\n\
              result4 = parse_LineTerminator();\n\
              while (result4 !== null) {\n\
                result3.push(result4);\n\
                result4 = parse_LineTerminator();\n\
              }\n\
              if (result3 !== null) {\n\
                result0 = [result0, result1, result2, result3];\n\
              } else {\n\
                result0 = null;\n\
                pos = pos1;\n\
              }\n\
            } else {\n\
              result0 = null;\n\
              pos = pos1;\n\
            }\n\
          } else {\n\
            result0 = null;\n\
            pos = pos1;\n\
          }\n\
        } else {\n\
          result0 = null;\n\
          pos = pos1;\n\
        }\n\
        if (result0 !== null) {\n\
          result0 = (function(offset, text) {return p.stringify(text)})(pos0, result0[0]);\n\
        }\n\
        if (result0 === null) {\n\
          pos = pos0;\n\
        }\n\
        reportFailures--;\n\
        if (reportFailures === 0 && result0 === null) {\n\
          matchFailed(\"TextToSemicolon\");\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse__terminators() {\n\
        var result0, result1, result2;\n\
        var pos0;\n\
        \n\
        pos0 = pos;\n\
        result0 = parse__();\n\
        if (result0 !== null) {\n\
          result1 = [];\n\
          result2 = parse_LineTerminator();\n\
          while (result2 !== null) {\n\
            result1.push(result2);\n\
            result2 = parse_LineTerminator();\n\
          }\n\
          if (result1 !== null) {\n\
            result0 = [result0, result1];\n\
          } else {\n\
            result0 = null;\n\
            pos = pos0;\n\
          }\n\
        } else {\n\
          result0 = null;\n\
          pos = pos0;\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_LineTerminator() {\n\
        var result0, result1;\n\
        var pos0;\n\
        \n\
        reportFailures++;\n\
        pos0 = pos;\n\
        if (/^[\\n\
\\r\\u2028\\u2029]/.test(input.charAt(pos))) {\n\
          result0 = input.charAt(pos);\n\
          pos++;\n\
        } else {\n\
          result0 = null;\n\
          if (reportFailures === 0) {\n\
            matchFailed(\"[\\\\n\
\\\\r\\\\u2028\\\\u2029]\");\n\
          }\n\
        }\n\
        if (result0 === null) {\n\
          if (input.substr(pos, 2) === \"\\r\\n\
\") {\n\
            result0 = \"\\r\\n\
\";\n\
            pos += 2;\n\
          } else {\n\
            result0 = null;\n\
            if (reportFailures === 0) {\n\
              matchFailed(\"\\\"\\\\r\\\\n\
\\\"\");\n\
            }\n\
          }\n\
        }\n\
        if (result0 !== null) {\n\
          result1 = parse__();\n\
          if (result1 !== null) {\n\
            result0 = [result0, result1];\n\
          } else {\n\
            result0 = null;\n\
            pos = pos0;\n\
          }\n\
        } else {\n\
          result0 = null;\n\
          pos = pos0;\n\
        }\n\
        if (result0 === null) {\n\
          result0 = parse_comment();\n\
        }\n\
        reportFailures--;\n\
        if (reportFailures === 0 && result0 === null) {\n\
          matchFailed(\"LineTerminator\");\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      \n\
      function cleanupExpected(expected) {\n\
        expected.sort();\n\
        \n\
        var lastExpected = null;\n\
        var cleanExpected = [];\n\
        for (var i = 0; i < expected.length; i++) {\n\
          if (expected[i] !== lastExpected) {\n\
            cleanExpected.push(expected[i]);\n\
            lastExpected = expected[i];\n\
          }\n\
        }\n\
        return cleanExpected;\n\
      }\n\
      \n\
      function computeErrorPosition() {\n\
        /*\n\
         * The first idea was to use |String.split| to break the input up to the\n\
         * error position along newlines and derive the line and column from\n\
         * there. However IE's |split| implementation is so broken that it was\n\
         * enough to prevent it.\n\
         */\n\
        \n\
        var line = 1;\n\
        var column = 1;\n\
        var seenCR = false;\n\
        \n\
        for (var i = 0; i < Math.max(pos, rightmostFailuresPos); i++) {\n\
          var ch = input.charAt(i);\n\
          if (ch === \"\\n\
\") {\n\
            if (!seenCR) { line++; }\n\
            column = 1;\n\
            seenCR = false;\n\
          } else if (ch === \"\\r\" || ch === \"\\u2028\" || ch === \"\\u2029\") {\n\
            line++;\n\
            column = 1;\n\
            seenCR = true;\n\
          } else {\n\
            column++;\n\
            seenCR = false;\n\
          }\n\
        }\n\
        \n\
        return { line: line, column: column };\n\
      }\n\
      \n\
      \n\
        var p, parser, flatten, idPrefix; \n\
        p = parser = this;\n\
      \n\
        String.prototype.trim = String.prototype.trim || function trim() { return this.replace(/^\\s\\s*/, '').replace(/\\s\\s*$/, ''); };\n\
      \n\
        flatten = parser.flatten = function (array, isShallow) {\n\
          var index = -1,\n\
            length = array ? array.length : 0,\n\
            result = [];\n\
      \n\
          while (++index < length) {\n\
            var value = array[index];\n\
      \n\
            if (value instanceof Array) {\n\
              Array.prototype.push.apply(result, isShallow ? value : flatten(value));\n\
            }\n\
            else {\n\
              result.push(value);\n\
            }\n\
          }\n\
          return result;\n\
        }\n\
      \n\
        p.results = [];\n\
      \n\
        p.stringify = function (array) {\n\
          return flatten(array).join(\"\").trim();\n\
        };\n\
      \n\
        p.trim = function (x) {\n\
          if (typeof x === \"string\") {return x.trim();}\n\
          if (x instanceof Array) {return x.join(\"\").trim();}\n\
          return \"\"\n\
        };\n\
        \n\
        parser.error = function (m,l,c) {\n\
          if (!!l && !!c) {\n\
            m = m + \" {line:\" + l + \", col:\" + c + \"}\";\n\
          }\n\
          console.error(m);\n\
          return m;\n\
        };\n\
      \n\
      \n\
      \n\
      var result = parseFunctions[startRule]();\n\
      \n\
      /*\n\
       * The parser is now in one of the following three states:\n\
       *\n\
       * 1. The parser successfully parsed the whole input.\n\
       *\n\
       *    - |result !== null|\n\
       *    - |pos === input.length|\n\
       *    - |rightmostFailuresExpected| may or may not contain something\n\
       *\n\
       * 2. The parser successfully parsed only a part of the input.\n\
       *\n\
       *    - |result !== null|\n\
       *    - |pos < input.length|\n\
       *    - |rightmostFailuresExpected| may or may not contain something\n\
       *\n\
       * 3. The parser did not successfully parse any part of the input.\n\
       *\n\
       *   - |result === null|\n\
       *   - |pos === 0|\n\
       *   - |rightmostFailuresExpected| contains at least one failure\n\
       *\n\
       * All code following this comment (including called functions) must\n\
       * handle these states.\n\
       */\n\
      if (result === null || pos !== input.length) {\n\
        var offset = Math.max(pos, rightmostFailuresPos);\n\
        var found = offset < input.length ? input.charAt(offset) : null;\n\
        var errorPosition = computeErrorPosition();\n\
        \n\
        throw new this.SyntaxError(\n\
          cleanupExpected(rightmostFailuresExpected),\n\
          found,\n\
          offset,\n\
          errorPosition.line,\n\
          errorPosition.column\n\
        );\n\
      }\n\
      \n\
      return result;\n\
    },\n\
    \n\
    /* Returns the parser source code. */\n\
    toSource: function() { return this._source; }\n\
  };\n\
  \n\
  /* Thrown when a parser encounters a syntax error. */\n\
  \n\
  result.SyntaxError = function(expected, found, offset, line, column) {\n\
    function buildMessage(expected, found) {\n\
      var expectedHumanized, foundHumanized;\n\
      \n\
      switch (expected.length) {\n\
        case 0:\n\
          expectedHumanized = \"end of input\";\n\
          break;\n\
        case 1:\n\
          expectedHumanized = expected[0];\n\
          break;\n\
        default:\n\
          expectedHumanized = expected.slice(0, expected.length - 1).join(\", \")\n\
            + \" or \"\n\
            + expected[expected.length - 1];\n\
      }\n\
      \n\
      foundHumanized = found ? quote(found) : \"end of input\";\n\
      \n\
      return \"Expected \" + expectedHumanized + \" but \" + foundHumanized + \" found.\";\n\
    }\n\
    \n\
    this.name = \"SyntaxError\";\n\
    this.expected = expected;\n\
    this.found = found;\n\
    this.message = buildMessage(expected, found);\n\
    this.offset = offset;\n\
    this.line = line;\n\
    this.column = column;\n\
  };\n\
  \n\
  result.SyntaxError.prototype = Error.prototype;\n\
  \n\
  return result;\n\
})();//@ sourceURL=the-gss-preparser/lib/gss-preparser.js"
));
require.register("the-gss-ccss-compiler/lib/ccss-compiler.js", Function("exports, require, module",
"module.exports = (function(){\n\
  /*\n\
   * Generated by PEG.js 0.7.0.\n\
   *\n\
   * http://pegjs.majda.cz/\n\
   */\n\
  \n\
  function quote(s) {\n\
    /*\n\
     * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a\n\
     * string literal except for the closing quote character, backslash,\n\
     * carriage return, line separator, paragraph separator, and line feed.\n\
     * Any character may appear in the form of an escape sequence.\n\
     *\n\
     * For portability, we also escape escape all control and non-ASCII\n\
     * characters. Note that \"\\0\" and \"\\v\" escape sequences are not used\n\
     * because JSHint does not like the first and IE the second.\n\
     */\n\
     return '\"' + s\n\
      .replace(/\\\\/g, '\\\\\\\\')  // backslash\n\
      .replace(/\"/g, '\\\\\"')    // closing quote character\n\
      .replace(/\\x08/g, '\\\\b') // backspace\n\
      .replace(/\\t/g, '\\\\t')   // horizontal tab\n\
      .replace(/\\n\
/g, '\\\\n\
')   // line feed\n\
      .replace(/\\f/g, '\\\\f')   // form feed\n\
      .replace(/\\r/g, '\\\\r')   // carriage return\n\
      .replace(/[\\x00-\\x07\\x0B\\x0E-\\x1F\\x80-\\uFFFF]/g, escape)\n\
      + '\"';\n\
  }\n\
  \n\
  var result = {\n\
    /*\n\
     * Parses the input with a generated parser. If the parsing is successfull,\n\
     * returns a value explicitly or implicitly specified by the grammar from\n\
     * which the parser was generated (see |PEG.buildParser|). If the parsing is\n\
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.\n\
     */\n\
    parse: function(input, startRule) {\n\
      var parseFunctions = {\n\
        \"start\": parse_start,\n\
        \"Statement\": parse_Statement,\n\
        \"LinearExpression\": parse_LinearExpression,\n\
        \"EqOperator\": parse_EqOperator,\n\
        \"AdditiveExpression\": parse_AdditiveExpression,\n\
        \"AdditiveOperator\": parse_AdditiveOperator,\n\
        \"MultiplicativeExpression\": parse_MultiplicativeExpression,\n\
        \"MultiplicativeOperator\": parse_MultiplicativeOperator,\n\
        \"UnaryExpression\": parse_UnaryExpression,\n\
        \"UnaryOperator\": parse_UnaryOperator,\n\
        \"PrimaryExpression\": parse_PrimaryExpression,\n\
        \"Measure\": parse_Measure,\n\
        \"Var\": parse_Var,\n\
        \"VarNames\": parse_VarNames,\n\
        \"NameChars\": parse_NameChars,\n\
        \"NameCharsWithSpace\": parse_NameCharsWithSpace,\n\
        \"Literal\": parse_Literal,\n\
        \"Integer\": parse_Integer,\n\
        \"Real\": parse_Real,\n\
        \"SignedInteger\": parse_SignedInteger,\n\
        \"SourceCharacter\": parse_SourceCharacter,\n\
        \"WhiteSpace\": parse_WhiteSpace,\n\
        \"LineTerminator\": parse_LineTerminator,\n\
        \"LineTerminatorSequence\": parse_LineTerminatorSequence,\n\
        \"EOS\": parse_EOS,\n\
        \"EOF\": parse_EOF,\n\
        \"Comment\": parse_Comment,\n\
        \"MultiLineComment\": parse_MultiLineComment,\n\
        \"MultiLineCommentNoLineTerminator\": parse_MultiLineCommentNoLineTerminator,\n\
        \"SingleLineComment\": parse_SingleLineComment,\n\
        \"_\": parse__,\n\
        \"__\": parse___,\n\
        \"Selector\": parse_Selector,\n\
        \"QuerySelectorChars\": parse_QuerySelectorChars,\n\
        \"ReservedPseudos\": parse_ReservedPseudos,\n\
        \"StrengthAndWeight\": parse_StrengthAndWeight,\n\
        \"Weight\": parse_Weight,\n\
        \"Strength\": parse_Strength,\n\
        \"Virtual\": parse_Virtual,\n\
        \"VirtualName\": parse_VirtualName,\n\
        \"Stay\": parse_Stay,\n\
        \"StayVars\": parse_StayVars,\n\
        \"StayStart\": parse_StayStart,\n\
        \"Conditional\": parse_Conditional,\n\
        \"AndOrExpression\": parse_AndOrExpression,\n\
        \"AndOrOp\": parse_AndOrOp,\n\
        \"ConditionalExpression\": parse_ConditionalExpression,\n\
        \"CondOperator\": parse_CondOperator,\n\
        \"ForEach\": parse_ForEach,\n\
        \"JavaScript\": parse_JavaScript,\n\
        \"ForLooperType\": parse_ForLooperType,\n\
        \"Chain\": parse_Chain,\n\
        \"Chainer\": parse_Chainer,\n\
        \"HeadExp\": parse_HeadExp,\n\
        \"TailExp\": parse_TailExp,\n\
        \"ChainMath\": parse_ChainMath,\n\
        \"ChainEq\": parse_ChainEq\n\
      };\n\
      \n\
      if (startRule !== undefined) {\n\
        if (parseFunctions[startRule] === undefined) {\n\
          throw new Error(\"Invalid rule name: \" + quote(startRule) + \".\");\n\
        }\n\
      } else {\n\
        startRule = \"start\";\n\
      }\n\
      \n\
      var pos = 0;\n\
      var reportFailures = 0;\n\
      var rightmostFailuresPos = 0;\n\
      var rightmostFailuresExpected = [];\n\
      \n\
      function padLeft(input, padding, length) {\n\
        var result = input;\n\
        \n\
        var padLength = length - input.length;\n\
        for (var i = 0; i < padLength; i++) {\n\
          result = padding + result;\n\
        }\n\
        \n\
        return result;\n\
      }\n\
      \n\
      function escape(ch) {\n\
        var charCode = ch.charCodeAt(0);\n\
        var escapeChar;\n\
        var length;\n\
        \n\
        if (charCode <= 0xFF) {\n\
          escapeChar = 'x';\n\
          length = 2;\n\
        } else {\n\
          escapeChar = 'u';\n\
          length = 4;\n\
        }\n\
        \n\
        return '\\\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);\n\
      }\n\
      \n\
      function matchFailed(failure) {\n\
        if (pos < rightmostFailuresPos) {\n\
          return;\n\
        }\n\
        \n\
        if (pos > rightmostFailuresPos) {\n\
          rightmostFailuresPos = pos;\n\
          rightmostFailuresExpected = [];\n\
        }\n\
        \n\
        rightmostFailuresExpected.push(failure);\n\
      }\n\
      \n\
      function parse_start() {\n\
        var result0, result1, result2;\n\
        var pos0, pos1;\n\
        \n\
        pos0 = pos;\n\
        pos1 = pos;\n\
        result0 = parse___();\n\
        if (result0 !== null) {\n\
          result1 = [];\n\
          result2 = parse_Statement();\n\
          while (result2 !== null) {\n\
            result1.push(result2);\n\
            result2 = parse_Statement();\n\
          }\n\
          if (result1 !== null) {\n\
            result2 = parse___();\n\
            if (result2 !== null) {\n\
              result0 = [result0, result1, result2];\n\
            } else {\n\
              result0 = null;\n\
              pos = pos1;\n\
            }\n\
          } else {\n\
            result0 = null;\n\
            pos = pos1;\n\
          }\n\
        } else {\n\
          result0 = null;\n\
          pos = pos1;\n\
        }\n\
        if (result0 !== null) {\n\
          result0 = (function(offset, statements) { return (parser.getResults()); })(pos0, result0[1]);\n\
        }\n\
        if (result0 === null) {\n\
          pos = pos0;\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_Statement() {\n\
        var result0, result1, result2;\n\
        var pos0, pos1;\n\
        \n\
        pos0 = pos;\n\
        pos1 = pos;\n\
        result0 = parse_LinearExpression();\n\
        if (result0 !== null) {\n\
          result1 = parse_EOS();\n\
          if (result1 !== null) {\n\
            result2 = parse___();\n\
            if (result2 !== null) {\n\
              result0 = [result0, result1, result2];\n\
            } else {\n\
              result0 = null;\n\
              pos = pos1;\n\
            }\n\
          } else {\n\
            result0 = null;\n\
            pos = pos1;\n\
          }\n\
        } else {\n\
          result0 = null;\n\
          pos = pos1;\n\
        }\n\
        if (result0 !== null) {\n\
          result0 = (function(offset, exp) { return exp; })(pos0, result0[0]);\n\
        }\n\
        if (result0 === null) {\n\
          pos = pos0;\n\
        }\n\
        if (result0 === null) {\n\
          pos0 = pos;\n\
          pos1 = pos;\n\
          result0 = parse_Virtual();\n\
          if (result0 !== null) {\n\
            result1 = parse_EOS();\n\
            if (result1 !== null) {\n\
              result2 = parse___();\n\
              if (result2 !== null) {\n\
                result0 = [result0, result1, result2];\n\
              } else {\n\
                result0 = null;\n\
                pos = pos1;\n\
              }\n\
            } else {\n\
              result0 = null;\n\
              pos = pos1;\n\
            }\n\
          } else {\n\
            result0 = null;\n\
            pos = pos1;\n\
          }\n\
          if (result0 !== null) {\n\
            result0 = (function(offset, virtual) { return virtual; })(pos0, result0[0]);\n\
          }\n\
          if (result0 === null) {\n\
            pos = pos0;\n\
          }\n\
          if (result0 === null) {\n\
            pos0 = pos;\n\
            pos1 = pos;\n\
            result0 = parse_Conditional();\n\
            if (result0 !== null) {\n\
              result1 = parse_EOS();\n\
              if (result1 !== null) {\n\
                result2 = parse___();\n\
                if (result2 !== null) {\n\
                  result0 = [result0, result1, result2];\n\
                } else {\n\
                  result0 = null;\n\
                  pos = pos1;\n\
                }\n\
              } else {\n\
                result0 = null;\n\
                pos = pos1;\n\
              }\n\
            } else {\n\
              result0 = null;\n\
              pos = pos1;\n\
            }\n\
            if (result0 !== null) {\n\
              result0 = (function(offset, cond) { return cond; })(pos0, result0[0]);\n\
            }\n\
            if (result0 === null) {\n\
              pos = pos0;\n\
            }\n\
            if (result0 === null) {\n\
              pos0 = pos;\n\
              pos1 = pos;\n\
              result0 = parse_Stay();\n\
              if (result0 !== null) {\n\
                result1 = parse_EOS();\n\
                if (result1 !== null) {\n\
                  result2 = parse___();\n\
                  if (result2 !== null) {\n\
                    result0 = [result0, result1, result2];\n\
                  } else {\n\
                    result0 = null;\n\
                    pos = pos1;\n\
                  }\n\
                } else {\n\
                  result0 = null;\n\
                  pos = pos1;\n\
                }\n\
              } else {\n\
                result0 = null;\n\
                pos = pos1;\n\
              }\n\
              if (result0 !== null) {\n\
                result0 = (function(offset, stay) { return stay; })(pos0, result0[0]);\n\
              }\n\
              if (result0 === null) {\n\
                pos = pos0;\n\
              }\n\
              if (result0 === null) {\n\
                pos0 = pos;\n\
                pos1 = pos;\n\
                result0 = parse_Chain();\n\
                if (result0 !== null) {\n\
                  result1 = parse_EOS();\n\
                  if (result1 !== null) {\n\
                    result2 = parse___();\n\
                    if (result2 !== null) {\n\
                      result0 = [result0, result1, result2];\n\
                    } else {\n\
                      result0 = null;\n\
                      pos = pos1;\n\
                    }\n\
                  } else {\n\
                    result0 = null;\n\
                    pos = pos1;\n\
                  }\n\
                } else {\n\
                  result0 = null;\n\
                  pos = pos1;\n\
                }\n\
                if (result0 !== null) {\n\
                  result0 = (function(offset, chain) { return chain; })(pos0, result0[0]);\n\
                }\n\
                if (result0 === null) {\n\
                  pos = pos0;\n\
                }\n\
                if (result0 === null) {\n\
                  pos0 = pos;\n\
                  pos1 = pos;\n\
                  result0 = parse_ForEach();\n\
                  if (result0 !== null) {\n\
                    result1 = parse_EOS();\n\
                    if (result1 !== null) {\n\
                      result2 = parse___();\n\
                      if (result2 !== null) {\n\
                        result0 = [result0, result1, result2];\n\
                      } else {\n\
                        result0 = null;\n\
                        pos = pos1;\n\
                      }\n\
                    } else {\n\
                      result0 = null;\n\
                      pos = pos1;\n\
                    }\n\
                  } else {\n\
                    result0 = null;\n\
                    pos = pos1;\n\
                  }\n\
                  if (result0 !== null) {\n\
                    result0 = (function(offset, js) { return js; })(pos0, result0[0]);\n\
                  }\n\
                  if (result0 === null) {\n\
                    pos = pos0;\n\
                  }\n\
                }\n\
              }\n\
            }\n\
          }\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_LinearExpression() {\n\
        var result0, result1, result2, result3, result4, result5;\n\
        var pos0, pos1, pos2;\n\
        \n\
        pos0 = pos;\n\
        pos1 = pos;\n\
        result0 = parse_AdditiveExpression();\n\
        if (result0 !== null) {\n\
          result1 = [];\n\
          pos2 = pos;\n\
          result2 = parse___();\n\
          if (result2 !== null) {\n\
            result3 = parse_EqOperator();\n\
            if (result3 !== null) {\n\
              result4 = parse___();\n\
              if (result4 !== null) {\n\
                result5 = parse_AdditiveExpression();\n\
                if (result5 !== null) {\n\
                  result2 = [result2, result3, result4, result5];\n\
                } else {\n\
                  result2 = null;\n\
                  pos = pos2;\n\
                }\n\
              } else {\n\
                result2 = null;\n\
                pos = pos2;\n\
              }\n\
            } else {\n\
              result2 = null;\n\
              pos = pos2;\n\
            }\n\
          } else {\n\
            result2 = null;\n\
            pos = pos2;\n\
          }\n\
          while (result2 !== null) {\n\
            result1.push(result2);\n\
            pos2 = pos;\n\
            result2 = parse___();\n\
            if (result2 !== null) {\n\
              result3 = parse_EqOperator();\n\
              if (result3 !== null) {\n\
                result4 = parse___();\n\
                if (result4 !== null) {\n\
                  result5 = parse_AdditiveExpression();\n\
                  if (result5 !== null) {\n\
                    result2 = [result2, result3, result4, result5];\n\
                  } else {\n\
                    result2 = null;\n\
                    pos = pos2;\n\
                  }\n\
                } else {\n\
                  result2 = null;\n\
                  pos = pos2;\n\
                }\n\
              } else {\n\
                result2 = null;\n\
                pos = pos2;\n\
              }\n\
            } else {\n\
              result2 = null;\n\
              pos = pos2;\n\
            }\n\
          }\n\
          if (result1 !== null) {\n\
            result2 = parse___();\n\
            if (result2 !== null) {\n\
              result3 = parse_StrengthAndWeight();\n\
              result3 = result3 !== null ? result3 : \"\";\n\
              if (result3 !== null) {\n\
                result0 = [result0, result1, result2, result3];\n\
              } else {\n\
                result0 = null;\n\
                pos = pos1;\n\
              }\n\
            } else {\n\
              result0 = null;\n\
              pos = pos1;\n\
            }\n\
          } else {\n\
            result0 = null;\n\
            pos = pos1;\n\
          }\n\
        } else {\n\
          result0 = null;\n\
          pos = pos1;\n\
        }\n\
        if (result0 !== null) {\n\
          result0 = (function(offset, e1, tail, s) {\n\
              var eq, e2;\n\
              if (s.length === 0) {s = [];}\n\
              for (var i = 0; i < tail.length; i++) {\n\
                eq = tail[i][1];\n\
                e2 = tail[i][3];\n\
                parser.addC([\n\
                  eq,\n\
                  e1,\n\
                  e2\n\
                ].concat(s));\n\
                e1 = e2;\n\
              }\n\
              return \"LineaerExpression\";\n\
            })(pos0, result0[0], result0[1], result0[3]);\n\
        }\n\
        if (result0 === null) {\n\
          pos = pos0;\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_EqOperator() {\n\
        var result0;\n\
        var pos0;\n\
        \n\
        pos0 = pos;\n\
        if (input.substr(pos, 2) === \"==\") {\n\
          result0 = \"==\";\n\
          pos += 2;\n\
        } else {\n\
          result0 = null;\n\
          if (reportFailures === 0) {\n\
            matchFailed(\"\\\"==\\\"\");\n\
          }\n\
        }\n\
        if (result0 !== null) {\n\
          result0 = (function(offset) { return \"eq\" })(pos0);\n\
        }\n\
        if (result0 === null) {\n\
          pos = pos0;\n\
        }\n\
        if (result0 === null) {\n\
          pos0 = pos;\n\
          if (input.substr(pos, 2) === \"<=\") {\n\
            result0 = \"<=\";\n\
            pos += 2;\n\
          } else {\n\
            result0 = null;\n\
            if (reportFailures === 0) {\n\
              matchFailed(\"\\\"<=\\\"\");\n\
            }\n\
          }\n\
          if (result0 === null) {\n\
            if (input.substr(pos, 2) === \"=<\") {\n\
              result0 = \"=<\";\n\
              pos += 2;\n\
            } else {\n\
              result0 = null;\n\
              if (reportFailures === 0) {\n\
                matchFailed(\"\\\"=<\\\"\");\n\
              }\n\
            }\n\
          }\n\
          if (result0 !== null) {\n\
            result0 = (function(offset) { return \"lte\" })(pos0);\n\
          }\n\
          if (result0 === null) {\n\
            pos = pos0;\n\
          }\n\
          if (result0 === null) {\n\
            pos0 = pos;\n\
            if (input.substr(pos, 2) === \">=\") {\n\
              result0 = \">=\";\n\
              pos += 2;\n\
            } else {\n\
              result0 = null;\n\
              if (reportFailures === 0) {\n\
                matchFailed(\"\\\">=\\\"\");\n\
              }\n\
            }\n\
            if (result0 === null) {\n\
              if (input.substr(pos, 2) === \"=>\") {\n\
                result0 = \"=>\";\n\
                pos += 2;\n\
              } else {\n\
                result0 = null;\n\
                if (reportFailures === 0) {\n\
                  matchFailed(\"\\\"=>\\\"\");\n\
                }\n\
              }\n\
            }\n\
            if (result0 !== null) {\n\
              result0 = (function(offset) { return \"gte\" })(pos0);\n\
            }\n\
            if (result0 === null) {\n\
              pos = pos0;\n\
            }\n\
            if (result0 === null) {\n\
              pos0 = pos;\n\
              if (input.charCodeAt(pos) === 60) {\n\
                result0 = \"<\";\n\
                pos++;\n\
              } else {\n\
                result0 = null;\n\
                if (reportFailures === 0) {\n\
                  matchFailed(\"\\\"<\\\"\");\n\
                }\n\
              }\n\
              if (result0 !== null) {\n\
                result0 = (function(offset) { return \"lt\"  })(pos0);\n\
              }\n\
              if (result0 === null) {\n\
                pos = pos0;\n\
              }\n\
              if (result0 === null) {\n\
                pos0 = pos;\n\
                if (input.charCodeAt(pos) === 62) {\n\
                  result0 = \">\";\n\
                  pos++;\n\
                } else {\n\
                  result0 = null;\n\
                  if (reportFailures === 0) {\n\
                    matchFailed(\"\\\">\\\"\");\n\
                  }\n\
                }\n\
                if (result0 !== null) {\n\
                  result0 = (function(offset) { return \"gt\"  })(pos0);\n\
                }\n\
                if (result0 === null) {\n\
                  pos = pos0;\n\
                }\n\
              }\n\
            }\n\
          }\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_AdditiveExpression() {\n\
        var result0, result1, result2, result3, result4, result5;\n\
        var pos0, pos1, pos2;\n\
        \n\
        pos0 = pos;\n\
        pos1 = pos;\n\
        result0 = parse_MultiplicativeExpression();\n\
        if (result0 !== null) {\n\
          result1 = [];\n\
          pos2 = pos;\n\
          result2 = parse___();\n\
          if (result2 !== null) {\n\
            result3 = parse_AdditiveOperator();\n\
            if (result3 !== null) {\n\
              result4 = parse___();\n\
              if (result4 !== null) {\n\
                result5 = parse_MultiplicativeExpression();\n\
                if (result5 !== null) {\n\
                  result2 = [result2, result3, result4, result5];\n\
                } else {\n\
                  result2 = null;\n\
                  pos = pos2;\n\
                }\n\
              } else {\n\
                result2 = null;\n\
                pos = pos2;\n\
              }\n\
            } else {\n\
              result2 = null;\n\
              pos = pos2;\n\
            }\n\
          } else {\n\
            result2 = null;\n\
            pos = pos2;\n\
          }\n\
          while (result2 !== null) {\n\
            result1.push(result2);\n\
            pos2 = pos;\n\
            result2 = parse___();\n\
            if (result2 !== null) {\n\
              result3 = parse_AdditiveOperator();\n\
              if (result3 !== null) {\n\
                result4 = parse___();\n\
                if (result4 !== null) {\n\
                  result5 = parse_MultiplicativeExpression();\n\
                  if (result5 !== null) {\n\
                    result2 = [result2, result3, result4, result5];\n\
                  } else {\n\
                    result2 = null;\n\
                    pos = pos2;\n\
                  }\n\
                } else {\n\
                  result2 = null;\n\
                  pos = pos2;\n\
                }\n\
              } else {\n\
                result2 = null;\n\
                pos = pos2;\n\
              }\n\
            } else {\n\
              result2 = null;\n\
              pos = pos2;\n\
            }\n\
          }\n\
          if (result1 !== null) {\n\
            result0 = [result0, result1];\n\
          } else {\n\
            result0 = null;\n\
            pos = pos1;\n\
          }\n\
        } else {\n\
          result0 = null;\n\
          pos = pos1;\n\
        }\n\
        if (result0 !== null) {\n\
          result0 = (function(offset, head, tail) {\n\
              var result = head;\n\
              for (var i = 0; i < tail.length; i++) {\n\
                result = [\n\
                  tail[i][1],\n\
                  result,\n\
                  tail[i][3]\n\
                ];\n\
              }\n\
              return result;\n\
            })(pos0, result0[0], result0[1]);\n\
        }\n\
        if (result0 === null) {\n\
          pos = pos0;\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_AdditiveOperator() {\n\
        var result0;\n\
        var pos0;\n\
        \n\
        pos0 = pos;\n\
        if (input.charCodeAt(pos) === 43) {\n\
          result0 = \"+\";\n\
          pos++;\n\
        } else {\n\
          result0 = null;\n\
          if (reportFailures === 0) {\n\
            matchFailed(\"\\\"+\\\"\");\n\
          }\n\
        }\n\
        if (result0 !== null) {\n\
          result0 = (function(offset) { return \"plus\" })(pos0);\n\
        }\n\
        if (result0 === null) {\n\
          pos = pos0;\n\
        }\n\
        if (result0 === null) {\n\
          pos0 = pos;\n\
          if (input.charCodeAt(pos) === 45) {\n\
            result0 = \"-\";\n\
            pos++;\n\
          } else {\n\
            result0 = null;\n\
            if (reportFailures === 0) {\n\
              matchFailed(\"\\\"-\\\"\");\n\
            }\n\
          }\n\
          if (result0 !== null) {\n\
            result0 = (function(offset) { return \"minus\" })(pos0);\n\
          }\n\
          if (result0 === null) {\n\
            pos = pos0;\n\
          }\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_MultiplicativeExpression() {\n\
        var result0, result1, result2, result3, result4, result5;\n\
        var pos0, pos1, pos2;\n\
        \n\
        pos0 = pos;\n\
        pos1 = pos;\n\
        result0 = parse_UnaryExpression();\n\
        if (result0 !== null) {\n\
          result1 = [];\n\
          pos2 = pos;\n\
          result2 = parse___();\n\
          if (result2 !== null) {\n\
            result3 = parse_MultiplicativeOperator();\n\
            if (result3 !== null) {\n\
              result4 = parse___();\n\
              if (result4 !== null) {\n\
                result5 = parse_UnaryExpression();\n\
                if (result5 !== null) {\n\
                  result2 = [result2, result3, result4, result5];\n\
                } else {\n\
                  result2 = null;\n\
                  pos = pos2;\n\
                }\n\
              } else {\n\
                result2 = null;\n\
                pos = pos2;\n\
              }\n\
            } else {\n\
              result2 = null;\n\
              pos = pos2;\n\
            }\n\
          } else {\n\
            result2 = null;\n\
            pos = pos2;\n\
          }\n\
          while (result2 !== null) {\n\
            result1.push(result2);\n\
            pos2 = pos;\n\
            result2 = parse___();\n\
            if (result2 !== null) {\n\
              result3 = parse_MultiplicativeOperator();\n\
              if (result3 !== null) {\n\
                result4 = parse___();\n\
                if (result4 !== null) {\n\
                  result5 = parse_UnaryExpression();\n\
                  if (result5 !== null) {\n\
                    result2 = [result2, result3, result4, result5];\n\
                  } else {\n\
                    result2 = null;\n\
                    pos = pos2;\n\
                  }\n\
                } else {\n\
                  result2 = null;\n\
                  pos = pos2;\n\
                }\n\
              } else {\n\
                result2 = null;\n\
                pos = pos2;\n\
              }\n\
            } else {\n\
              result2 = null;\n\
              pos = pos2;\n\
            }\n\
          }\n\
          if (result1 !== null) {\n\
            result0 = [result0, result1];\n\
          } else {\n\
            result0 = null;\n\
            pos = pos1;\n\
          }\n\
        } else {\n\
          result0 = null;\n\
          pos = pos1;\n\
        }\n\
        if (result0 !== null) {\n\
          result0 = (function(offset, head, tail) {\n\
              var result = head;\n\
              for (var i = 0; i < tail.length; i++) {\n\
                result = [\n\
                  tail[i][1],\n\
                  result,\n\
                  tail[i][3]\n\
                ];\n\
              }\n\
              return result;\n\
            })(pos0, result0[0], result0[1]);\n\
        }\n\
        if (result0 === null) {\n\
          pos = pos0;\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_MultiplicativeOperator() {\n\
        var result0;\n\
        var pos0;\n\
        \n\
        pos0 = pos;\n\
        if (input.charCodeAt(pos) === 42) {\n\
          result0 = \"*\";\n\
          pos++;\n\
        } else {\n\
          result0 = null;\n\
          if (reportFailures === 0) {\n\
            matchFailed(\"\\\"*\\\"\");\n\
          }\n\
        }\n\
        if (result0 !== null) {\n\
          result0 = (function(offset) {return \"multiply\"})(pos0);\n\
        }\n\
        if (result0 === null) {\n\
          pos = pos0;\n\
        }\n\
        if (result0 === null) {\n\
          pos0 = pos;\n\
          if (input.charCodeAt(pos) === 47) {\n\
            result0 = \"/\";\n\
            pos++;\n\
          } else {\n\
            result0 = null;\n\
            if (reportFailures === 0) {\n\
              matchFailed(\"\\\"/\\\"\");\n\
            }\n\
          }\n\
          if (result0 !== null) {\n\
            result0 = (function(offset) {return \"divide\"})(pos0);\n\
          }\n\
          if (result0 === null) {\n\
            pos = pos0;\n\
          }\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_UnaryExpression() {\n\
        var result0, result1, result2;\n\
        var pos0, pos1;\n\
        \n\
        result0 = parse_PrimaryExpression();\n\
        if (result0 === null) {\n\
          pos0 = pos;\n\
          pos1 = pos;\n\
          result0 = parse_UnaryOperator();\n\
          if (result0 !== null) {\n\
            result1 = parse___();\n\
            if (result1 !== null) {\n\
              result2 = parse_UnaryExpression();\n\
              if (result2 !== null) {\n\
                result0 = [result0, result1, result2];\n\
              } else {\n\
                result0 = null;\n\
                pos = pos1;\n\
              }\n\
            } else {\n\
              result0 = null;\n\
              pos = pos1;\n\
            }\n\
          } else {\n\
            result0 = null;\n\
            pos = pos1;\n\
          }\n\
          if (result0 !== null) {\n\
            result0 = (function(offset, operator, expression) {\n\
                return {\n\
                  type:       \"UnaryExpression\",\n\
                  operator:   operator,\n\
                  expression: expression\n\
                };\n\
              })(pos0, result0[0], result0[2]);\n\
          }\n\
          if (result0 === null) {\n\
            pos = pos0;\n\
          }\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_UnaryOperator() {\n\
        var result0;\n\
        \n\
        if (input.charCodeAt(pos) === 43) {\n\
          result0 = \"+\";\n\
          pos++;\n\
        } else {\n\
          result0 = null;\n\
          if (reportFailures === 0) {\n\
            matchFailed(\"\\\"+\\\"\");\n\
          }\n\
        }\n\
        if (result0 === null) {\n\
          if (input.charCodeAt(pos) === 45) {\n\
            result0 = \"-\";\n\
            pos++;\n\
          } else {\n\
            result0 = null;\n\
            if (reportFailures === 0) {\n\
              matchFailed(\"\\\"-\\\"\");\n\
            }\n\
          }\n\
          if (result0 === null) {\n\
            if (input.charCodeAt(pos) === 33) {\n\
              result0 = \"!\";\n\
              pos++;\n\
            } else {\n\
              result0 = null;\n\
              if (reportFailures === 0) {\n\
                matchFailed(\"\\\"!\\\"\");\n\
              }\n\
            }\n\
          }\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_PrimaryExpression() {\n\
        var result0, result1, result2, result3, result4;\n\
        var pos0, pos1;\n\
        \n\
        result0 = parse_Measure();\n\
        if (result0 === null) {\n\
          result0 = parse_Var();\n\
          if (result0 === null) {\n\
            result0 = parse_Literal();\n\
            if (result0 === null) {\n\
              pos0 = pos;\n\
              pos1 = pos;\n\
              if (input.charCodeAt(pos) === 40) {\n\
                result0 = \"(\";\n\
                pos++;\n\
              } else {\n\
                result0 = null;\n\
                if (reportFailures === 0) {\n\
                  matchFailed(\"\\\"(\\\"\");\n\
                }\n\
              }\n\
              if (result0 !== null) {\n\
                result1 = parse___();\n\
                if (result1 !== null) {\n\
                  result2 = parse_LinearExpression();\n\
                  if (result2 !== null) {\n\
                    result3 = parse___();\n\
                    if (result3 !== null) {\n\
                      if (input.charCodeAt(pos) === 41) {\n\
                        result4 = \")\";\n\
                        pos++;\n\
                      } else {\n\
                        result4 = null;\n\
                        if (reportFailures === 0) {\n\
                          matchFailed(\"\\\")\\\"\");\n\
                        }\n\
                      }\n\
                      if (result4 !== null) {\n\
                        result0 = [result0, result1, result2, result3, result4];\n\
                      } else {\n\
                        result0 = null;\n\
                        pos = pos1;\n\
                      }\n\
                    } else {\n\
                      result0 = null;\n\
                      pos = pos1;\n\
                    }\n\
                  } else {\n\
                    result0 = null;\n\
                    pos = pos1;\n\
                  }\n\
                } else {\n\
                  result0 = null;\n\
                  pos = pos1;\n\
                }\n\
              } else {\n\
                result0 = null;\n\
                pos = pos1;\n\
              }\n\
              if (result0 !== null) {\n\
                result0 = (function(offset, expression) { return expression; })(pos0, result0[2]);\n\
              }\n\
              if (result0 === null) {\n\
                pos = pos0;\n\
              }\n\
            }\n\
          }\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_Measure() {\n\
        var result0, result1, result2, result3, result4;\n\
        var pos0, pos1;\n\
        \n\
        reportFailures++;\n\
        pos0 = pos;\n\
        pos1 = pos;\n\
        if (input.substr(pos, 8) === \"measure(\") {\n\
          result0 = \"measure(\";\n\
          pos += 8;\n\
        } else {\n\
          result0 = null;\n\
          if (reportFailures === 0) {\n\
            matchFailed(\"\\\"measure(\\\"\");\n\
          }\n\
        }\n\
        if (result0 !== null) {\n\
          result1 = parse___();\n\
          if (result1 !== null) {\n\
            result2 = parse_Var();\n\
            if (result2 !== null) {\n\
              result3 = parse___();\n\
              if (result3 !== null) {\n\
                if (input.charCodeAt(pos) === 41) {\n\
                  result4 = \")\";\n\
                  pos++;\n\
                } else {\n\
                  result4 = null;\n\
                  if (reportFailures === 0) {\n\
                    matchFailed(\"\\\")\\\"\");\n\
                  }\n\
                }\n\
                if (result4 !== null) {\n\
                  result0 = [result0, result1, result2, result3, result4];\n\
                } else {\n\
                  result0 = null;\n\
                  pos = pos1;\n\
                }\n\
              } else {\n\
                result0 = null;\n\
                pos = pos1;\n\
              }\n\
            } else {\n\
              result0 = null;\n\
              pos = pos1;\n\
            }\n\
          } else {\n\
            result0 = null;\n\
            pos = pos1;\n\
          }\n\
        } else {\n\
          result0 = null;\n\
          pos = pos1;\n\
        }\n\
        if (result0 !== null) {\n\
          result0 = (function(offset, v) { return p.processMeasure([\"measure\",v]);})(pos0, result0[2]);\n\
        }\n\
        if (result0 === null) {\n\
          pos = pos0;\n\
        }\n\
        reportFailures--;\n\
        if (reportFailures === 0 && result0 === null) {\n\
          matchFailed(\"measure\");\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_Var() {\n\
        var result0, result1, result2, result3;\n\
        var pos0, pos1;\n\
        \n\
        reportFailures++;\n\
        pos0 = pos;\n\
        pos1 = pos;\n\
        result0 = parse_Selector();\n\
        result0 = result0 !== null ? result0 : \"\";\n\
        if (result0 !== null) {\n\
          if (input.charCodeAt(pos) === 91) {\n\
            result1 = \"[\";\n\
            pos++;\n\
          } else {\n\
            result1 = null;\n\
            if (reportFailures === 0) {\n\
              matchFailed(\"\\\"[\\\"\");\n\
            }\n\
          }\n\
          if (result1 !== null) {\n\
            result3 = parse_NameChars();\n\
            if (result3 !== null) {\n\
              result2 = [];\n\
              while (result3 !== null) {\n\
                result2.push(result3);\n\
                result3 = parse_NameChars();\n\
              }\n\
            } else {\n\
              result2 = null;\n\
            }\n\
            if (result2 !== null) {\n\
              if (input.charCodeAt(pos) === 93) {\n\
                result3 = \"]\";\n\
                pos++;\n\
              } else {\n\
                result3 = null;\n\
                if (reportFailures === 0) {\n\
                  matchFailed(\"\\\"]\\\"\");\n\
                }\n\
              }\n\
              if (result3 !== null) {\n\
                result0 = [result0, result1, result2, result3];\n\
              } else {\n\
                result0 = null;\n\
                pos = pos1;\n\
              }\n\
            } else {\n\
              result0 = null;\n\
              pos = pos1;\n\
            }\n\
          } else {\n\
            result0 = null;\n\
            pos = pos1;\n\
          }\n\
        } else {\n\
          result0 = null;\n\
          pos = pos1;\n\
        }\n\
        if (result0 !== null) {\n\
          result0 = (function(offset, sel, v) {       \n\
              var result, id, _id1, _id2;\n\
              v = v.join(\"\");      \n\
              // if bound to dom query\n\
              if (sel.length !== 0) {\n\
                parser.add$(sel.selector);\n\
                // normalize var names when query bound\n\
                if (v === 'left') {\n\
                  v = 'x';\n\
                } else if (v === 'top') {\n\
                  v = 'y';\n\
                } else if (v === 'cx') {\n\
                  v = 'center-x';\n\
                } else if (v === 'cy') {\n\
                  v = 'center-y';\n\
                }\n\
                // normalize window var names\n\
                if (sel.selector === '::window') {\n\
                  if (v === 'right') {\n\
                    v = 'width'\n\
                  } else if (v === 'bottom') {\n\
                    v = 'height'\n\
                  }\n\
                }              \n\
              }\n\
              \n\
              if (sel.selector || sel.isVirtual) {\n\
                return ['get$',v,sel.ast];\n\
              } else {\n\
                return ['get',\"[\"+v+\"]\"];\n\
              }\n\
              \n\
            })(pos0, result0[0], result0[2]);\n\
        }\n\
        if (result0 === null) {\n\
          pos = pos0;\n\
        }\n\
        reportFailures--;\n\
        if (reportFailures === 0 && result0 === null) {\n\
          matchFailed(\"variable\");\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_VarNames() {\n\
        var result0;\n\
        \n\
        result0 = \"\";\n\
        return result0;\n\
      }\n\
      \n\
      function parse_NameChars() {\n\
        var result0;\n\
        \n\
        if (/^[a-zA-Z0-9#.\\-_$]/.test(input.charAt(pos))) {\n\
          result0 = input.charAt(pos);\n\
          pos++;\n\
        } else {\n\
          result0 = null;\n\
          if (reportFailures === 0) {\n\
            matchFailed(\"[a-zA-Z0-9#.\\\\-_$]\");\n\
          }\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_NameCharsWithSpace() {\n\
        var result0;\n\
        \n\
        result0 = parse_NameChars();\n\
        if (result0 === null) {\n\
          if (input.charCodeAt(pos) === 32) {\n\
            result0 = \" \";\n\
            pos++;\n\
          } else {\n\
            result0 = null;\n\
            if (reportFailures === 0) {\n\
              matchFailed(\"\\\" \\\"\");\n\
            }\n\
          }\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_Literal() {\n\
        var result0;\n\
        var pos0;\n\
        \n\
        pos0 = pos;\n\
        result0 = parse_Real();\n\
        if (result0 === null) {\n\
          result0 = parse_Integer();\n\
        }\n\
        if (result0 !== null) {\n\
          result0 = (function(offset, val) {\n\
            return [ \"number\",\n\
              val\n\
            ]\n\
          })(pos0, result0);\n\
        }\n\
        if (result0 === null) {\n\
          pos = pos0;\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_Integer() {\n\
        var result0, result1;\n\
        var pos0;\n\
        \n\
        pos0 = pos;\n\
        if (/^[0-9]/.test(input.charAt(pos))) {\n\
          result1 = input.charAt(pos);\n\
          pos++;\n\
        } else {\n\
          result1 = null;\n\
          if (reportFailures === 0) {\n\
            matchFailed(\"[0-9]\");\n\
          }\n\
        }\n\
        if (result1 !== null) {\n\
          result0 = [];\n\
          while (result1 !== null) {\n\
            result0.push(result1);\n\
            if (/^[0-9]/.test(input.charAt(pos))) {\n\
              result1 = input.charAt(pos);\n\
              pos++;\n\
            } else {\n\
              result1 = null;\n\
              if (reportFailures === 0) {\n\
                matchFailed(\"[0-9]\");\n\
              }\n\
            }\n\
          }\n\
        } else {\n\
          result0 = null;\n\
        }\n\
        if (result0 !== null) {\n\
          result0 = (function(offset, digits) {\n\
            return parseInt(digits.join(\"\"));\n\
          })(pos0, result0);\n\
        }\n\
        if (result0 === null) {\n\
          pos = pos0;\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_Real() {\n\
        var result0, result1, result2;\n\
        var pos0, pos1;\n\
        \n\
        pos0 = pos;\n\
        pos1 = pos;\n\
        result0 = parse_Integer();\n\
        if (result0 !== null) {\n\
          if (input.charCodeAt(pos) === 46) {\n\
            result1 = \".\";\n\
            pos++;\n\
          } else {\n\
            result1 = null;\n\
            if (reportFailures === 0) {\n\
              matchFailed(\"\\\".\\\"\");\n\
            }\n\
          }\n\
          if (result1 !== null) {\n\
            result2 = parse_Integer();\n\
            if (result2 !== null) {\n\
              result0 = [result0, result1, result2];\n\
            } else {\n\
              result0 = null;\n\
              pos = pos1;\n\
            }\n\
          } else {\n\
            result0 = null;\n\
            pos = pos1;\n\
          }\n\
        } else {\n\
          result0 = null;\n\
          pos = pos1;\n\
        }\n\
        if (result0 !== null) {\n\
          result0 = (function(offset, digits) {\n\
            return parseFloat(digits.join(\"\"));\n\
          })(pos0, result0);\n\
        }\n\
        if (result0 === null) {\n\
          pos = pos0;\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_SignedInteger() {\n\
        var result0, result1, result2;\n\
        var pos0;\n\
        \n\
        pos0 = pos;\n\
        if (/^[\\-+]/.test(input.charAt(pos))) {\n\
          result0 = input.charAt(pos);\n\
          pos++;\n\
        } else {\n\
          result0 = null;\n\
          if (reportFailures === 0) {\n\
            matchFailed(\"[\\\\-+]\");\n\
          }\n\
        }\n\
        result0 = result0 !== null ? result0 : \"\";\n\
        if (result0 !== null) {\n\
          if (/^[0-9]/.test(input.charAt(pos))) {\n\
            result2 = input.charAt(pos);\n\
            pos++;\n\
          } else {\n\
            result2 = null;\n\
            if (reportFailures === 0) {\n\
              matchFailed(\"[0-9]\");\n\
            }\n\
          }\n\
          if (result2 !== null) {\n\
            result1 = [];\n\
            while (result2 !== null) {\n\
              result1.push(result2);\n\
              if (/^[0-9]/.test(input.charAt(pos))) {\n\
                result2 = input.charAt(pos);\n\
                pos++;\n\
              } else {\n\
                result2 = null;\n\
                if (reportFailures === 0) {\n\
                  matchFailed(\"[0-9]\");\n\
                }\n\
              }\n\
            }\n\
          } else {\n\
            result1 = null;\n\
          }\n\
          if (result1 !== null) {\n\
            result0 = [result0, result1];\n\
          } else {\n\
            result0 = null;\n\
            pos = pos0;\n\
          }\n\
        } else {\n\
          result0 = null;\n\
          pos = pos0;\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_SourceCharacter() {\n\
        var result0;\n\
        \n\
        if (input.length > pos) {\n\
          result0 = input.charAt(pos);\n\
          pos++;\n\
        } else {\n\
          result0 = null;\n\
          if (reportFailures === 0) {\n\
            matchFailed(\"any character\");\n\
          }\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_WhiteSpace() {\n\
        var result0;\n\
        \n\
        reportFailures++;\n\
        if (/^[\\t\\x0B\\f \\xA0\\uFEFF]/.test(input.charAt(pos))) {\n\
          result0 = input.charAt(pos);\n\
          pos++;\n\
        } else {\n\
          result0 = null;\n\
          if (reportFailures === 0) {\n\
            matchFailed(\"[\\\\t\\\\x0B\\\\f \\\\xA0\\\\uFEFF]\");\n\
          }\n\
        }\n\
        reportFailures--;\n\
        if (reportFailures === 0 && result0 === null) {\n\
          matchFailed(\"whitespace\");\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_LineTerminator() {\n\
        var result0;\n\
        \n\
        if (/^[\\n\
\\r\\u2028\\u2029]/.test(input.charAt(pos))) {\n\
          result0 = input.charAt(pos);\n\
          pos++;\n\
        } else {\n\
          result0 = null;\n\
          if (reportFailures === 0) {\n\
            matchFailed(\"[\\\\n\
\\\\r\\\\u2028\\\\u2029]\");\n\
          }\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_LineTerminatorSequence() {\n\
        var result0;\n\
        \n\
        reportFailures++;\n\
        if (input.charCodeAt(pos) === 10) {\n\
          result0 = \"\\n\
\";\n\
          pos++;\n\
        } else {\n\
          result0 = null;\n\
          if (reportFailures === 0) {\n\
            matchFailed(\"\\\"\\\\n\
\\\"\");\n\
          }\n\
        }\n\
        if (result0 === null) {\n\
          if (input.substr(pos, 2) === \"\\r\\n\
\") {\n\
            result0 = \"\\r\\n\
\";\n\
            pos += 2;\n\
          } else {\n\
            result0 = null;\n\
            if (reportFailures === 0) {\n\
              matchFailed(\"\\\"\\\\r\\\\n\
\\\"\");\n\
            }\n\
          }\n\
          if (result0 === null) {\n\
            if (input.charCodeAt(pos) === 13) {\n\
              result0 = \"\\r\";\n\
              pos++;\n\
            } else {\n\
              result0 = null;\n\
              if (reportFailures === 0) {\n\
                matchFailed(\"\\\"\\\\r\\\"\");\n\
              }\n\
            }\n\
            if (result0 === null) {\n\
              if (input.charCodeAt(pos) === 8232) {\n\
                result0 = \"\\u2028\";\n\
                pos++;\n\
              } else {\n\
                result0 = null;\n\
                if (reportFailures === 0) {\n\
                  matchFailed(\"\\\"\\\\u2028\\\"\");\n\
                }\n\
              }\n\
              if (result0 === null) {\n\
                if (input.charCodeAt(pos) === 8233) {\n\
                  result0 = \"\\u2029\";\n\
                  pos++;\n\
                } else {\n\
                  result0 = null;\n\
                  if (reportFailures === 0) {\n\
                    matchFailed(\"\\\"\\\\u2029\\\"\");\n\
                  }\n\
                }\n\
              }\n\
            }\n\
          }\n\
        }\n\
        reportFailures--;\n\
        if (reportFailures === 0 && result0 === null) {\n\
          matchFailed(\"end of line\");\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_EOS() {\n\
        var result0, result1;\n\
        var pos0;\n\
        \n\
        pos0 = pos;\n\
        result0 = parse___();\n\
        if (result0 !== null) {\n\
          if (input.charCodeAt(pos) === 59) {\n\
            result1 = \";\";\n\
            pos++;\n\
          } else {\n\
            result1 = null;\n\
            if (reportFailures === 0) {\n\
              matchFailed(\"\\\";\\\"\");\n\
            }\n\
          }\n\
          if (result1 !== null) {\n\
            result0 = [result0, result1];\n\
          } else {\n\
            result0 = null;\n\
            pos = pos0;\n\
          }\n\
        } else {\n\
          result0 = null;\n\
          pos = pos0;\n\
        }\n\
        if (result0 === null) {\n\
          pos0 = pos;\n\
          result0 = parse__();\n\
          if (result0 !== null) {\n\
            result1 = parse_LineTerminatorSequence();\n\
            if (result1 !== null) {\n\
              result0 = [result0, result1];\n\
            } else {\n\
              result0 = null;\n\
              pos = pos0;\n\
            }\n\
          } else {\n\
            result0 = null;\n\
            pos = pos0;\n\
          }\n\
          if (result0 === null) {\n\
            pos0 = pos;\n\
            result0 = parse___();\n\
            if (result0 !== null) {\n\
              result1 = parse_EOF();\n\
              if (result1 !== null) {\n\
                result0 = [result0, result1];\n\
              } else {\n\
                result0 = null;\n\
                pos = pos0;\n\
              }\n\
            } else {\n\
              result0 = null;\n\
              pos = pos0;\n\
            }\n\
          }\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_EOF() {\n\
        var result0;\n\
        var pos0;\n\
        \n\
        pos0 = pos;\n\
        reportFailures++;\n\
        if (input.length > pos) {\n\
          result0 = input.charAt(pos);\n\
          pos++;\n\
        } else {\n\
          result0 = null;\n\
          if (reportFailures === 0) {\n\
            matchFailed(\"any character\");\n\
          }\n\
        }\n\
        reportFailures--;\n\
        if (result0 === null) {\n\
          result0 = \"\";\n\
        } else {\n\
          result0 = null;\n\
          pos = pos0;\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_Comment() {\n\
        var result0;\n\
        \n\
        reportFailures++;\n\
        result0 = parse_MultiLineComment();\n\
        if (result0 === null) {\n\
          result0 = parse_SingleLineComment();\n\
        }\n\
        reportFailures--;\n\
        if (reportFailures === 0 && result0 === null) {\n\
          matchFailed(\"comment\");\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_MultiLineComment() {\n\
        var result0, result1, result2, result3;\n\
        var pos0, pos1, pos2;\n\
        \n\
        pos0 = pos;\n\
        if (input.substr(pos, 2) === \"/*\") {\n\
          result0 = \"/*\";\n\
          pos += 2;\n\
        } else {\n\
          result0 = null;\n\
          if (reportFailures === 0) {\n\
            matchFailed(\"\\\"/*\\\"\");\n\
          }\n\
        }\n\
        if (result0 !== null) {\n\
          result1 = [];\n\
          pos1 = pos;\n\
          pos2 = pos;\n\
          reportFailures++;\n\
          if (input.substr(pos, 2) === \"*/\") {\n\
            result2 = \"*/\";\n\
            pos += 2;\n\
          } else {\n\
            result2 = null;\n\
            if (reportFailures === 0) {\n\
              matchFailed(\"\\\"*/\\\"\");\n\
            }\n\
          }\n\
          reportFailures--;\n\
          if (result2 === null) {\n\
            result2 = \"\";\n\
          } else {\n\
            result2 = null;\n\
            pos = pos2;\n\
          }\n\
          if (result2 !== null) {\n\
            result3 = parse_SourceCharacter();\n\
            if (result3 !== null) {\n\
              result2 = [result2, result3];\n\
            } else {\n\
              result2 = null;\n\
              pos = pos1;\n\
            }\n\
          } else {\n\
            result2 = null;\n\
            pos = pos1;\n\
          }\n\
          while (result2 !== null) {\n\
            result1.push(result2);\n\
            pos1 = pos;\n\
            pos2 = pos;\n\
            reportFailures++;\n\
            if (input.substr(pos, 2) === \"*/\") {\n\
              result2 = \"*/\";\n\
              pos += 2;\n\
            } else {\n\
              result2 = null;\n\
              if (reportFailures === 0) {\n\
                matchFailed(\"\\\"*/\\\"\");\n\
              }\n\
            }\n\
            reportFailures--;\n\
            if (result2 === null) {\n\
              result2 = \"\";\n\
            } else {\n\
              result2 = null;\n\
              pos = pos2;\n\
            }\n\
            if (result2 !== null) {\n\
              result3 = parse_SourceCharacter();\n\
              if (result3 !== null) {\n\
                result2 = [result2, result3];\n\
              } else {\n\
                result2 = null;\n\
                pos = pos1;\n\
              }\n\
            } else {\n\
              result2 = null;\n\
              pos = pos1;\n\
            }\n\
          }\n\
          if (result1 !== null) {\n\
            if (input.substr(pos, 2) === \"*/\") {\n\
              result2 = \"*/\";\n\
              pos += 2;\n\
            } else {\n\
              result2 = null;\n\
              if (reportFailures === 0) {\n\
                matchFailed(\"\\\"*/\\\"\");\n\
              }\n\
            }\n\
            if (result2 !== null) {\n\
              result0 = [result0, result1, result2];\n\
            } else {\n\
              result0 = null;\n\
              pos = pos0;\n\
            }\n\
          } else {\n\
            result0 = null;\n\
            pos = pos0;\n\
          }\n\
        } else {\n\
          result0 = null;\n\
          pos = pos0;\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_MultiLineCommentNoLineTerminator() {\n\
        var result0, result1, result2, result3;\n\
        var pos0, pos1, pos2;\n\
        \n\
        pos0 = pos;\n\
        if (input.substr(pos, 2) === \"/*\") {\n\
          result0 = \"/*\";\n\
          pos += 2;\n\
        } else {\n\
          result0 = null;\n\
          if (reportFailures === 0) {\n\
            matchFailed(\"\\\"/*\\\"\");\n\
          }\n\
        }\n\
        if (result0 !== null) {\n\
          result1 = [];\n\
          pos1 = pos;\n\
          pos2 = pos;\n\
          reportFailures++;\n\
          if (input.substr(pos, 2) === \"*/\") {\n\
            result2 = \"*/\";\n\
            pos += 2;\n\
          } else {\n\
            result2 = null;\n\
            if (reportFailures === 0) {\n\
              matchFailed(\"\\\"*/\\\"\");\n\
            }\n\
          }\n\
          if (result2 === null) {\n\
            result2 = parse_LineTerminator();\n\
          }\n\
          reportFailures--;\n\
          if (result2 === null) {\n\
            result2 = \"\";\n\
          } else {\n\
            result2 = null;\n\
            pos = pos2;\n\
          }\n\
          if (result2 !== null) {\n\
            result3 = parse_SourceCharacter();\n\
            if (result3 !== null) {\n\
              result2 = [result2, result3];\n\
            } else {\n\
              result2 = null;\n\
              pos = pos1;\n\
            }\n\
          } else {\n\
            result2 = null;\n\
            pos = pos1;\n\
          }\n\
          while (result2 !== null) {\n\
            result1.push(result2);\n\
            pos1 = pos;\n\
            pos2 = pos;\n\
            reportFailures++;\n\
            if (input.substr(pos, 2) === \"*/\") {\n\
              result2 = \"*/\";\n\
              pos += 2;\n\
            } else {\n\
              result2 = null;\n\
              if (reportFailures === 0) {\n\
                matchFailed(\"\\\"*/\\\"\");\n\
              }\n\
            }\n\
            if (result2 === null) {\n\
              result2 = parse_LineTerminator();\n\
            }\n\
            reportFailures--;\n\
            if (result2 === null) {\n\
              result2 = \"\";\n\
            } else {\n\
              result2 = null;\n\
              pos = pos2;\n\
            }\n\
            if (result2 !== null) {\n\
              result3 = parse_SourceCharacter();\n\
              if (result3 !== null) {\n\
                result2 = [result2, result3];\n\
              } else {\n\
                result2 = null;\n\
                pos = pos1;\n\
              }\n\
            } else {\n\
              result2 = null;\n\
              pos = pos1;\n\
            }\n\
          }\n\
          if (result1 !== null) {\n\
            if (input.substr(pos, 2) === \"*/\") {\n\
              result2 = \"*/\";\n\
              pos += 2;\n\
            } else {\n\
              result2 = null;\n\
              if (reportFailures === 0) {\n\
                matchFailed(\"\\\"*/\\\"\");\n\
              }\n\
            }\n\
            if (result2 !== null) {\n\
              result0 = [result0, result1, result2];\n\
            } else {\n\
              result0 = null;\n\
              pos = pos0;\n\
            }\n\
          } else {\n\
            result0 = null;\n\
            pos = pos0;\n\
          }\n\
        } else {\n\
          result0 = null;\n\
          pos = pos0;\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_SingleLineComment() {\n\
        var result0, result1, result2, result3;\n\
        var pos0, pos1, pos2;\n\
        \n\
        pos0 = pos;\n\
        if (input.substr(pos, 2) === \"//\") {\n\
          result0 = \"//\";\n\
          pos += 2;\n\
        } else {\n\
          result0 = null;\n\
          if (reportFailures === 0) {\n\
            matchFailed(\"\\\"//\\\"\");\n\
          }\n\
        }\n\
        if (result0 !== null) {\n\
          result1 = [];\n\
          pos1 = pos;\n\
          pos2 = pos;\n\
          reportFailures++;\n\
          result2 = parse_LineTerminator();\n\
          reportFailures--;\n\
          if (result2 === null) {\n\
            result2 = \"\";\n\
          } else {\n\
            result2 = null;\n\
            pos = pos2;\n\
          }\n\
          if (result2 !== null) {\n\
            result3 = parse_SourceCharacter();\n\
            if (result3 !== null) {\n\
              result2 = [result2, result3];\n\
            } else {\n\
              result2 = null;\n\
              pos = pos1;\n\
            }\n\
          } else {\n\
            result2 = null;\n\
            pos = pos1;\n\
          }\n\
          while (result2 !== null) {\n\
            result1.push(result2);\n\
            pos1 = pos;\n\
            pos2 = pos;\n\
            reportFailures++;\n\
            result2 = parse_LineTerminator();\n\
            reportFailures--;\n\
            if (result2 === null) {\n\
              result2 = \"\";\n\
            } else {\n\
              result2 = null;\n\
              pos = pos2;\n\
            }\n\
            if (result2 !== null) {\n\
              result3 = parse_SourceCharacter();\n\
              if (result3 !== null) {\n\
                result2 = [result2, result3];\n\
              } else {\n\
                result2 = null;\n\
                pos = pos1;\n\
              }\n\
            } else {\n\
              result2 = null;\n\
              pos = pos1;\n\
            }\n\
          }\n\
          if (result1 !== null) {\n\
            result2 = parse_LineTerminator();\n\
            if (result2 === null) {\n\
              result2 = parse_EOF();\n\
            }\n\
            if (result2 !== null) {\n\
              result0 = [result0, result1, result2];\n\
            } else {\n\
              result0 = null;\n\
              pos = pos0;\n\
            }\n\
          } else {\n\
            result0 = null;\n\
            pos = pos0;\n\
          }\n\
        } else {\n\
          result0 = null;\n\
          pos = pos0;\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse__() {\n\
        var result0, result1;\n\
        \n\
        result0 = [];\n\
        result1 = parse_WhiteSpace();\n\
        if (result1 === null) {\n\
          result1 = parse_MultiLineCommentNoLineTerminator();\n\
          if (result1 === null) {\n\
            result1 = parse_SingleLineComment();\n\
          }\n\
        }\n\
        while (result1 !== null) {\n\
          result0.push(result1);\n\
          result1 = parse_WhiteSpace();\n\
          if (result1 === null) {\n\
            result1 = parse_MultiLineCommentNoLineTerminator();\n\
            if (result1 === null) {\n\
              result1 = parse_SingleLineComment();\n\
            }\n\
          }\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse___() {\n\
        var result0, result1;\n\
        \n\
        result0 = [];\n\
        result1 = parse_WhiteSpace();\n\
        if (result1 === null) {\n\
          result1 = parse_LineTerminatorSequence();\n\
          if (result1 === null) {\n\
            result1 = parse_Comment();\n\
          }\n\
        }\n\
        while (result1 !== null) {\n\
          result0.push(result1);\n\
          result1 = parse_WhiteSpace();\n\
          if (result1 === null) {\n\
            result1 = parse_LineTerminatorSequence();\n\
            if (result1 === null) {\n\
              result1 = parse_Comment();\n\
            }\n\
          }\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_Selector() {\n\
        var result0, result1, result2, result3;\n\
        var pos0, pos1;\n\
        \n\
        reportFailures++;\n\
        pos0 = pos;\n\
        pos1 = pos;\n\
        if (input.charCodeAt(pos) === 35) {\n\
          result0 = \"#\";\n\
          pos++;\n\
        } else {\n\
          result0 = null;\n\
          if (reportFailures === 0) {\n\
            matchFailed(\"\\\"#\\\"\");\n\
          }\n\
        }\n\
        if (result0 !== null) {\n\
          result2 = parse_NameChars();\n\
          if (result2 !== null) {\n\
            result1 = [];\n\
            while (result2 !== null) {\n\
              result1.push(result2);\n\
              result2 = parse_NameChars();\n\
            }\n\
          } else {\n\
            result1 = null;\n\
          }\n\
          if (result1 !== null) {\n\
            result0 = [result0, result1];\n\
          } else {\n\
            result0 = null;\n\
            pos = pos1;\n\
          }\n\
        } else {\n\
          result0 = null;\n\
          pos = pos1;\n\
        }\n\
        if (result0 !== null) {\n\
          result0 = (function(offset, sel) { \n\
            sel=p.toString(sel); return {selector:\"#\"+sel,ast:[\"$id\",sel]} \n\
          })(pos0, result0[1]);\n\
        }\n\
        if (result0 === null) {\n\
          pos = pos0;\n\
        }\n\
        if (result0 === null) {\n\
          pos0 = pos;\n\
          pos1 = pos;\n\
          if (input.substr(pos, 2) === \"::\") {\n\
            result0 = \"::\";\n\
            pos += 2;\n\
          } else {\n\
            result0 = null;\n\
            if (reportFailures === 0) {\n\
              matchFailed(\"\\\"::\\\"\");\n\
            }\n\
          }\n\
          if (result0 !== null) {\n\
            result1 = parse_ReservedPseudos();\n\
            if (result1 !== null) {\n\
              result0 = [result0, result1];\n\
            } else {\n\
              result0 = null;\n\
              pos = pos1;\n\
            }\n\
          } else {\n\
            result0 = null;\n\
            pos = pos1;\n\
          }\n\
          if (result0 !== null) {\n\
            result0 = (function(offset, sel) {\n\
              return {selector:\"::\"+sel,ast:[\"$reserved\", sel]}\n\
            })(pos0, result0[1]);\n\
          }\n\
          if (result0 === null) {\n\
            pos = pos0;\n\
          }\n\
          if (result0 === null) {\n\
            pos0 = pos;\n\
            pos1 = pos;\n\
            if (input.charCodeAt(pos) === 34) {\n\
              result0 = \"\\\"\";\n\
              pos++;\n\
            } else {\n\
              result0 = null;\n\
              if (reportFailures === 0) {\n\
                matchFailed(\"\\\"\\\\\\\"\\\"\");\n\
              }\n\
            }\n\
            if (result0 !== null) {\n\
              if (/^[a-zA-Z0-9.\\-_$=:+><~ ]/.test(input.charAt(pos))) {\n\
                result2 = input.charAt(pos);\n\
                pos++;\n\
              } else {\n\
                result2 = null;\n\
                if (reportFailures === 0) {\n\
                  matchFailed(\"[a-zA-Z0-9.\\\\-_$=:+><~ ]\");\n\
                }\n\
              }\n\
              if (result2 !== null) {\n\
                result1 = [];\n\
                while (result2 !== null) {\n\
                  result1.push(result2);\n\
                  if (/^[a-zA-Z0-9.\\-_$=:+><~ ]/.test(input.charAt(pos))) {\n\
                    result2 = input.charAt(pos);\n\
                    pos++;\n\
                  } else {\n\
                    result2 = null;\n\
                    if (reportFailures === 0) {\n\
                      matchFailed(\"[a-zA-Z0-9.\\\\-_$=:+><~ ]\");\n\
                    }\n\
                  }\n\
                }\n\
              } else {\n\
                result1 = null;\n\
              }\n\
              if (result1 !== null) {\n\
                if (input.charCodeAt(pos) === 34) {\n\
                  result2 = \"\\\"\";\n\
                  pos++;\n\
                } else {\n\
                  result2 = null;\n\
                  if (reportFailures === 0) {\n\
                    matchFailed(\"\\\"\\\\\\\"\\\"\");\n\
                  }\n\
                }\n\
                if (result2 !== null) {\n\
                  result0 = [result0, result1, result2];\n\
                } else {\n\
                  result0 = null;\n\
                  pos = pos1;\n\
                }\n\
              } else {\n\
                result0 = null;\n\
                pos = pos1;\n\
              }\n\
            } else {\n\
              result0 = null;\n\
              pos = pos1;\n\
            }\n\
            if (result0 !== null) {\n\
              result0 = (function(offset, name) {\n\
                name=p.toString(name); \n\
                return {isVirtual:true, ast:[\"$virtual\", name]} \n\
              })(pos0, result0[1]);\n\
            }\n\
            if (result0 === null) {\n\
              pos = pos0;\n\
            }\n\
            if (result0 === null) {\n\
              pos0 = pos;\n\
              pos1 = pos;\n\
              if (input.charCodeAt(pos) === 46) {\n\
                result0 = \".\";\n\
                pos++;\n\
              } else {\n\
                result0 = null;\n\
                if (reportFailures === 0) {\n\
                  matchFailed(\"\\\".\\\"\");\n\
                }\n\
              }\n\
              if (result0 !== null) {\n\
                result2 = parse_NameChars();\n\
                if (result2 !== null) {\n\
                  result1 = [];\n\
                  while (result2 !== null) {\n\
                    result1.push(result2);\n\
                    result2 = parse_NameChars();\n\
                  }\n\
                } else {\n\
                  result1 = null;\n\
                }\n\
                if (result1 !== null) {\n\
                  result0 = [result0, result1];\n\
                } else {\n\
                  result0 = null;\n\
                  pos = pos1;\n\
                }\n\
              } else {\n\
                result0 = null;\n\
                pos = pos1;\n\
              }\n\
              if (result0 !== null) {\n\
                result0 = (function(offset, sel) { \n\
                  sel=p.toString(sel); \n\
                  return {selector:\".\"+sel,ast:[\"$class\",sel]};\n\
                })(pos0, result0[1]);\n\
              }\n\
              if (result0 === null) {\n\
                pos = pos0;\n\
              }\n\
              if (result0 === null) {\n\
                pos0 = pos;\n\
                result1 = parse_NameChars();\n\
                if (result1 !== null) {\n\
                  result0 = [];\n\
                  while (result1 !== null) {\n\
                    result0.push(result1);\n\
                    result1 = parse_NameChars();\n\
                  }\n\
                } else {\n\
                  result0 = null;\n\
                }\n\
                if (result0 !== null) {\n\
                  result0 = (function(offset, sel) { \n\
                    sel=p.toString(sel); \n\
                    return {selector:sel,ast:[\"$tag\",sel]} \n\
                  })(pos0, result0);\n\
                }\n\
                if (result0 === null) {\n\
                  pos = pos0;\n\
                }\n\
                if (result0 === null) {\n\
                  pos0 = pos;\n\
                  pos1 = pos;\n\
                  if (input.charCodeAt(pos) === 36) {\n\
                    result0 = \"$\";\n\
                    pos++;\n\
                  } else {\n\
                    result0 = null;\n\
                    if (reportFailures === 0) {\n\
                      matchFailed(\"\\\"$\\\"\");\n\
                    }\n\
                  }\n\
                  result0 = result0 !== null ? result0 : \"\";\n\
                  if (result0 !== null) {\n\
                    if (input.charCodeAt(pos) === 40) {\n\
                      result1 = \"(\";\n\
                      pos++;\n\
                    } else {\n\
                      result1 = null;\n\
                      if (reportFailures === 0) {\n\
                        matchFailed(\"\\\"(\\\"\");\n\
                      }\n\
                    }\n\
                    if (result1 !== null) {\n\
                      result3 = parse_QuerySelectorChars();\n\
                      if (result3 !== null) {\n\
                        result2 = [];\n\
                        while (result3 !== null) {\n\
                          result2.push(result3);\n\
                          result3 = parse_QuerySelectorChars();\n\
                        }\n\
                      } else {\n\
                        result2 = null;\n\
                      }\n\
                      if (result2 !== null) {\n\
                        if (input.charCodeAt(pos) === 41) {\n\
                          result3 = \")\";\n\
                          pos++;\n\
                        } else {\n\
                          result3 = null;\n\
                          if (reportFailures === 0) {\n\
                            matchFailed(\"\\\")\\\"\");\n\
                          }\n\
                        }\n\
                        if (result3 !== null) {\n\
                          result0 = [result0, result1, result2, result3];\n\
                        } else {\n\
                          result0 = null;\n\
                          pos = pos1;\n\
                        }\n\
                      } else {\n\
                        result0 = null;\n\
                        pos = pos1;\n\
                      }\n\
                    } else {\n\
                      result0 = null;\n\
                      pos = pos1;\n\
                    }\n\
                  } else {\n\
                    result0 = null;\n\
                    pos = pos1;\n\
                  }\n\
                  if (result0 !== null) {\n\
                    result0 = (function(offset, sel) { \n\
                      sel=p.toString(sel); return {selector:sel,ast:[\"$all\",sel]} \n\
                    })(pos0, result0[2]);\n\
                  }\n\
                  if (result0 === null) {\n\
                    pos = pos0;\n\
                  }\n\
                }\n\
              }\n\
            }\n\
          }\n\
        }\n\
        reportFailures--;\n\
        if (reportFailures === 0 && result0 === null) {\n\
          matchFailed(\"selector\");\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_QuerySelectorChars() {\n\
        var result0;\n\
        \n\
        if (/^[a-zA-Z0-9#.\\-_$=:+>'\" \\][]/.test(input.charAt(pos))) {\n\
          result0 = input.charAt(pos);\n\
          pos++;\n\
        } else {\n\
          result0 = null;\n\
          if (reportFailures === 0) {\n\
            matchFailed(\"[a-zA-Z0-9#.\\\\-_$=:+>'\\\" \\\\][]\");\n\
          }\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_ReservedPseudos() {\n\
        var result0;\n\
        var pos0;\n\
        \n\
        if (input.substr(pos, 8) === \"document\") {\n\
          result0 = \"document\";\n\
          pos += 8;\n\
        } else {\n\
          result0 = null;\n\
          if (reportFailures === 0) {\n\
            matchFailed(\"\\\"document\\\"\");\n\
          }\n\
        }\n\
        if (result0 === null) {\n\
          if (input.substr(pos, 4) === \"host\") {\n\
            result0 = \"host\";\n\
            pos += 4;\n\
          } else {\n\
            result0 = null;\n\
            if (reportFailures === 0) {\n\
              matchFailed(\"\\\"host\\\"\");\n\
            }\n\
          }\n\
          if (result0 === null) {\n\
            if (input.substr(pos, 5) === \"scope\") {\n\
              result0 = \"scope\";\n\
              pos += 5;\n\
            } else {\n\
              result0 = null;\n\
              if (reportFailures === 0) {\n\
                matchFailed(\"\\\"scope\\\"\");\n\
              }\n\
            }\n\
            if (result0 === null) {\n\
              if (input.substr(pos, 6) === \"parent\") {\n\
                result0 = \"parent\";\n\
                pos += 6;\n\
              } else {\n\
                result0 = null;\n\
                if (reportFailures === 0) {\n\
                  matchFailed(\"\\\"parent\\\"\");\n\
                }\n\
              }\n\
            }\n\
          }\n\
        }\n\
        if (result0 === null) {\n\
          pos0 = pos;\n\
          if (input.substr(pos, 6) === \"window\") {\n\
            result0 = \"window\";\n\
            pos += 6;\n\
          } else {\n\
            result0 = null;\n\
            if (reportFailures === 0) {\n\
              matchFailed(\"\\\"window\\\"\");\n\
            }\n\
          }\n\
          if (result0 === null) {\n\
            if (input.substr(pos, 8) === \"viewport\") {\n\
              result0 = \"viewport\";\n\
              pos += 8;\n\
            } else {\n\
              result0 = null;\n\
              if (reportFailures === 0) {\n\
                matchFailed(\"\\\"viewport\\\"\");\n\
              }\n\
            }\n\
          }\n\
          if (result0 !== null) {\n\
            result0 = (function(offset) {return \"window\"})(pos0);\n\
          }\n\
          if (result0 === null) {\n\
            pos = pos0;\n\
          }\n\
          if (result0 === null) {\n\
            pos0 = pos;\n\
            if (input.substr(pos, 4) === \"this\") {\n\
              result0 = \"this\";\n\
              pos += 4;\n\
            } else {\n\
              result0 = null;\n\
              if (reportFailures === 0) {\n\
                matchFailed(\"\\\"this\\\"\");\n\
              }\n\
            }\n\
            if (result0 === null) {\n\
              result0 = \"\";\n\
            }\n\
            if (result0 !== null) {\n\
              result0 = (function(offset) {return \"this\"})(pos0);\n\
            }\n\
            if (result0 === null) {\n\
              pos = pos0;\n\
            }\n\
          }\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_StrengthAndWeight() {\n\
        var result0, result1, result2;\n\
        var pos0, pos1;\n\
        \n\
        pos0 = pos;\n\
        pos1 = pos;\n\
        if (input.charCodeAt(pos) === 33) {\n\
          result0 = \"!\";\n\
          pos++;\n\
        } else {\n\
          result0 = null;\n\
          if (reportFailures === 0) {\n\
            matchFailed(\"\\\"!\\\"\");\n\
          }\n\
        }\n\
        if (result0 !== null) {\n\
          result1 = parse_Strength();\n\
          if (result1 !== null) {\n\
            result2 = parse_Weight();\n\
            result2 = result2 !== null ? result2 : \"\";\n\
            if (result2 !== null) {\n\
              result0 = [result0, result1, result2];\n\
            } else {\n\
              result0 = null;\n\
              pos = pos1;\n\
            }\n\
          } else {\n\
            result0 = null;\n\
            pos = pos1;\n\
          }\n\
        } else {\n\
          result0 = null;\n\
          pos = pos1;\n\
        }\n\
        if (result0 !== null) {\n\
          result0 = (function(offset, s, w) {\n\
              if (w.length === 0) {return [s];}\n\
              return [s,w];\n\
            })(pos0, result0[1], result0[2]);\n\
        }\n\
        if (result0 === null) {\n\
          pos = pos0;\n\
        }\n\
        if (result0 === null) {\n\
          pos0 = pos;\n\
          pos1 = pos;\n\
          if (input.charCodeAt(pos) === 33) {\n\
            result0 = \"!\";\n\
            pos++;\n\
          } else {\n\
            result0 = null;\n\
            if (reportFailures === 0) {\n\
              matchFailed(\"\\\"!\\\"\");\n\
            }\n\
          }\n\
          if (result0 !== null) {\n\
            if (input.length > pos) {\n\
              result1 = input.charAt(pos);\n\
              pos++;\n\
            } else {\n\
              result1 = null;\n\
              if (reportFailures === 0) {\n\
                matchFailed(\"any character\");\n\
              }\n\
            }\n\
            result1 = result1 !== null ? result1 : \"\";\n\
            if (result1 !== null) {\n\
              result0 = [result0, result1];\n\
            } else {\n\
              result0 = null;\n\
              pos = pos1;\n\
            }\n\
          } else {\n\
            result0 = null;\n\
            pos = pos1;\n\
          }\n\
          if (result0 !== null) {\n\
            result0 = (function(offset) {return parser.error(\"Invalid Strength or Weight\",line,column)})(pos0);\n\
          }\n\
          if (result0 === null) {\n\
            pos = pos0;\n\
          }\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_Weight() {\n\
        var result0, result1;\n\
        var pos0;\n\
        \n\
        pos0 = pos;\n\
        if (/^[0-9]/.test(input.charAt(pos))) {\n\
          result1 = input.charAt(pos);\n\
          pos++;\n\
        } else {\n\
          result1 = null;\n\
          if (reportFailures === 0) {\n\
            matchFailed(\"[0-9]\");\n\
          }\n\
        }\n\
        if (result1 !== null) {\n\
          result0 = [];\n\
          while (result1 !== null) {\n\
            result0.push(result1);\n\
            if (/^[0-9]/.test(input.charAt(pos))) {\n\
              result1 = input.charAt(pos);\n\
              pos++;\n\
            } else {\n\
              result1 = null;\n\
              if (reportFailures === 0) {\n\
                matchFailed(\"[0-9]\");\n\
              }\n\
            }\n\
          }\n\
        } else {\n\
          result0 = null;\n\
        }\n\
        if (result0 !== null) {\n\
          result0 = (function(offset, w) {return Number(w.join(\"\"))})(pos0, result0);\n\
        }\n\
        if (result0 === null) {\n\
          pos = pos0;\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_Strength() {\n\
        var result0;\n\
        var pos0;\n\
        \n\
        pos0 = pos;\n\
        if (input.substr(pos, 7) === \"require\") {\n\
          result0 = \"require\";\n\
          pos += 7;\n\
        } else {\n\
          result0 = null;\n\
          if (reportFailures === 0) {\n\
            matchFailed(\"\\\"require\\\"\");\n\
          }\n\
        }\n\
        if (result0 === null) {\n\
          if (input.substr(pos, 7) === \"REQUIRE\") {\n\
            result0 = \"REQUIRE\";\n\
            pos += 7;\n\
          } else {\n\
            result0 = null;\n\
            if (reportFailures === 0) {\n\
              matchFailed(\"\\\"REQUIRE\\\"\");\n\
            }\n\
          }\n\
          if (result0 === null) {\n\
            if (input.substr(pos, 7) === \"Require\") {\n\
              result0 = \"Require\";\n\
              pos += 7;\n\
            } else {\n\
              result0 = null;\n\
              if (reportFailures === 0) {\n\
                matchFailed(\"\\\"Require\\\"\");\n\
              }\n\
            }\n\
          }\n\
        }\n\
        if (result0 !== null) {\n\
          result0 = (function(offset) {return \"require\"})(pos0);\n\
        }\n\
        if (result0 === null) {\n\
          pos = pos0;\n\
        }\n\
        if (result0 === null) {\n\
          pos0 = pos;\n\
          if (input.substr(pos, 6) === \"strong\") {\n\
            result0 = \"strong\";\n\
            pos += 6;\n\
          } else {\n\
            result0 = null;\n\
            if (reportFailures === 0) {\n\
              matchFailed(\"\\\"strong\\\"\");\n\
            }\n\
          }\n\
          if (result0 === null) {\n\
            if (input.substr(pos, 6) === \"STRONG\") {\n\
              result0 = \"STRONG\";\n\
              pos += 6;\n\
            } else {\n\
              result0 = null;\n\
              if (reportFailures === 0) {\n\
                matchFailed(\"\\\"STRONG\\\"\");\n\
              }\n\
            }\n\
            if (result0 === null) {\n\
              if (input.substr(pos, 6) === \"Strong\") {\n\
                result0 = \"Strong\";\n\
                pos += 6;\n\
              } else {\n\
                result0 = null;\n\
                if (reportFailures === 0) {\n\
                  matchFailed(\"\\\"Strong\\\"\");\n\
                }\n\
              }\n\
            }\n\
          }\n\
          if (result0 !== null) {\n\
            result0 = (function(offset) {return \"strong\"})(pos0);\n\
          }\n\
          if (result0 === null) {\n\
            pos = pos0;\n\
          }\n\
          if (result0 === null) {\n\
            pos0 = pos;\n\
            if (input.substr(pos, 6) === \"medium\") {\n\
              result0 = \"medium\";\n\
              pos += 6;\n\
            } else {\n\
              result0 = null;\n\
              if (reportFailures === 0) {\n\
                matchFailed(\"\\\"medium\\\"\");\n\
              }\n\
            }\n\
            if (result0 === null) {\n\
              if (input.substr(pos, 6) === \"MEDIUM\") {\n\
                result0 = \"MEDIUM\";\n\
                pos += 6;\n\
              } else {\n\
                result0 = null;\n\
                if (reportFailures === 0) {\n\
                  matchFailed(\"\\\"MEDIUM\\\"\");\n\
                }\n\
              }\n\
              if (result0 === null) {\n\
                if (input.substr(pos, 6) === \"Medium\") {\n\
                  result0 = \"Medium\";\n\
                  pos += 6;\n\
                } else {\n\
                  result0 = null;\n\
                  if (reportFailures === 0) {\n\
                    matchFailed(\"\\\"Medium\\\"\");\n\
                  }\n\
                }\n\
              }\n\
            }\n\
            if (result0 !== null) {\n\
              result0 = (function(offset) {return \"medium\"})(pos0);\n\
            }\n\
            if (result0 === null) {\n\
              pos = pos0;\n\
            }\n\
            if (result0 === null) {\n\
              pos0 = pos;\n\
              if (input.substr(pos, 4) === \"weak\") {\n\
                result0 = \"weak\";\n\
                pos += 4;\n\
              } else {\n\
                result0 = null;\n\
                if (reportFailures === 0) {\n\
                  matchFailed(\"\\\"weak\\\"\");\n\
                }\n\
              }\n\
              if (result0 === null) {\n\
                if (input.substr(pos, 4) === \"WEAK\") {\n\
                  result0 = \"WEAK\";\n\
                  pos += 4;\n\
                } else {\n\
                  result0 = null;\n\
                  if (reportFailures === 0) {\n\
                    matchFailed(\"\\\"WEAK\\\"\");\n\
                  }\n\
                }\n\
                if (result0 === null) {\n\
                  if (input.substr(pos, 4) === \"Weak\") {\n\
                    result0 = \"Weak\";\n\
                    pos += 4;\n\
                  } else {\n\
                    result0 = null;\n\
                    if (reportFailures === 0) {\n\
                      matchFailed(\"\\\"Weak\\\"\");\n\
                    }\n\
                  }\n\
                }\n\
              }\n\
              if (result0 !== null) {\n\
                result0 = (function(offset) {return \"weak\"})(pos0);\n\
              }\n\
              if (result0 === null) {\n\
                pos = pos0;\n\
              }\n\
              if (result0 === null) {\n\
                pos0 = pos;\n\
                if (input.substr(pos, 8) === \"required\") {\n\
                  result0 = \"required\";\n\
                  pos += 8;\n\
                } else {\n\
                  result0 = null;\n\
                  if (reportFailures === 0) {\n\
                    matchFailed(\"\\\"required\\\"\");\n\
                  }\n\
                }\n\
                if (result0 === null) {\n\
                  if (input.substr(pos, 8) === \"REQUIRED\") {\n\
                    result0 = \"REQUIRED\";\n\
                    pos += 8;\n\
                  } else {\n\
                    result0 = null;\n\
                    if (reportFailures === 0) {\n\
                      matchFailed(\"\\\"REQUIRED\\\"\");\n\
                    }\n\
                  }\n\
                  if (result0 === null) {\n\
                    if (input.substr(pos, 8) === \"Required\") {\n\
                      result0 = \"Required\";\n\
                      pos += 8;\n\
                    } else {\n\
                      result0 = null;\n\
                      if (reportFailures === 0) {\n\
                        matchFailed(\"\\\"Required\\\"\");\n\
                      }\n\
                    }\n\
                  }\n\
                }\n\
                if (result0 !== null) {\n\
                  result0 = (function(offset) {return \"require\"})(pos0);\n\
                }\n\
                if (result0 === null) {\n\
                  pos = pos0;\n\
                }\n\
              }\n\
            }\n\
          }\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_Virtual() {\n\
        var result0, result1, result2, result3, result4;\n\
        var pos0, pos1;\n\
        \n\
        pos0 = pos;\n\
        pos1 = pos;\n\
        if (input.charCodeAt(pos) === 64) {\n\
          result0 = \"@\";\n\
          pos++;\n\
        } else {\n\
          result0 = null;\n\
          if (reportFailures === 0) {\n\
            matchFailed(\"\\\"@\\\"\");\n\
          }\n\
        }\n\
        if (result0 !== null) {\n\
          if (input.substr(pos, 12) === \"-gss-virtual\") {\n\
            result1 = \"-gss-virtual\";\n\
            pos += 12;\n\
          } else {\n\
            result1 = null;\n\
            if (reportFailures === 0) {\n\
              matchFailed(\"\\\"-gss-virtual\\\"\");\n\
            }\n\
          }\n\
          if (result1 === null) {\n\
            if (input.substr(pos, 7) === \"virtual\") {\n\
              result1 = \"virtual\";\n\
              pos += 7;\n\
            } else {\n\
              result1 = null;\n\
              if (reportFailures === 0) {\n\
                matchFailed(\"\\\"virtual\\\"\");\n\
              }\n\
            }\n\
          }\n\
          if (result1 !== null) {\n\
            result2 = parse___();\n\
            if (result2 !== null) {\n\
              result4 = parse_VirtualName();\n\
              if (result4 !== null) {\n\
                result3 = [];\n\
                while (result4 !== null) {\n\
                  result3.push(result4);\n\
                  result4 = parse_VirtualName();\n\
                }\n\
              } else {\n\
                result3 = null;\n\
              }\n\
              if (result3 !== null) {\n\
                result0 = [result0, result1, result2, result3];\n\
              } else {\n\
                result0 = null;\n\
                pos = pos1;\n\
              }\n\
            } else {\n\
              result0 = null;\n\
              pos = pos1;\n\
            }\n\
          } else {\n\
            result0 = null;\n\
            pos = pos1;\n\
          }\n\
        } else {\n\
          result0 = null;\n\
          pos = pos1;\n\
        }\n\
        if (result0 !== null) {\n\
          result0 = (function(offset, names) {\n\
            var command = [\"virtual\"].concat(names);\n\
            parser.addC(command);\n\
            return command;\n\
          })(pos0, result0[3]);\n\
        }\n\
        if (result0 === null) {\n\
          pos = pos0;\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_VirtualName() {\n\
        var result0, result1, result2, result3;\n\
        var pos0, pos1;\n\
        \n\
        pos0 = pos;\n\
        pos1 = pos;\n\
        if (input.charCodeAt(pos) === 34) {\n\
          result0 = \"\\\"\";\n\
          pos++;\n\
        } else {\n\
          result0 = null;\n\
          if (reportFailures === 0) {\n\
            matchFailed(\"\\\"\\\\\\\"\\\"\");\n\
          }\n\
        }\n\
        if (result0 !== null) {\n\
          if (/^[^\"]/.test(input.charAt(pos))) {\n\
            result2 = input.charAt(pos);\n\
            pos++;\n\
          } else {\n\
            result2 = null;\n\
            if (reportFailures === 0) {\n\
              matchFailed(\"[^\\\"]\");\n\
            }\n\
          }\n\
          if (result2 !== null) {\n\
            result1 = [];\n\
            while (result2 !== null) {\n\
              result1.push(result2);\n\
              if (/^[^\"]/.test(input.charAt(pos))) {\n\
                result2 = input.charAt(pos);\n\
                pos++;\n\
              } else {\n\
                result2 = null;\n\
                if (reportFailures === 0) {\n\
                  matchFailed(\"[^\\\"]\");\n\
                }\n\
              }\n\
            }\n\
          } else {\n\
            result1 = null;\n\
          }\n\
          if (result1 !== null) {\n\
            if (input.charCodeAt(pos) === 34) {\n\
              result2 = \"\\\"\";\n\
              pos++;\n\
            } else {\n\
              result2 = null;\n\
              if (reportFailures === 0) {\n\
                matchFailed(\"\\\"\\\\\\\"\\\"\");\n\
              }\n\
            }\n\
            if (result2 !== null) {\n\
              result3 = parse___();\n\
              if (result3 !== null) {\n\
                result0 = [result0, result1, result2, result3];\n\
              } else {\n\
                result0 = null;\n\
                pos = pos1;\n\
              }\n\
            } else {\n\
              result0 = null;\n\
              pos = pos1;\n\
            }\n\
          } else {\n\
            result0 = null;\n\
            pos = pos1;\n\
          }\n\
        } else {\n\
          result0 = null;\n\
          pos = pos1;\n\
        }\n\
        if (result0 !== null) {\n\
          result0 = (function(offset, name) { return name.join(\"\") })(pos0, result0[1]);\n\
        }\n\
        if (result0 === null) {\n\
          pos = pos0;\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_Stay() {\n\
        var result0, result1, result2;\n\
        var pos0, pos1;\n\
        \n\
        pos0 = pos;\n\
        pos1 = pos;\n\
        result0 = parse_StayStart();\n\
        if (result0 !== null) {\n\
          result2 = parse_StayVars();\n\
          if (result2 !== null) {\n\
            result1 = [];\n\
            while (result2 !== null) {\n\
              result1.push(result2);\n\
              result2 = parse_StayVars();\n\
            }\n\
          } else {\n\
            result1 = null;\n\
          }\n\
          if (result1 !== null) {\n\
            result0 = [result0, result1];\n\
          } else {\n\
            result0 = null;\n\
            pos = pos1;\n\
          }\n\
        } else {\n\
          result0 = null;\n\
          pos = pos1;\n\
        }\n\
        if (result0 !== null) {\n\
          result0 = (function(offset, vars) {\n\
              var stay = [\"stay\"].concat(vars)\n\
              parser.addC(stay)\n\
              return stay;\n\
            })(pos0, result0[1]);\n\
        }\n\
        if (result0 === null) {\n\
          pos = pos0;\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_StayVars() {\n\
        var result0, result1, result2, result3;\n\
        var pos0, pos1;\n\
        \n\
        pos0 = pos;\n\
        pos1 = pos;\n\
        result0 = parse___();\n\
        if (result0 !== null) {\n\
          result1 = parse_Var();\n\
          if (result1 !== null) {\n\
            result2 = parse___();\n\
            if (result2 !== null) {\n\
              if (input.charCodeAt(pos) === 44) {\n\
                result3 = \",\";\n\
                pos++;\n\
              } else {\n\
                result3 = null;\n\
                if (reportFailures === 0) {\n\
                  matchFailed(\"\\\",\\\"\");\n\
                }\n\
              }\n\
              result3 = result3 !== null ? result3 : \"\";\n\
              if (result3 !== null) {\n\
                result0 = [result0, result1, result2, result3];\n\
              } else {\n\
                result0 = null;\n\
                pos = pos1;\n\
              }\n\
            } else {\n\
              result0 = null;\n\
              pos = pos1;\n\
            }\n\
          } else {\n\
            result0 = null;\n\
            pos = pos1;\n\
          }\n\
        } else {\n\
          result0 = null;\n\
          pos = pos1;\n\
        }\n\
        if (result0 !== null) {\n\
          result0 = (function(offset, v) {return v})(pos0, result0[1]);\n\
        }\n\
        if (result0 === null) {\n\
          pos = pos0;\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_StayStart() {\n\
        var result0;\n\
        \n\
        if (input.substr(pos, 10) === \"@-gss-stay\") {\n\
          result0 = \"@-gss-stay\";\n\
          pos += 10;\n\
        } else {\n\
          result0 = null;\n\
          if (reportFailures === 0) {\n\
            matchFailed(\"\\\"@-gss-stay\\\"\");\n\
          }\n\
        }\n\
        if (result0 === null) {\n\
          if (input.substr(pos, 5) === \"@stay\") {\n\
            result0 = \"@stay\";\n\
            pos += 5;\n\
          } else {\n\
            result0 = null;\n\
            if (reportFailures === 0) {\n\
              matchFailed(\"\\\"@stay\\\"\");\n\
            }\n\
          }\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_Conditional() {\n\
        var result0, result1, result2, result3, result4;\n\
        var pos0, pos1;\n\
        \n\
        pos0 = pos;\n\
        pos1 = pos;\n\
        if (input.substr(pos, 2) === \"?(\") {\n\
          result0 = \"?(\";\n\
          pos += 2;\n\
        } else {\n\
          result0 = null;\n\
          if (reportFailures === 0) {\n\
            matchFailed(\"\\\"?(\\\"\");\n\
          }\n\
        }\n\
        if (result0 !== null) {\n\
          result1 = parse___();\n\
          if (result1 !== null) {\n\
            result2 = parse_AndOrExpression();\n\
            if (result2 !== null) {\n\
              result3 = parse___();\n\
              if (result3 !== null) {\n\
                if (input.charCodeAt(pos) === 41) {\n\
                  result4 = \")\";\n\
                  pos++;\n\
                } else {\n\
                  result4 = null;\n\
                  if (reportFailures === 0) {\n\
                    matchFailed(\"\\\")\\\"\");\n\
                  }\n\
                }\n\
                if (result4 !== null) {\n\
                  result0 = [result0, result1, result2, result3, result4];\n\
                } else {\n\
                  result0 = null;\n\
                  pos = pos1;\n\
                }\n\
              } else {\n\
                result0 = null;\n\
                pos = pos1;\n\
              }\n\
            } else {\n\
              result0 = null;\n\
              pos = pos1;\n\
            }\n\
          } else {\n\
            result0 = null;\n\
            pos = pos1;\n\
          }\n\
        } else {\n\
          result0 = null;\n\
          pos = pos1;\n\
        }\n\
        if (result0 !== null) {\n\
          result0 = (function(offset, result) {parser.addC(result); return result;})(pos0, result0[2]);\n\
        }\n\
        if (result0 === null) {\n\
          pos = pos0;\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_AndOrExpression() {\n\
        var result0, result1, result2, result3, result4, result5;\n\
        var pos0, pos1, pos2;\n\
        \n\
        pos0 = pos;\n\
        pos1 = pos;\n\
        result0 = parse_ConditionalExpression();\n\
        if (result0 !== null) {\n\
          result1 = [];\n\
          pos2 = pos;\n\
          result2 = parse___();\n\
          if (result2 !== null) {\n\
            result3 = parse_AndOrOp();\n\
            if (result3 !== null) {\n\
              result4 = parse___();\n\
              if (result4 !== null) {\n\
                result5 = parse_ConditionalExpression();\n\
                if (result5 !== null) {\n\
                  result2 = [result2, result3, result4, result5];\n\
                } else {\n\
                  result2 = null;\n\
                  pos = pos2;\n\
                }\n\
              } else {\n\
                result2 = null;\n\
                pos = pos2;\n\
              }\n\
            } else {\n\
              result2 = null;\n\
              pos = pos2;\n\
            }\n\
          } else {\n\
            result2 = null;\n\
            pos = pos2;\n\
          }\n\
          while (result2 !== null) {\n\
            result1.push(result2);\n\
            pos2 = pos;\n\
            result2 = parse___();\n\
            if (result2 !== null) {\n\
              result3 = parse_AndOrOp();\n\
              if (result3 !== null) {\n\
                result4 = parse___();\n\
                if (result4 !== null) {\n\
                  result5 = parse_ConditionalExpression();\n\
                  if (result5 !== null) {\n\
                    result2 = [result2, result3, result4, result5];\n\
                  } else {\n\
                    result2 = null;\n\
                    pos = pos2;\n\
                  }\n\
                } else {\n\
                  result2 = null;\n\
                  pos = pos2;\n\
                }\n\
              } else {\n\
                result2 = null;\n\
                pos = pos2;\n\
              }\n\
            } else {\n\
              result2 = null;\n\
              pos = pos2;\n\
            }\n\
          }\n\
          if (result1 !== null) {\n\
            result0 = [result0, result1];\n\
          } else {\n\
            result0 = null;\n\
            pos = pos1;\n\
          }\n\
        } else {\n\
          result0 = null;\n\
          pos = pos1;\n\
        }\n\
        if (result0 !== null) {\n\
          result0 = (function(offset, head, tail) {\n\
              var result = head;\n\
              for (var i = 0; i < tail.length; i++) {\n\
                result = [\n\
                  tail[i][1],\n\
                  result,\n\
                  tail[i][3]\n\
                ];\n\
              }\n\
              return result;\n\
            })(pos0, result0[0], result0[1]);\n\
        }\n\
        if (result0 === null) {\n\
          pos = pos0;\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_AndOrOp() {\n\
        var result0;\n\
        var pos0;\n\
        \n\
        pos0 = pos;\n\
        if (input.substr(pos, 3) === \"AND\") {\n\
          result0 = \"AND\";\n\
          pos += 3;\n\
        } else {\n\
          result0 = null;\n\
          if (reportFailures === 0) {\n\
            matchFailed(\"\\\"AND\\\"\");\n\
          }\n\
        }\n\
        if (result0 === null) {\n\
          if (input.substr(pos, 3) === \"and\") {\n\
            result0 = \"and\";\n\
            pos += 3;\n\
          } else {\n\
            result0 = null;\n\
            if (reportFailures === 0) {\n\
              matchFailed(\"\\\"and\\\"\");\n\
            }\n\
          }\n\
          if (result0 === null) {\n\
            if (input.substr(pos, 3) === \"And\") {\n\
              result0 = \"And\";\n\
              pos += 3;\n\
            } else {\n\
              result0 = null;\n\
              if (reportFailures === 0) {\n\
                matchFailed(\"\\\"And\\\"\");\n\
              }\n\
            }\n\
            if (result0 === null) {\n\
              if (input.substr(pos, 2) === \"&&\") {\n\
                result0 = \"&&\";\n\
                pos += 2;\n\
              } else {\n\
                result0 = null;\n\
                if (reportFailures === 0) {\n\
                  matchFailed(\"\\\"&&\\\"\");\n\
                }\n\
              }\n\
            }\n\
          }\n\
        }\n\
        if (result0 !== null) {\n\
          result0 = (function(offset) { return \"&&\" })(pos0);\n\
        }\n\
        if (result0 === null) {\n\
          pos = pos0;\n\
        }\n\
        if (result0 === null) {\n\
          pos0 = pos;\n\
          if (input.substr(pos, 2) === \"OR\") {\n\
            result0 = \"OR\";\n\
            pos += 2;\n\
          } else {\n\
            result0 = null;\n\
            if (reportFailures === 0) {\n\
              matchFailed(\"\\\"OR\\\"\");\n\
            }\n\
          }\n\
          if (result0 === null) {\n\
            if (input.substr(pos, 2) === \"or\") {\n\
              result0 = \"or\";\n\
              pos += 2;\n\
            } else {\n\
              result0 = null;\n\
              if (reportFailures === 0) {\n\
                matchFailed(\"\\\"or\\\"\");\n\
              }\n\
            }\n\
            if (result0 === null) {\n\
              if (input.substr(pos, 2) === \"Or\") {\n\
                result0 = \"Or\";\n\
                pos += 2;\n\
              } else {\n\
                result0 = null;\n\
                if (reportFailures === 0) {\n\
                  matchFailed(\"\\\"Or\\\"\");\n\
                }\n\
              }\n\
              if (result0 === null) {\n\
                if (input.substr(pos, 2) === \"||\") {\n\
                  result0 = \"||\";\n\
                  pos += 2;\n\
                } else {\n\
                  result0 = null;\n\
                  if (reportFailures === 0) {\n\
                    matchFailed(\"\\\"||\\\"\");\n\
                  }\n\
                }\n\
              }\n\
            }\n\
          }\n\
          if (result0 !== null) {\n\
            result0 = (function(offset) { return \"||\" })(pos0);\n\
          }\n\
          if (result0 === null) {\n\
            pos = pos0;\n\
          }\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_ConditionalExpression() {\n\
        var result0, result1, result2, result3, result4, result5;\n\
        var pos0, pos1, pos2;\n\
        \n\
        pos0 = pos;\n\
        pos1 = pos;\n\
        result0 = parse_AdditiveExpression();\n\
        if (result0 !== null) {\n\
          result1 = [];\n\
          pos2 = pos;\n\
          result2 = parse___();\n\
          if (result2 !== null) {\n\
            result3 = parse_CondOperator();\n\
            if (result3 !== null) {\n\
              result4 = parse___();\n\
              if (result4 !== null) {\n\
                result5 = parse_AdditiveExpression();\n\
                if (result5 !== null) {\n\
                  result2 = [result2, result3, result4, result5];\n\
                } else {\n\
                  result2 = null;\n\
                  pos = pos2;\n\
                }\n\
              } else {\n\
                result2 = null;\n\
                pos = pos2;\n\
              }\n\
            } else {\n\
              result2 = null;\n\
              pos = pos2;\n\
            }\n\
          } else {\n\
            result2 = null;\n\
            pos = pos2;\n\
          }\n\
          while (result2 !== null) {\n\
            result1.push(result2);\n\
            pos2 = pos;\n\
            result2 = parse___();\n\
            if (result2 !== null) {\n\
              result3 = parse_CondOperator();\n\
              if (result3 !== null) {\n\
                result4 = parse___();\n\
                if (result4 !== null) {\n\
                  result5 = parse_AdditiveExpression();\n\
                  if (result5 !== null) {\n\
                    result2 = [result2, result3, result4, result5];\n\
                  } else {\n\
                    result2 = null;\n\
                    pos = pos2;\n\
                  }\n\
                } else {\n\
                  result2 = null;\n\
                  pos = pos2;\n\
                }\n\
              } else {\n\
                result2 = null;\n\
                pos = pos2;\n\
              }\n\
            } else {\n\
              result2 = null;\n\
              pos = pos2;\n\
            }\n\
          }\n\
          if (result1 !== null) {\n\
            result0 = [result0, result1];\n\
          } else {\n\
            result0 = null;\n\
            pos = pos1;\n\
          }\n\
        } else {\n\
          result0 = null;\n\
          pos = pos1;\n\
        }\n\
        if (result0 !== null) {\n\
          result0 = (function(offset, head, tail) {\n\
              var result = head;\n\
              for (var i = 0; i < tail.length; i++) {\n\
                result = [\n\
                  tail[i][1],\n\
                  result,\n\
                  tail[i][3]\n\
                ];\n\
              }      \n\
              return result;\n\
            })(pos0, result0[0], result0[1]);\n\
        }\n\
        if (result0 === null) {\n\
          pos = pos0;\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_CondOperator() {\n\
        var result0;\n\
        var pos0;\n\
        \n\
        pos0 = pos;\n\
        if (input.substr(pos, 2) === \"==\") {\n\
          result0 = \"==\";\n\
          pos += 2;\n\
        } else {\n\
          result0 = null;\n\
          if (reportFailures === 0) {\n\
            matchFailed(\"\\\"==\\\"\");\n\
          }\n\
        }\n\
        if (result0 !== null) {\n\
          result0 = (function(offset) { return \"?==\" })(pos0);\n\
        }\n\
        if (result0 === null) {\n\
          pos = pos0;\n\
        }\n\
        if (result0 === null) {\n\
          pos0 = pos;\n\
          if (input.substr(pos, 2) === \"<=\") {\n\
            result0 = \"<=\";\n\
            pos += 2;\n\
          } else {\n\
            result0 = null;\n\
            if (reportFailures === 0) {\n\
              matchFailed(\"\\\"<=\\\"\");\n\
            }\n\
          }\n\
          if (result0 === null) {\n\
            if (input.substr(pos, 2) === \"=<\") {\n\
              result0 = \"=<\";\n\
              pos += 2;\n\
            } else {\n\
              result0 = null;\n\
              if (reportFailures === 0) {\n\
                matchFailed(\"\\\"=<\\\"\");\n\
              }\n\
            }\n\
          }\n\
          if (result0 !== null) {\n\
            result0 = (function(offset) { return \"?<=\" })(pos0);\n\
          }\n\
          if (result0 === null) {\n\
            pos = pos0;\n\
          }\n\
          if (result0 === null) {\n\
            pos0 = pos;\n\
            if (input.substr(pos, 2) === \">=\") {\n\
              result0 = \">=\";\n\
              pos += 2;\n\
            } else {\n\
              result0 = null;\n\
              if (reportFailures === 0) {\n\
                matchFailed(\"\\\">=\\\"\");\n\
              }\n\
            }\n\
            if (result0 === null) {\n\
              if (input.substr(pos, 2) === \"=>\") {\n\
                result0 = \"=>\";\n\
                pos += 2;\n\
              } else {\n\
                result0 = null;\n\
                if (reportFailures === 0) {\n\
                  matchFailed(\"\\\"=>\\\"\");\n\
                }\n\
              }\n\
            }\n\
            if (result0 !== null) {\n\
              result0 = (function(offset) { return \"?>=\" })(pos0);\n\
            }\n\
            if (result0 === null) {\n\
              pos = pos0;\n\
            }\n\
            if (result0 === null) {\n\
              pos0 = pos;\n\
              if (input.charCodeAt(pos) === 60) {\n\
                result0 = \"<\";\n\
                pos++;\n\
              } else {\n\
                result0 = null;\n\
                if (reportFailures === 0) {\n\
                  matchFailed(\"\\\"<\\\"\");\n\
                }\n\
              }\n\
              if (result0 !== null) {\n\
                result0 = (function(offset) { return \"?<\"  })(pos0);\n\
              }\n\
              if (result0 === null) {\n\
                pos = pos0;\n\
              }\n\
              if (result0 === null) {\n\
                pos0 = pos;\n\
                if (input.charCodeAt(pos) === 62) {\n\
                  result0 = \">\";\n\
                  pos++;\n\
                } else {\n\
                  result0 = null;\n\
                  if (reportFailures === 0) {\n\
                    matchFailed(\"\\\">\\\"\");\n\
                  }\n\
                }\n\
                if (result0 !== null) {\n\
                  result0 = (function(offset) { return \"?>\"  })(pos0);\n\
                }\n\
                if (result0 === null) {\n\
                  pos = pos0;\n\
                }\n\
                if (result0 === null) {\n\
                  pos0 = pos;\n\
                  if (input.substr(pos, 2) === \"!=\") {\n\
                    result0 = \"!=\";\n\
                    pos += 2;\n\
                  } else {\n\
                    result0 = null;\n\
                    if (reportFailures === 0) {\n\
                      matchFailed(\"\\\"!=\\\"\");\n\
                    }\n\
                  }\n\
                  if (result0 !== null) {\n\
                    result0 = (function(offset) { return \"?!=\"  })(pos0);\n\
                  }\n\
                  if (result0 === null) {\n\
                    pos = pos0;\n\
                  }\n\
                }\n\
              }\n\
            }\n\
          }\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_ForEach() {\n\
        var result0, result1, result2, result3, result4;\n\
        var pos0, pos1;\n\
        \n\
        pos0 = pos;\n\
        pos1 = pos;\n\
        result0 = parse_ForLooperType();\n\
        if (result0 !== null) {\n\
          result1 = parse___();\n\
          if (result1 !== null) {\n\
            result2 = parse_Selector();\n\
            if (result2 !== null) {\n\
              result3 = parse___();\n\
              if (result3 !== null) {\n\
                result4 = parse_JavaScript();\n\
                if (result4 !== null) {\n\
                  result0 = [result0, result1, result2, result3, result4];\n\
                } else {\n\
                  result0 = null;\n\
                  pos = pos1;\n\
                }\n\
              } else {\n\
                result0 = null;\n\
                pos = pos1;\n\
              }\n\
            } else {\n\
              result0 = null;\n\
              pos = pos1;\n\
            }\n\
          } else {\n\
            result0 = null;\n\
            pos = pos1;\n\
          }\n\
        } else {\n\
          result0 = null;\n\
          pos = pos1;\n\
        }\n\
        if (result0 !== null) {\n\
          result0 = (function(offset, type, sel, js) {\n\
            parser.add$(sel.selector);\n\
            parser.addC([type,sel.ast,js]);\n\
            })(pos0, result0[0], result0[2], result0[4]);\n\
        }\n\
        if (result0 === null) {\n\
          pos = pos0;\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_JavaScript() {\n\
        var result0, result1, result2;\n\
        var pos0, pos1;\n\
        \n\
        pos0 = pos;\n\
        pos1 = pos;\n\
        if (input.substr(pos, 3) === \"```\") {\n\
          result0 = \"```\";\n\
          pos += 3;\n\
        } else {\n\
          result0 = null;\n\
          if (reportFailures === 0) {\n\
            matchFailed(\"\\\"```\\\"\");\n\
          }\n\
        }\n\
        if (result0 !== null) {\n\
          result1 = [];\n\
          if (/^[^`]/.test(input.charAt(pos))) {\n\
            result2 = input.charAt(pos);\n\
            pos++;\n\
          } else {\n\
            result2 = null;\n\
            if (reportFailures === 0) {\n\
              matchFailed(\"[^`]\");\n\
            }\n\
          }\n\
          while (result2 !== null) {\n\
            result1.push(result2);\n\
            if (/^[^`]/.test(input.charAt(pos))) {\n\
              result2 = input.charAt(pos);\n\
              pos++;\n\
            } else {\n\
              result2 = null;\n\
              if (reportFailures === 0) {\n\
                matchFailed(\"[^`]\");\n\
              }\n\
            }\n\
          }\n\
          if (result1 !== null) {\n\
            if (input.substr(pos, 3) === \"```\") {\n\
              result2 = \"```\";\n\
              pos += 3;\n\
            } else {\n\
              result2 = null;\n\
              if (reportFailures === 0) {\n\
                matchFailed(\"\\\"```\\\"\");\n\
              }\n\
            }\n\
            if (result2 !== null) {\n\
              result0 = [result0, result1, result2];\n\
            } else {\n\
              result0 = null;\n\
              pos = pos1;\n\
            }\n\
          } else {\n\
            result0 = null;\n\
            pos = pos1;\n\
          }\n\
        } else {\n\
          result0 = null;\n\
          pos = pos1;\n\
        }\n\
        if (result0 !== null) {\n\
          result0 = (function(offset, js) {return ['js',js.join(\"\").trim()]})(pos0, result0[1]);\n\
        }\n\
        if (result0 === null) {\n\
          pos = pos0;\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_ForLooperType() {\n\
        var result0;\n\
        var pos0;\n\
        \n\
        pos0 = pos;\n\
        if (input.substr(pos, 14) === \"@-gss-for-each\") {\n\
          result0 = \"@-gss-for-each\";\n\
          pos += 14;\n\
        } else {\n\
          result0 = null;\n\
          if (reportFailures === 0) {\n\
            matchFailed(\"\\\"@-gss-for-each\\\"\");\n\
          }\n\
        }\n\
        if (result0 === null) {\n\
          if (input.substr(pos, 9) === \"@for-each\") {\n\
            result0 = \"@for-each\";\n\
            pos += 9;\n\
          } else {\n\
            result0 = null;\n\
            if (reportFailures === 0) {\n\
              matchFailed(\"\\\"@for-each\\\"\");\n\
            }\n\
          }\n\
        }\n\
        if (result0 !== null) {\n\
          result0 = (function(offset) {return \"for-each\"})(pos0);\n\
        }\n\
        if (result0 === null) {\n\
          pos = pos0;\n\
        }\n\
        if (result0 === null) {\n\
          pos0 = pos;\n\
          if (input.substr(pos, 13) === \"@-gss-for-all\") {\n\
            result0 = \"@-gss-for-all\";\n\
            pos += 13;\n\
          } else {\n\
            result0 = null;\n\
            if (reportFailures === 0) {\n\
              matchFailed(\"\\\"@-gss-for-all\\\"\");\n\
            }\n\
          }\n\
          if (result0 === null) {\n\
            if (input.substr(pos, 8) === \"@for-all\") {\n\
              result0 = \"@for-all\";\n\
              pos += 8;\n\
            } else {\n\
              result0 = null;\n\
              if (reportFailures === 0) {\n\
                matchFailed(\"\\\"@for-all\\\"\");\n\
              }\n\
            }\n\
          }\n\
          if (result0 !== null) {\n\
            result0 = (function(offset) {return \"for-all\"})(pos0);\n\
          }\n\
          if (result0 === null) {\n\
            pos = pos0;\n\
          }\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_Chain() {\n\
        var result0, result1, result2, result3, result4, result5, result6, result7;\n\
        var pos0, pos1;\n\
        \n\
        pos0 = pos;\n\
        pos1 = pos;\n\
        if (input.charCodeAt(pos) === 64) {\n\
          result0 = \"@\";\n\
          pos++;\n\
        } else {\n\
          result0 = null;\n\
          if (reportFailures === 0) {\n\
            matchFailed(\"\\\"@\\\"\");\n\
          }\n\
        }\n\
        if (result0 !== null) {\n\
          if (input.substr(pos, 5) === \"-gss-\") {\n\
            result1 = \"-gss-\";\n\
            pos += 5;\n\
          } else {\n\
            result1 = null;\n\
            if (reportFailures === 0) {\n\
              matchFailed(\"\\\"-gss-\\\"\");\n\
            }\n\
          }\n\
          result1 = result1 !== null ? result1 : \"\";\n\
          if (result1 !== null) {\n\
            if (input.substr(pos, 5) === \"chain\") {\n\
              result2 = \"chain\";\n\
              pos += 5;\n\
            } else {\n\
              result2 = null;\n\
              if (reportFailures === 0) {\n\
                matchFailed(\"\\\"chain\\\"\");\n\
              }\n\
            }\n\
            if (result2 !== null) {\n\
              result3 = parse___();\n\
              if (result3 !== null) {\n\
                result4 = parse_Selector();\n\
                if (result4 !== null) {\n\
                  result5 = parse___();\n\
                  if (result5 !== null) {\n\
                    result7 = parse_Chainer();\n\
                    if (result7 !== null) {\n\
                      result6 = [];\n\
                      while (result7 !== null) {\n\
                        result6.push(result7);\n\
                        result7 = parse_Chainer();\n\
                      }\n\
                    } else {\n\
                      result6 = null;\n\
                    }\n\
                    if (result6 !== null) {\n\
                      result7 = parse___();\n\
                      if (result7 !== null) {\n\
                        result0 = [result0, result1, result2, result3, result4, result5, result6, result7];\n\
                      } else {\n\
                        result0 = null;\n\
                        pos = pos1;\n\
                      }\n\
                    } else {\n\
                      result0 = null;\n\
                      pos = pos1;\n\
                    }\n\
                  } else {\n\
                    result0 = null;\n\
                    pos = pos1;\n\
                  }\n\
                } else {\n\
                  result0 = null;\n\
                  pos = pos1;\n\
                }\n\
              } else {\n\
                result0 = null;\n\
                pos = pos1;\n\
              }\n\
            } else {\n\
              result0 = null;\n\
              pos = pos1;\n\
            }\n\
          } else {\n\
            result0 = null;\n\
            pos = pos1;\n\
          }\n\
        } else {\n\
          result0 = null;\n\
          pos = pos1;\n\
        }\n\
        if (result0 !== null) {\n\
          result0 = (function(offset, sel, chainers) { //sw:StrengthAndWeight?\n\
            parser.add$(sel.selector);\n\
            var ast = ['chain',sel.ast];\n\
            chainers.forEach(function(chainer){\n\
                //if (sw && !chainer.__has_sw ) {\n\
                //  chainer = chainer.concat(sw);\n\
                //}\n\
                ast = ast.concat(chainer);        \n\
              });    \n\
        \n\
            p.addC(ast);\n\
          })(pos0, result0[4], result0[6]);\n\
        }\n\
        if (result0 === null) {\n\
          pos = pos0;\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_Chainer() {\n\
        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14, result15;\n\
        var pos0, pos1;\n\
        \n\
        pos0 = pos;\n\
        pos1 = pos;\n\
        if (/^[a-zA-Z\\-_0-9]/.test(input.charAt(pos))) {\n\
          result1 = input.charAt(pos);\n\
          pos++;\n\
        } else {\n\
          result1 = null;\n\
          if (reportFailures === 0) {\n\
            matchFailed(\"[a-zA-Z\\\\-_0-9]\");\n\
          }\n\
        }\n\
        if (result1 !== null) {\n\
          result0 = [];\n\
          while (result1 !== null) {\n\
            result0.push(result1);\n\
            if (/^[a-zA-Z\\-_0-9]/.test(input.charAt(pos))) {\n\
              result1 = input.charAt(pos);\n\
              pos++;\n\
            } else {\n\
              result1 = null;\n\
              if (reportFailures === 0) {\n\
                matchFailed(\"[a-zA-Z\\\\-_0-9]\");\n\
              }\n\
            }\n\
          }\n\
        } else {\n\
          result0 = null;\n\
        }\n\
        if (result0 !== null) {\n\
          if (input.charCodeAt(pos) === 40) {\n\
            result1 = \"(\";\n\
            pos++;\n\
          } else {\n\
            result1 = null;\n\
            if (reportFailures === 0) {\n\
              matchFailed(\"\\\"(\\\"\");\n\
            }\n\
          }\n\
          if (result1 !== null) {\n\
            result2 = parse__();\n\
            if (result2 !== null) {\n\
              result3 = parse_HeadExp();\n\
              result3 = result3 !== null ? result3 : \"\";\n\
              if (result3 !== null) {\n\
                result4 = parse__();\n\
                if (result4 !== null) {\n\
                  result5 = parse_ChainEq();\n\
                  if (result5 !== null) {\n\
                    result6 = parse__();\n\
                    if (result6 !== null) {\n\
                      result7 = parse_AdditiveExpression();\n\
                      result7 = result7 !== null ? result7 : \"\";\n\
                      if (result7 !== null) {\n\
                        result8 = parse__();\n\
                        if (result8 !== null) {\n\
                          result9 = parse_ChainEq();\n\
                          result9 = result9 !== null ? result9 : \"\";\n\
                          if (result9 !== null) {\n\
                            result10 = parse__();\n\
                            if (result10 !== null) {\n\
                              result11 = parse_StrengthAndWeight();\n\
                              result11 = result11 !== null ? result11 : \"\";\n\
                              if (result11 !== null) {\n\
                                result12 = parse__();\n\
                                if (result12 !== null) {\n\
                                  if (input.charCodeAt(pos) === 41) {\n\
                                    result13 = \")\";\n\
                                    pos++;\n\
                                  } else {\n\
                                    result13 = null;\n\
                                    if (reportFailures === 0) {\n\
                                      matchFailed(\"\\\")\\\"\");\n\
                                    }\n\
                                  }\n\
                                  if (result13 !== null) {\n\
                                    result14 = [];\n\
                                    if (/^[a-zA-Z\\-_0-9]/.test(input.charAt(pos))) {\n\
                                      result15 = input.charAt(pos);\n\
                                      pos++;\n\
                                    } else {\n\
                                      result15 = null;\n\
                                      if (reportFailures === 0) {\n\
                                        matchFailed(\"[a-zA-Z\\\\-_0-9]\");\n\
                                      }\n\
                                    }\n\
                                    while (result15 !== null) {\n\
                                      result14.push(result15);\n\
                                      if (/^[a-zA-Z\\-_0-9]/.test(input.charAt(pos))) {\n\
                                        result15 = input.charAt(pos);\n\
                                        pos++;\n\
                                      } else {\n\
                                        result15 = null;\n\
                                        if (reportFailures === 0) {\n\
                                          matchFailed(\"[a-zA-Z\\\\-_0-9]\");\n\
                                        }\n\
                                      }\n\
                                    }\n\
                                    if (result14 !== null) {\n\
                                      result15 = parse___();\n\
                                      if (result15 !== null) {\n\
                                        result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14, result15];\n\
                                      } else {\n\
                                        result0 = null;\n\
                                        pos = pos1;\n\
                                      }\n\
                                    } else {\n\
                                      result0 = null;\n\
                                      pos = pos1;\n\
                                    }\n\
                                  } else {\n\
                                    result0 = null;\n\
                                    pos = pos1;\n\
                                  }\n\
                                } else {\n\
                                  result0 = null;\n\
                                  pos = pos1;\n\
                                }\n\
                              } else {\n\
                                result0 = null;\n\
                                pos = pos1;\n\
                              }\n\
                            } else {\n\
                              result0 = null;\n\
                              pos = pos1;\n\
                            }\n\
                          } else {\n\
                            result0 = null;\n\
                            pos = pos1;\n\
                          }\n\
                        } else {\n\
                          result0 = null;\n\
                          pos = pos1;\n\
                        }\n\
                      } else {\n\
                        result0 = null;\n\
                        pos = pos1;\n\
                      }\n\
                    } else {\n\
                      result0 = null;\n\
                      pos = pos1;\n\
                    }\n\
                  } else {\n\
                    result0 = null;\n\
                    pos = pos1;\n\
                  }\n\
                } else {\n\
                  result0 = null;\n\
                  pos = pos1;\n\
                }\n\
              } else {\n\
                result0 = null;\n\
                pos = pos1;\n\
              }\n\
            } else {\n\
              result0 = null;\n\
              pos = pos1;\n\
            }\n\
          } else {\n\
            result0 = null;\n\
            pos = pos1;\n\
          }\n\
        } else {\n\
          result0 = null;\n\
          pos = pos1;\n\
        }\n\
        if (result0 !== null) {\n\
          result0 = (function(offset, head, headExp, headEq, bridgeVal, tailEq, sw, tail) {\n\
            var asts = []\n\
            head = p.toString(head);\n\
            tail = p.toString(tail);    \n\
            var getAST = function (op, e1, e2) {\n\
              var ast = [op, e1, e2];\n\
              if (sw) {\n\
                ast = ast.concat(sw);\n\
                //ast.__has_sw = true;\n\
              }\n\
              return ast      \n\
            }\n\
            \n\
            if (tail.length === 0) {tail = head;}\n\
            if (headExp) {\n\
              headExp.splice(1,1,head);\n\
              head = headExp;\n\
            }\n\
            /*\n\
            if (tailExp) {\n\
              tailExp.splice(2,1,tail);\n\
              tail = tailExp;\n\
            }\n\
            */\n\
            if (bridgeVal) {\n\
              asts.push( getAST(headEq,head,bridgeVal) );\n\
              if (tailEq) {\n\
                asts.push( getAST(tailEq,bridgeVal,tail) );\n\
              }\n\
              else {\n\
                p.error(\"Invalid Chain Statement\",line,column);\n\
              }      \n\
            } else {\n\
              asts.push( getAST(headEq,head,tail) );\n\
            }\n\
            return asts;\n\
          })(pos0, result0[0], result0[3], result0[5], result0[7], result0[9], result0[11], result0[14]);\n\
        }\n\
        if (result0 === null) {\n\
          pos = pos0;\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_HeadExp() {\n\
        var result0, result1;\n\
        var pos0, pos1;\n\
        \n\
        pos0 = pos;\n\
        pos1 = pos;\n\
        result0 = parse_ChainMath();\n\
        if (result0 !== null) {\n\
          result1 = parse_AdditiveExpression();\n\
          if (result1 !== null) {\n\
            result0 = [result0, result1];\n\
          } else {\n\
            result0 = null;\n\
            pos = pos1;\n\
          }\n\
        } else {\n\
          result0 = null;\n\
          pos = pos1;\n\
        }\n\
        if (result0 !== null) {\n\
          result0 = (function(offset, math, val) {\n\
            return [math, \"_REPLACE_ME_\", val]\n\
          })(pos0, result0[0], result0[1]);\n\
        }\n\
        if (result0 === null) {\n\
          pos = pos0;\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_TailExp() {\n\
        var result0, result1;\n\
        var pos0, pos1;\n\
        \n\
        pos0 = pos;\n\
        pos1 = pos;\n\
        result0 = parse_AdditiveExpression();\n\
        if (result0 !== null) {\n\
          result1 = parse_ChainMath();\n\
          if (result1 !== null) {\n\
            result0 = [result0, result1];\n\
          } else {\n\
            result0 = null;\n\
            pos = pos1;\n\
          }\n\
        } else {\n\
          result0 = null;\n\
          pos = pos1;\n\
        }\n\
        if (result0 !== null) {\n\
          result0 = (function(offset, val, math) {\n\
            return [math, val, \"_REPLACE_ME_\"]\n\
          })(pos0, result0[0], result0[1]);\n\
        }\n\
        if (result0 === null) {\n\
          pos = pos0;\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_ChainMath() {\n\
        var result0;\n\
        var pos0;\n\
        \n\
        pos0 = pos;\n\
        if (input.charCodeAt(pos) === 43) {\n\
          result0 = \"+\";\n\
          pos++;\n\
        } else {\n\
          result0 = null;\n\
          if (reportFailures === 0) {\n\
            matchFailed(\"\\\"+\\\"\");\n\
          }\n\
        }\n\
        if (result0 !== null) {\n\
          result0 = (function(offset) {return \"plus-chain\"})(pos0);\n\
        }\n\
        if (result0 === null) {\n\
          pos = pos0;\n\
        }\n\
        if (result0 === null) {\n\
          pos0 = pos;\n\
          if (input.charCodeAt(pos) === 45) {\n\
            result0 = \"-\";\n\
            pos++;\n\
          } else {\n\
            result0 = null;\n\
            if (reportFailures === 0) {\n\
              matchFailed(\"\\\"-\\\"\");\n\
            }\n\
          }\n\
          if (result0 !== null) {\n\
            result0 = (function(offset) {return \"minus-chain\"})(pos0);\n\
          }\n\
          if (result0 === null) {\n\
            pos = pos0;\n\
          }\n\
          if (result0 === null) {\n\
            pos0 = pos;\n\
            if (input.charCodeAt(pos) === 42) {\n\
              result0 = \"*\";\n\
              pos++;\n\
            } else {\n\
              result0 = null;\n\
              if (reportFailures === 0) {\n\
                matchFailed(\"\\\"*\\\"\");\n\
              }\n\
            }\n\
            if (result0 !== null) {\n\
              result0 = (function(offset) {return \"multiply-chain\"})(pos0);\n\
            }\n\
            if (result0 === null) {\n\
              pos = pos0;\n\
            }\n\
            if (result0 === null) {\n\
              pos0 = pos;\n\
              if (input.charCodeAt(pos) === 47) {\n\
                result0 = \"/\";\n\
                pos++;\n\
              } else {\n\
                result0 = null;\n\
                if (reportFailures === 0) {\n\
                  matchFailed(\"\\\"/\\\"\");\n\
                }\n\
              }\n\
              if (result0 !== null) {\n\
                result0 = (function(offset) {return \"divide-chain\"})(pos0);\n\
              }\n\
              if (result0 === null) {\n\
                pos = pos0;\n\
              }\n\
            }\n\
          }\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_ChainEq() {\n\
        var result0;\n\
        var pos0;\n\
        \n\
        pos0 = pos;\n\
        result0 = parse_EqOperator();\n\
        result0 = result0 !== null ? result0 : \"\";\n\
        if (result0 !== null) {\n\
          result0 = (function(offset, chainEq) {\n\
            if (!chainEq) {chainEq = \"eq\";}\n\
            chainEq += \"-chain\";\n\
            return chainEq;\n\
          })(pos0, result0);\n\
        }\n\
        if (result0 === null) {\n\
          pos = pos0;\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      \n\
      function cleanupExpected(expected) {\n\
        expected.sort();\n\
        \n\
        var lastExpected = null;\n\
        var cleanExpected = [];\n\
        for (var i = 0; i < expected.length; i++) {\n\
          if (expected[i] !== lastExpected) {\n\
            cleanExpected.push(expected[i]);\n\
            lastExpected = expected[i];\n\
          }\n\
        }\n\
        return cleanExpected;\n\
      }\n\
      \n\
      function computeErrorPosition() {\n\
        /*\n\
         * The first idea was to use |String.split| to break the input up to the\n\
         * error position along newlines and derive the line and column from\n\
         * there. However IE's |split| implementation is so broken that it was\n\
         * enough to prevent it.\n\
         */\n\
        \n\
        var line = 1;\n\
        var column = 1;\n\
        var seenCR = false;\n\
        \n\
        for (var i = 0; i < Math.max(pos, rightmostFailuresPos); i++) {\n\
          var ch = input.charAt(i);\n\
          if (ch === \"\\n\
\") {\n\
            if (!seenCR) { line++; }\n\
            column = 1;\n\
            seenCR = false;\n\
          } else if (ch === \"\\r\" || ch === \"\\u2028\" || ch === \"\\u2029\") {\n\
            line++;\n\
            column = 1;\n\
            seenCR = true;\n\
          } else {\n\
            column++;\n\
            seenCR = false;\n\
          }\n\
        }\n\
        \n\
        return { line: line, column: column };\n\
      }\n\
      \n\
      \n\
        var p, parser, flatten, _varsCache, _measuresCache; \n\
      \n\
        p = parser = this;\n\
      \n\
        p.commands = [];  \n\
      \n\
        p.cs = [];\n\
        p.addC = function (c) {\n\
          p.commands.push(c);\n\
        };\n\
        \n\
        p.$s = [];\n\
        p.add$ = function ($) {    \n\
          if (!$) {return undefined};\n\
          if (p.$s.indexOf($) === -1) {p.$s.push($);}\n\
          return $;\n\
        }\n\
        \n\
        _measuresCache = [];\n\
        p.measures = [];\n\
        p.processMeasure = function (ast) {\n\
          var _id;\n\
          _id = ast.toString(); // assuming stringified ast arrays CAN be used for cache lookup\n\
          if (_measuresCache.indexOf(_id) === -1) {\n\
            _measuresCache.push(_id);\n\
            p.measures.push(ast);\n\
          }\n\
          return ast;\n\
        }\n\
      \n\
        p.getResults = function () {\n\
          return {\n\
            \"selectors\": p.$s,\n\
            // potential shared state from chaining\n\
            \"commands\": JSON.parse(JSON.stringify(p.commands))\n\
            //\"measures\": p.measures,\n\
            //\"constraints\": p.cs      \n\
          }\n\
        }\n\
        \n\
        p.toString = function (x) {\n\
          if (typeof x === \"string\") {return x}\n\
          if (x instanceof Array) {return x.join(\"\")}\n\
          return \"\"\n\
        }\n\
      \n\
        p.error = function (m,l,c) {\n\
          if (!!l && !!c) {m = m+ \" {line:\" + l + \", col:\" + c + \"}\"} \n\
          console.error(m);\n\
          return m;\n\
        }\n\
      \n\
      \n\
      \n\
      var result = parseFunctions[startRule]();\n\
      \n\
      /*\n\
       * The parser is now in one of the following three states:\n\
       *\n\
       * 1. The parser successfully parsed the whole input.\n\
       *\n\
       *    - |result !== null|\n\
       *    - |pos === input.length|\n\
       *    - |rightmostFailuresExpected| may or may not contain something\n\
       *\n\
       * 2. The parser successfully parsed only a part of the input.\n\
       *\n\
       *    - |result !== null|\n\
       *    - |pos < input.length|\n\
       *    - |rightmostFailuresExpected| may or may not contain something\n\
       *\n\
       * 3. The parser did not successfully parse any part of the input.\n\
       *\n\
       *   - |result === null|\n\
       *   - |pos === 0|\n\
       *   - |rightmostFailuresExpected| contains at least one failure\n\
       *\n\
       * All code following this comment (including called functions) must\n\
       * handle these states.\n\
       */\n\
      if (result === null || pos !== input.length) {\n\
        var offset = Math.max(pos, rightmostFailuresPos);\n\
        var found = offset < input.length ? input.charAt(offset) : null;\n\
        var errorPosition = computeErrorPosition();\n\
        \n\
        throw new this.SyntaxError(\n\
          cleanupExpected(rightmostFailuresExpected),\n\
          found,\n\
          offset,\n\
          errorPosition.line,\n\
          errorPosition.column\n\
        );\n\
      }\n\
      \n\
      return result;\n\
    },\n\
    \n\
    /* Returns the parser source code. */\n\
    toSource: function() { return this._source; }\n\
  };\n\
  \n\
  /* Thrown when a parser encounters a syntax error. */\n\
  \n\
  result.SyntaxError = function(expected, found, offset, line, column) {\n\
    function buildMessage(expected, found) {\n\
      var expectedHumanized, foundHumanized;\n\
      \n\
      switch (expected.length) {\n\
        case 0:\n\
          expectedHumanized = \"end of input\";\n\
          break;\n\
        case 1:\n\
          expectedHumanized = expected[0];\n\
          break;\n\
        default:\n\
          expectedHumanized = expected.slice(0, expected.length - 1).join(\", \")\n\
            + \" or \"\n\
            + expected[expected.length - 1];\n\
      }\n\
      \n\
      foundHumanized = found ? quote(found) : \"end of input\";\n\
      \n\
      return \"Expected \" + expectedHumanized + \" but \" + foundHumanized + \" found.\";\n\
    }\n\
    \n\
    this.name = \"SyntaxError\";\n\
    this.expected = expected;\n\
    this.found = found;\n\
    this.message = buildMessage(expected, found);\n\
    this.offset = offset;\n\
    this.line = line;\n\
    this.column = column;\n\
  };\n\
  \n\
  result.SyntaxError.prototype = Error.prototype;\n\
  \n\
  return result;\n\
})();//@ sourceURL=the-gss-ccss-compiler/lib/ccss-compiler.js"
));
require.register("the-gss-vfl-compiler/lib/vfl-compiler.js", Function("exports, require, module",
"module.exports = (function(){\n\
  /*\n\
   * Generated by PEG.js 0.7.0.\n\
   *\n\
   * http://pegjs.majda.cz/\n\
   */\n\
  \n\
  function quote(s) {\n\
    /*\n\
     * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a\n\
     * string literal except for the closing quote character, backslash,\n\
     * carriage return, line separator, paragraph separator, and line feed.\n\
     * Any character may appear in the form of an escape sequence.\n\
     *\n\
     * For portability, we also escape escape all control and non-ASCII\n\
     * characters. Note that \"\\0\" and \"\\v\" escape sequences are not used\n\
     * because JSHint does not like the first and IE the second.\n\
     */\n\
     return '\"' + s\n\
      .replace(/\\\\/g, '\\\\\\\\')  // backslash\n\
      .replace(/\"/g, '\\\\\"')    // closing quote character\n\
      .replace(/\\x08/g, '\\\\b') // backspace\n\
      .replace(/\\t/g, '\\\\t')   // horizontal tab\n\
      .replace(/\\n\
/g, '\\\\n\
')   // line feed\n\
      .replace(/\\f/g, '\\\\f')   // form feed\n\
      .replace(/\\r/g, '\\\\r')   // carriage return\n\
      .replace(/[\\x00-\\x07\\x0B\\x0E-\\x1F\\x80-\\uFFFF]/g, escape)\n\
      + '\"';\n\
  }\n\
  \n\
  var result = {\n\
    /*\n\
     * Parses the input with a generated parser. If the parsing is successfull,\n\
     * returns a value explicitly or implicitly specified by the grammar from\n\
     * which the parser was generated (see |PEG.buildParser|). If the parsing is\n\
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.\n\
     */\n\
    parse: function(input, startRule) {\n\
      var parseFunctions = {\n\
        \"start\": parse_start,\n\
        \"debug\": parse_debug,\n\
        \"Statement\": parse_Statement,\n\
        \"VFLStatement\": parse_VFLStatement,\n\
        \"VFLPluralStatement\": parse_VFLPluralStatement,\n\
        \"Dimension\": parse_Dimension,\n\
        \"Options\": parse_Options,\n\
        \"Option\": parse_Option,\n\
        \"OpionValueChars\": parse_OpionValueChars,\n\
        \"Chain\": parse_Chain,\n\
        \"ChainPredicate\": parse_ChainPredicate,\n\
        \"ChainPredicateItems\": parse_ChainPredicateItems,\n\
        \"ChainPredicateItem\": parse_ChainPredicateItem,\n\
        \"ChainPredVal\": parse_ChainPredVal,\n\
        \"View\": parse_View,\n\
        \"Predicate\": parse_Predicate,\n\
        \"PredExpression\": parse_PredExpression,\n\
        \"PredEq\": parse_PredEq,\n\
        \"PredOp\": parse_PredOp,\n\
        \"PredView\": parse_PredView,\n\
        \"PredLiteral\": parse_PredLiteral,\n\
        \"PredVariable\": parse_PredVariable,\n\
        \"PredViewVariable\": parse_PredViewVariable,\n\
        \"PredSeperator\": parse_PredSeperator,\n\
        \"Connection\": parse_Connection,\n\
        \"GapChars\": parse_GapChars,\n\
        \"StrengthAndWeight\": parse_StrengthAndWeight,\n\
        \"Strength\": parse_Strength,\n\
        \"NameChars\": parse_NameChars,\n\
        \"NameCharsWithSpace\": parse_NameCharsWithSpace,\n\
        \"Literal\": parse_Literal,\n\
        \"Number\": parse_Number,\n\
        \"Integer\": parse_Integer,\n\
        \"Real\": parse_Real,\n\
        \"SignedInteger\": parse_SignedInteger,\n\
        \"SourceCharacter\": parse_SourceCharacter,\n\
        \"WhiteSpace\": parse_WhiteSpace,\n\
        \"LineTerminator\": parse_LineTerminator,\n\
        \"LineTerminatorSequence\": parse_LineTerminatorSequence,\n\
        \"EOS\": parse_EOS,\n\
        \"EOF\": parse_EOF,\n\
        \"Comment\": parse_Comment,\n\
        \"MultiLineComment\": parse_MultiLineComment,\n\
        \"MultiLineCommentNoLineTerminator\": parse_MultiLineCommentNoLineTerminator,\n\
        \"SingleLineComment\": parse_SingleLineComment,\n\
        \"_\": parse__,\n\
        \"__\": parse___\n\
      };\n\
      \n\
      if (startRule !== undefined) {\n\
        if (parseFunctions[startRule] === undefined) {\n\
          throw new Error(\"Invalid rule name: \" + quote(startRule) + \".\");\n\
        }\n\
      } else {\n\
        startRule = \"start\";\n\
      }\n\
      \n\
      var pos = 0;\n\
      var reportFailures = 0;\n\
      var rightmostFailuresPos = 0;\n\
      var rightmostFailuresExpected = [];\n\
      \n\
      function padLeft(input, padding, length) {\n\
        var result = input;\n\
        \n\
        var padLength = length - input.length;\n\
        for (var i = 0; i < padLength; i++) {\n\
          result = padding + result;\n\
        }\n\
        \n\
        return result;\n\
      }\n\
      \n\
      function escape(ch) {\n\
        var charCode = ch.charCodeAt(0);\n\
        var escapeChar;\n\
        var length;\n\
        \n\
        if (charCode <= 0xFF) {\n\
          escapeChar = 'x';\n\
          length = 2;\n\
        } else {\n\
          escapeChar = 'u';\n\
          length = 4;\n\
        }\n\
        \n\
        return '\\\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);\n\
      }\n\
      \n\
      function matchFailed(failure) {\n\
        if (pos < rightmostFailuresPos) {\n\
          return;\n\
        }\n\
        \n\
        if (pos > rightmostFailuresPos) {\n\
          rightmostFailuresPos = pos;\n\
          rightmostFailuresExpected = [];\n\
        }\n\
        \n\
        rightmostFailuresExpected.push(failure);\n\
      }\n\
      \n\
      function parse_start() {\n\
        var result0, result1, result2;\n\
        var pos0, pos1;\n\
        \n\
        pos0 = pos;\n\
        pos1 = pos;\n\
        result0 = parse___();\n\
        if (result0 !== null) {\n\
          result1 = [];\n\
          result2 = parse_Statement();\n\
          while (result2 !== null) {\n\
            result1.push(result2);\n\
            result2 = parse_Statement();\n\
          }\n\
          if (result1 !== null) {\n\
            result2 = parse___();\n\
            if (result2 !== null) {\n\
              result0 = [result0, result1, result2];\n\
            } else {\n\
              result0 = null;\n\
              pos = pos1;\n\
            }\n\
          } else {\n\
            result0 = null;\n\
            pos = pos1;\n\
          }\n\
        } else {\n\
          result0 = null;\n\
          pos = pos1;\n\
        }\n\
        if (result0 !== null) {\n\
          result0 = (function(offset) { return parser.getResults(); })(pos0);\n\
        }\n\
        if (result0 === null) {\n\
          pos = pos0;\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_debug() {\n\
        var result0, result1, result2;\n\
        var pos0, pos1;\n\
        \n\
        pos0 = pos;\n\
        pos1 = pos;\n\
        result0 = parse___();\n\
        if (result0 !== null) {\n\
          result1 = [];\n\
          result2 = parse_Statement();\n\
          while (result2 !== null) {\n\
            result1.push(result2);\n\
            result2 = parse_Statement();\n\
          }\n\
          if (result1 !== null) {\n\
            result2 = parse___();\n\
            if (result2 !== null) {\n\
              result0 = [result0, result1, result2];\n\
            } else {\n\
              result0 = null;\n\
              pos = pos1;\n\
            }\n\
          } else {\n\
            result0 = null;\n\
            pos = pos1;\n\
          }\n\
        } else {\n\
          result0 = null;\n\
          pos = pos1;\n\
        }\n\
        if (result0 !== null) {\n\
          result0 = (function(offset, vfl) { return parser.getResults().concat(vfl); })(pos0, result0[1]);\n\
        }\n\
        if (result0 === null) {\n\
          pos = pos0;\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_Statement() {\n\
        var result0, result1, result2;\n\
        var pos0, pos1;\n\
        \n\
        pos0 = pos;\n\
        pos1 = pos;\n\
        result0 = parse_VFLStatement();\n\
        if (result0 !== null) {\n\
          result1 = parse_EOS();\n\
          if (result1 !== null) {\n\
            result2 = parse___();\n\
            if (result2 !== null) {\n\
              result0 = [result0, result1, result2];\n\
            } else {\n\
              result0 = null;\n\
              pos = pos1;\n\
            }\n\
          } else {\n\
            result0 = null;\n\
            pos = pos1;\n\
          }\n\
        } else {\n\
          result0 = null;\n\
          pos = pos1;\n\
        }\n\
        if (result0 !== null) {\n\
          result0 = (function(offset, exp) { return exp; })(pos0, result0[0]);\n\
        }\n\
        if (result0 === null) {\n\
          pos = pos0;\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_VFLStatement() {\n\
        var result0, result1, result2, result3, result4, result5, result6, result7;\n\
        var pos0, pos1, pos2;\n\
        \n\
        pos0 = pos;\n\
        pos1 = pos;\n\
        result0 = parse_Dimension();\n\
        if (result0 !== null) {\n\
          result1 = parse___();\n\
          if (result1 !== null) {\n\
            result2 = parse_View();\n\
            if (result2 !== null) {\n\
              result3 = [];\n\
              pos2 = pos;\n\
              result4 = parse___();\n\
              if (result4 !== null) {\n\
                result5 = parse_Connection();\n\
                result5 = result5 !== null ? result5 : \"\";\n\
                if (result5 !== null) {\n\
                  result6 = parse___();\n\
                  if (result6 !== null) {\n\
                    result7 = parse_View();\n\
                    if (result7 !== null) {\n\
                      result4 = [result4, result5, result6, result7];\n\
                    } else {\n\
                      result4 = null;\n\
                      pos = pos2;\n\
                    }\n\
                  } else {\n\
                    result4 = null;\n\
                    pos = pos2;\n\
                  }\n\
                } else {\n\
                  result4 = null;\n\
                  pos = pos2;\n\
                }\n\
              } else {\n\
                result4 = null;\n\
                pos = pos2;\n\
              }\n\
              while (result4 !== null) {\n\
                result3.push(result4);\n\
                pos2 = pos;\n\
                result4 = parse___();\n\
                if (result4 !== null) {\n\
                  result5 = parse_Connection();\n\
                  result5 = result5 !== null ? result5 : \"\";\n\
                  if (result5 !== null) {\n\
                    result6 = parse___();\n\
                    if (result6 !== null) {\n\
                      result7 = parse_View();\n\
                      if (result7 !== null) {\n\
                        result4 = [result4, result5, result6, result7];\n\
                      } else {\n\
                        result4 = null;\n\
                        pos = pos2;\n\
                      }\n\
                    } else {\n\
                      result4 = null;\n\
                      pos = pos2;\n\
                    }\n\
                  } else {\n\
                    result4 = null;\n\
                    pos = pos2;\n\
                  }\n\
                } else {\n\
                  result4 = null;\n\
                  pos = pos2;\n\
                }\n\
              }\n\
              if (result3 !== null) {\n\
                result4 = parse___();\n\
                if (result4 !== null) {\n\
                  result5 = parse_Options();\n\
                  result5 = result5 !== null ? result5 : \"\";\n\
                  if (result5 !== null) {\n\
                    result0 = [result0, result1, result2, result3, result4, result5];\n\
                  } else {\n\
                    result0 = null;\n\
                    pos = pos1;\n\
                  }\n\
                } else {\n\
                  result0 = null;\n\
                  pos = pos1;\n\
                }\n\
              } else {\n\
                result0 = null;\n\
                pos = pos1;\n\
              }\n\
            } else {\n\
              result0 = null;\n\
              pos = pos1;\n\
            }\n\
          } else {\n\
            result0 = null;\n\
            pos = pos1;\n\
          }\n\
        } else {\n\
          result0 = null;\n\
          pos = pos1;\n\
        }\n\
        if (result0 !== null) {\n\
          result0 = (function(offset, d, head, tail, o) {\n\
              var connection, view2, result, ccss, headView, chainedViews, withContainer;      \n\
              result = head;      \n\
              headView = head.view;\n\
              chainedViews = [];      \n\
              if (headView !== \"|\") {chainedViews.push(headView);}\n\
              parser.addPreds(headView,head.preds,d);      \n\
              for (var i = 0; i < tail.length; i++) {        \n\
                connection = tail[i][1];\n\
                view2 = tail[i][3].view;\n\
                if (view2 !== \"|\") {chainedViews.push(view2);}\n\
                parser.addPreds(view2,tail[i][3].preds,d);\n\
                result = [\n\
                  //\"c\",\n\
                  connection,\n\
                  result,\n\
                  view2\n\
                ];\n\
                withContainer = ( headView ==\"|\" || view2 === \"|\");\n\
                ccss = p.getLeftVar(headView, d, o) + \" \" \n\
                  + p.getConnectionString(connection, d, o, withContainer) + \" \" \n\
                  + p.getRightVar(view2, d, o)   \n\
                  + p.getTrailingOptions(o)\n\
                  + p.getSW(o);\n\
                parser.addC(\n\
                  ccss.trim()\n\
                );\n\
                headView = view2;\n\
              }\n\
              parser.addChains(chainedViews,o);\n\
              return {'vfl':d, o:o};\n\
            })(pos0, result0[0], result0[2], result0[3], result0[5]);\n\
        }\n\
        if (result0 === null) {\n\
          pos = pos0;\n\
        }\n\
        if (result0 === null) {\n\
          result0 = parse_VFLPluralStatement();\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_VFLPluralStatement() {\n\
        var result0, result1, result2, result3, result4, result5, result6;\n\
        var pos0, pos1;\n\
        \n\
        pos0 = pos;\n\
        pos1 = pos;\n\
        result0 = parse_Dimension();\n\
        if (result0 !== null) {\n\
          result1 = parse___();\n\
          if (result1 !== null) {\n\
            result3 = parse_NameChars();\n\
            if (result3 !== null) {\n\
              result2 = [];\n\
              while (result3 !== null) {\n\
                result2.push(result3);\n\
                result3 = parse_NameChars();\n\
              }\n\
            } else {\n\
              result2 = null;\n\
            }\n\
            if (result2 !== null) {\n\
              result3 = parse___();\n\
              if (result3 !== null) {\n\
                result4 = parse_Options();\n\
                result4 = result4 !== null ? result4 : \"\";\n\
                if (result4 !== null) {\n\
                  result5 = parse___();\n\
                  if (result5 !== null) {\n\
                    result6 = parse_StrengthAndWeight();\n\
                    result6 = result6 !== null ? result6 : \"\";\n\
                    if (result6 !== null) {\n\
                      result0 = [result0, result1, result2, result3, result4, result5, result6];\n\
                    } else {\n\
                      result0 = null;\n\
                      pos = pos1;\n\
                    }\n\
                  } else {\n\
                    result0 = null;\n\
                    pos = pos1;\n\
                  }\n\
                } else {\n\
                  result0 = null;\n\
                  pos = pos1;\n\
                }\n\
              } else {\n\
                result0 = null;\n\
                pos = pos1;\n\
              }\n\
            } else {\n\
              result0 = null;\n\
              pos = pos1;\n\
            }\n\
          } else {\n\
            result0 = null;\n\
            pos = pos1;\n\
          }\n\
        } else {\n\
          result0 = null;\n\
          pos = pos1;\n\
        }\n\
        if (result0 !== null) {\n\
          result0 = (function(offset, d, selector, o, s) {\n\
           var ccss = \"@chain \";\n\
           selector = selector.join(\"\").trim();   \n\
           ccss += selector + \" \";\n\
           ccss += p.leftVarNames[d] + \"(\";\n\
           if (!o) {o = {};}\n\
           if (o.gap) {\n\
             ccss += \"+\" + o.gap;\n\
           }\n\
           ccss += \")\" + p.rightVarNames[d];\n\
           if (o.chains) {\n\
             o.chains.forEach( function (chain) {\n\
                ccss += \" \" + chain[0] + \"(\"; \n\
                if (chain[1].raw) {\n\
                  ccss += chain[1].raw;\n\
                }\n\
                ccss += \")\";\n\
               });\n\
           }\n\
           ccss += p.getTrailingOptions(o);\n\
           ccss += p.getSW(o);\n\
           parser.addC(ccss.trim());\n\
           return {vfl:d,o:o}\n\
         })(pos0, result0[0], result0[2], result0[4], result0[6]);\n\
        }\n\
        if (result0 === null) {\n\
          pos = pos0;\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_Dimension() {\n\
        var result0;\n\
        var pos0;\n\
        \n\
        pos0 = pos;\n\
        if (input.substr(pos, 11) === \"@horizontal\") {\n\
          result0 = \"@horizontal\";\n\
          pos += 11;\n\
        } else {\n\
          result0 = null;\n\
          if (reportFailures === 0) {\n\
            matchFailed(\"\\\"@horizontal\\\"\");\n\
          }\n\
        }\n\
        if (result0 === null) {\n\
          if (input.substr(pos, 16) === \"@-gss-horizontal\") {\n\
            result0 = \"@-gss-horizontal\";\n\
            pos += 16;\n\
          } else {\n\
            result0 = null;\n\
            if (reportFailures === 0) {\n\
              matchFailed(\"\\\"@-gss-horizontal\\\"\");\n\
            }\n\
          }\n\
          if (result0 === null) {\n\
            if (input.substr(pos, 7) === \"@-gss-h\") {\n\
              result0 = \"@-gss-h\";\n\
              pos += 7;\n\
            } else {\n\
              result0 = null;\n\
              if (reportFailures === 0) {\n\
                matchFailed(\"\\\"@-gss-h\\\"\");\n\
              }\n\
            }\n\
            if (result0 === null) {\n\
              if (input.substr(pos, 2) === \"@h\") {\n\
                result0 = \"@h\";\n\
                pos += 2;\n\
              } else {\n\
                result0 = null;\n\
                if (reportFailures === 0) {\n\
                  matchFailed(\"\\\"@h\\\"\");\n\
                }\n\
              }\n\
            }\n\
          }\n\
        }\n\
        if (result0 !== null) {\n\
          result0 = (function(offset) {return 0;})(pos0);\n\
        }\n\
        if (result0 === null) {\n\
          pos = pos0;\n\
        }\n\
        if (result0 === null) {\n\
          pos0 = pos;\n\
          if (input.substr(pos, 9) === \"@vertical\") {\n\
            result0 = \"@vertical\";\n\
            pos += 9;\n\
          } else {\n\
            result0 = null;\n\
            if (reportFailures === 0) {\n\
              matchFailed(\"\\\"@vertical\\\"\");\n\
            }\n\
          }\n\
          if (result0 === null) {\n\
            if (input.substr(pos, 14) === \"@-gss-vertical\") {\n\
              result0 = \"@-gss-vertical\";\n\
              pos += 14;\n\
            } else {\n\
              result0 = null;\n\
              if (reportFailures === 0) {\n\
                matchFailed(\"\\\"@-gss-vertical\\\"\");\n\
              }\n\
            }\n\
            if (result0 === null) {\n\
              if (input.substr(pos, 7) === \"@-gss-v\") {\n\
                result0 = \"@-gss-v\";\n\
                pos += 7;\n\
              } else {\n\
                result0 = null;\n\
                if (reportFailures === 0) {\n\
                  matchFailed(\"\\\"@-gss-v\\\"\");\n\
                }\n\
              }\n\
              if (result0 === null) {\n\
                if (input.substr(pos, 2) === \"@v\") {\n\
                  result0 = \"@v\";\n\
                  pos += 2;\n\
                } else {\n\
                  result0 = null;\n\
                  if (reportFailures === 0) {\n\
                    matchFailed(\"\\\"@v\\\"\");\n\
                  }\n\
                }\n\
              }\n\
            }\n\
          }\n\
          if (result0 !== null) {\n\
            result0 = (function(offset) {return 1;})(pos0);\n\
          }\n\
          if (result0 === null) {\n\
            pos = pos0;\n\
          }\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_Options() {\n\
        var result0, result1;\n\
        var pos0;\n\
        \n\
        pos0 = pos;\n\
        result1 = parse_Option();\n\
        if (result1 !== null) {\n\
          result0 = [];\n\
          while (result1 !== null) {\n\
            result0.push(result1);\n\
            result1 = parse_Option();\n\
          }\n\
        } else {\n\
          result0 = null;\n\
        }\n\
        if (result0 !== null) {\n\
          result0 = (function(offset, os) {\n\
            var obj = {};\n\
            obj.chains = [];\n\
            for (var i = 0; i < os.length; i++) {          \n\
              // proccess chains\n\
              if (!!os[i].chain) {\n\
                obj.chains.push(os[i].chain);\n\
              }\n\
              // or just add option\n\
              else {\n\
                obj[os[i].key] = os[i].value;\n\
              }            \n\
            }\n\
            return obj;\n\
          })(pos0, result0);\n\
        }\n\
        if (result0 === null) {\n\
          pos = pos0;\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_Option() {\n\
        var result0, result1, result2, result3, result4;\n\
        var pos0, pos1;\n\
        \n\
        reportFailures++;\n\
        pos0 = pos;\n\
        pos1 = pos;\n\
        result0 = parse___();\n\
        if (result0 !== null) {\n\
          result1 = parse_Chain();\n\
          if (result1 !== null) {\n\
            result0 = [result0, result1];\n\
          } else {\n\
            result0 = null;\n\
            pos = pos1;\n\
          }\n\
        } else {\n\
          result0 = null;\n\
          pos = pos1;\n\
        }\n\
        if (result0 !== null) {\n\
          result0 = (function(offset, chain) { return chain; })(pos0, result0[1]);\n\
        }\n\
        if (result0 === null) {\n\
          pos = pos0;\n\
        }\n\
        if (result0 === null) {\n\
          pos0 = pos;\n\
          pos1 = pos;\n\
          result0 = parse___();\n\
          if (result0 !== null) {\n\
            result2 = parse_NameChars();\n\
            if (result2 !== null) {\n\
              result1 = [];\n\
              while (result2 !== null) {\n\
                result1.push(result2);\n\
                result2 = parse_NameChars();\n\
              }\n\
            } else {\n\
              result1 = null;\n\
            }\n\
            if (result1 !== null) {\n\
              if (input.charCodeAt(pos) === 40) {\n\
                result2 = \"(\";\n\
                pos++;\n\
              } else {\n\
                result2 = null;\n\
                if (reportFailures === 0) {\n\
                  matchFailed(\"\\\"(\\\"\");\n\
                }\n\
              }\n\
              if (result2 !== null) {\n\
                result4 = parse_OpionValueChars();\n\
                if (result4 !== null) {\n\
                  result3 = [];\n\
                  while (result4 !== null) {\n\
                    result3.push(result4);\n\
                    result4 = parse_OpionValueChars();\n\
                  }\n\
                } else {\n\
                  result3 = null;\n\
                }\n\
                if (result3 !== null) {\n\
                  if (input.charCodeAt(pos) === 41) {\n\
                    result4 = \")\";\n\
                    pos++;\n\
                  } else {\n\
                    result4 = null;\n\
                    if (reportFailures === 0) {\n\
                      matchFailed(\"\\\")\\\"\");\n\
                    }\n\
                  }\n\
                  if (result4 !== null) {\n\
                    result0 = [result0, result1, result2, result3, result4];\n\
                  } else {\n\
                    result0 = null;\n\
                    pos = pos1;\n\
                  }\n\
                } else {\n\
                  result0 = null;\n\
                  pos = pos1;\n\
                }\n\
              } else {\n\
                result0 = null;\n\
                pos = pos1;\n\
              }\n\
            } else {\n\
              result0 = null;\n\
              pos = pos1;\n\
            }\n\
          } else {\n\
            result0 = null;\n\
            pos = pos1;\n\
          }\n\
          if (result0 !== null) {\n\
            result0 = (function(offset, key, value) {return {key:key.join(''), value:value.join('')};})(pos0, result0[1], result0[3]);\n\
          }\n\
          if (result0 === null) {\n\
            pos = pos0;\n\
          }\n\
          if (result0 === null) {\n\
            pos0 = pos;\n\
            pos1 = pos;\n\
            result0 = parse___();\n\
            if (result0 !== null) {\n\
              result1 = parse_StrengthAndWeight();\n\
              if (result1 !== null) {\n\
                result0 = [result0, result1];\n\
              } else {\n\
                result0 = null;\n\
                pos = pos1;\n\
              }\n\
            } else {\n\
              result0 = null;\n\
              pos = pos1;\n\
            }\n\
            if (result0 !== null) {\n\
              result0 = (function(offset, sw) {return {key:\"sw\",value:sw}; })(pos0, result0[1]);\n\
            }\n\
            if (result0 === null) {\n\
              pos = pos0;\n\
            }\n\
          }\n\
        }\n\
        reportFailures--;\n\
        if (reportFailures === 0 && result0 === null) {\n\
          matchFailed(\"Option\");\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_OpionValueChars() {\n\
        var result0;\n\
        \n\
        if (/^[^>=<!)]/.test(input.charAt(pos))) {\n\
          result0 = input.charAt(pos);\n\
          pos++;\n\
        } else {\n\
          result0 = null;\n\
          if (reportFailures === 0) {\n\
            matchFailed(\"[^>=<!)]\");\n\
          }\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_Chain() {\n\
        var result0, result1, result2;\n\
        var pos0, pos1;\n\
        \n\
        reportFailures++;\n\
        pos0 = pos;\n\
        pos1 = pos;\n\
        if (input.substr(pos, 6) === \"chain-\") {\n\
          result0 = \"chain-\";\n\
          pos += 6;\n\
        } else {\n\
          result0 = null;\n\
          if (reportFailures === 0) {\n\
            matchFailed(\"\\\"chain-\\\"\");\n\
          }\n\
        }\n\
        if (result0 !== null) {\n\
          result2 = parse_NameChars();\n\
          if (result2 !== null) {\n\
            result1 = [];\n\
            while (result2 !== null) {\n\
              result1.push(result2);\n\
              result2 = parse_NameChars();\n\
            }\n\
          } else {\n\
            result1 = null;\n\
          }\n\
          if (result1 !== null) {\n\
            result2 = parse_ChainPredicate();\n\
            result2 = result2 !== null ? result2 : \"\";\n\
            if (result2 !== null) {\n\
              result0 = [result0, result1, result2];\n\
            } else {\n\
              result0 = null;\n\
              pos = pos1;\n\
            }\n\
          } else {\n\
            result0 = null;\n\
            pos = pos1;\n\
          }\n\
        } else {\n\
          result0 = null;\n\
          pos = pos1;\n\
        }\n\
        if (result0 !== null) {\n\
          result0 = (function(offset, prop, preds) { return {'chain':[prop.join(\"\"),preds]};})(pos0, result0[1], result0[2]);\n\
        }\n\
        if (result0 === null) {\n\
          pos = pos0;\n\
        }\n\
        reportFailures--;\n\
        if (reportFailures === 0 && result0 === null) {\n\
          matchFailed(\"Chain\");\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_ChainPredicate() {\n\
        var result0, result1, result2;\n\
        var pos0, pos1;\n\
        \n\
        reportFailures++;\n\
        pos0 = pos;\n\
        pos1 = pos;\n\
        if (input.charCodeAt(pos) === 40) {\n\
          result0 = \"(\";\n\
          pos++;\n\
        } else {\n\
          result0 = null;\n\
          if (reportFailures === 0) {\n\
            matchFailed(\"\\\"(\\\"\");\n\
          }\n\
        }\n\
        if (result0 !== null) {\n\
          result2 = parse_ChainPredicateItems();\n\
          if (result2 !== null) {\n\
            result1 = [];\n\
            while (result2 !== null) {\n\
              result1.push(result2);\n\
              result2 = parse_ChainPredicateItems();\n\
            }\n\
          } else {\n\
            result1 = null;\n\
          }\n\
          if (result1 !== null) {\n\
            if (input.charCodeAt(pos) === 41) {\n\
              result2 = \")\";\n\
              pos++;\n\
            } else {\n\
              result2 = null;\n\
              if (reportFailures === 0) {\n\
                matchFailed(\"\\\")\\\"\");\n\
              }\n\
            }\n\
            if (result2 !== null) {\n\
              result0 = [result0, result1, result2];\n\
            } else {\n\
              result0 = null;\n\
              pos = pos1;\n\
            }\n\
          } else {\n\
            result0 = null;\n\
            pos = pos1;\n\
          }\n\
        } else {\n\
          result0 = null;\n\
          pos = pos1;\n\
        }\n\
        if (result0 !== null) {\n\
          result0 = (function(offset, items) {\n\
            items.raw = \"\";\n\
            items.forEach( function (item){\n\
              items.raw += item.raw;\n\
            });\n\
            return items;\n\
          })(pos0, result0[1]);\n\
        }\n\
        if (result0 === null) {\n\
          pos = pos0;\n\
        }\n\
        if (result0 === null) {\n\
          pos0 = pos;\n\
          if (input.substr(pos, 2) === \"()\") {\n\
            result0 = \"()\";\n\
            pos += 2;\n\
          } else {\n\
            result0 = null;\n\
            if (reportFailures === 0) {\n\
              matchFailed(\"\\\"()\\\"\");\n\
            }\n\
          }\n\
          if (result0 !== null) {\n\
            result0 = (function(offset) {return {raw:\"\"};})(pos0);\n\
          }\n\
          if (result0 === null) {\n\
            pos = pos0;\n\
          }\n\
        }\n\
        reportFailures--;\n\
        if (reportFailures === 0 && result0 === null) {\n\
          matchFailed(\"ChainPredicate\");\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_ChainPredicateItems() {\n\
        var result0, result1, result2;\n\
        var pos0, pos1;\n\
        \n\
        pos0 = pos;\n\
        pos1 = pos;\n\
        result0 = parse_ChainPredicateItem();\n\
        if (result0 !== null) {\n\
          result1 = parse__();\n\
          result1 = result1 !== null ? result1 : \"\";\n\
          if (result1 !== null) {\n\
            if (input.charCodeAt(pos) === 44) {\n\
              result2 = \",\";\n\
              pos++;\n\
            } else {\n\
              result2 = null;\n\
              if (reportFailures === 0) {\n\
                matchFailed(\"\\\",\\\"\");\n\
              }\n\
            }\n\
            result2 = result2 !== null ? result2 : \"\";\n\
            if (result2 !== null) {\n\
              result0 = [result0, result1, result2];\n\
            } else {\n\
              result0 = null;\n\
              pos = pos1;\n\
            }\n\
          } else {\n\
            result0 = null;\n\
            pos = pos1;\n\
          }\n\
        } else {\n\
          result0 = null;\n\
          pos = pos1;\n\
        }\n\
        if (result0 !== null) {\n\
          result0 = (function(offset, item) {\n\
            item.raw = item.headEq + item.value + item.tailEq + item.s;\n\
            return item;\n\
          })(pos0, result0[0]);\n\
        }\n\
        if (result0 === null) {\n\
          pos = pos0;\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_ChainPredicateItem() {\n\
        var result0, result1, result2, result3, result4, result5, result6;\n\
        var pos0, pos1;\n\
        \n\
        pos0 = pos;\n\
        pos1 = pos;\n\
        result0 = parse_PredEq();\n\
        if (result0 !== null) {\n\
          result1 = parse__();\n\
          if (result1 !== null) {\n\
            result2 = parse_ChainPredVal();\n\
            result2 = result2 !== null ? result2 : \"\";\n\
            if (result2 !== null) {\n\
              result3 = parse__();\n\
              result3 = result3 !== null ? result3 : \"\";\n\
              if (result3 !== null) {\n\
                result4 = parse_PredEq();\n\
                result4 = result4 !== null ? result4 : \"\";\n\
                if (result4 !== null) {\n\
                  result5 = parse__();\n\
                  result5 = result5 !== null ? result5 : \"\";\n\
                  if (result5 !== null) {\n\
                    result6 = parse_StrengthAndWeight();\n\
                    result6 = result6 !== null ? result6 : \"\";\n\
                    if (result6 !== null) {\n\
                      result0 = [result0, result1, result2, result3, result4, result5, result6];\n\
                    } else {\n\
                      result0 = null;\n\
                      pos = pos1;\n\
                    }\n\
                  } else {\n\
                    result0 = null;\n\
                    pos = pos1;\n\
                  }\n\
                } else {\n\
                  result0 = null;\n\
                  pos = pos1;\n\
                }\n\
              } else {\n\
                result0 = null;\n\
                pos = pos1;\n\
              }\n\
            } else {\n\
              result0 = null;\n\
              pos = pos1;\n\
            }\n\
          } else {\n\
            result0 = null;\n\
            pos = pos1;\n\
          }\n\
        } else {\n\
          result0 = null;\n\
          pos = pos1;\n\
        }\n\
        if (result0 !== null) {\n\
          result0 = (function(offset, headEq, value, tailEq, s) {\n\
              return {headEq:p.join(headEq),value:p.join(value),tailEq:p.join(tailEq),s:s};})(pos0, result0[0], result0[2], result0[4], result0[6]);\n\
        }\n\
        if (result0 === null) {\n\
          pos = pos0;\n\
        }\n\
        if (result0 === null) {\n\
          pos0 = pos;\n\
          pos1 = pos;\n\
          result0 = parse_PredEq();\n\
          result0 = result0 !== null ? result0 : \"\";\n\
          if (result0 !== null) {\n\
            result1 = parse__();\n\
            result1 = result1 !== null ? result1 : \"\";\n\
            if (result1 !== null) {\n\
              result2 = parse_ChainPredVal();\n\
              if (result2 !== null) {\n\
                result3 = parse__();\n\
                result3 = result3 !== null ? result3 : \"\";\n\
                if (result3 !== null) {\n\
                  result4 = parse_PredEq();\n\
                  result4 = result4 !== null ? result4 : \"\";\n\
                  if (result4 !== null) {\n\
                    result5 = parse__();\n\
                    result5 = result5 !== null ? result5 : \"\";\n\
                    if (result5 !== null) {\n\
                      result6 = parse_StrengthAndWeight();\n\
                      result6 = result6 !== null ? result6 : \"\";\n\
                      if (result6 !== null) {\n\
                        result0 = [result0, result1, result2, result3, result4, result5, result6];\n\
                      } else {\n\
                        result0 = null;\n\
                        pos = pos1;\n\
                      }\n\
                    } else {\n\
                      result0 = null;\n\
                      pos = pos1;\n\
                    }\n\
                  } else {\n\
                    result0 = null;\n\
                    pos = pos1;\n\
                  }\n\
                } else {\n\
                  result0 = null;\n\
                  pos = pos1;\n\
                }\n\
              } else {\n\
                result0 = null;\n\
                pos = pos1;\n\
              }\n\
            } else {\n\
              result0 = null;\n\
              pos = pos1;\n\
            }\n\
          } else {\n\
            result0 = null;\n\
            pos = pos1;\n\
          }\n\
          if (result0 !== null) {\n\
            result0 = (function(offset, headEq, value, tailEq, s) {\n\
                return {headEq:p.join(headEq),value:p.join(value),tailEq:p.join(tailEq),s:s};})(pos0, result0[0], result0[2], result0[4], result0[6]);\n\
          }\n\
          if (result0 === null) {\n\
            pos = pos0;\n\
          }\n\
          if (result0 === null) {\n\
            pos0 = pos;\n\
            pos1 = pos;\n\
            result0 = parse_PredEq();\n\
            result0 = result0 !== null ? result0 : \"\";\n\
            if (result0 !== null) {\n\
              result1 = parse__();\n\
              result1 = result1 !== null ? result1 : \"\";\n\
              if (result1 !== null) {\n\
                result2 = parse_ChainPredVal();\n\
                result2 = result2 !== null ? result2 : \"\";\n\
                if (result2 !== null) {\n\
                  result3 = parse__();\n\
                  result3 = result3 !== null ? result3 : \"\";\n\
                  if (result3 !== null) {\n\
                    result4 = parse_PredEq();\n\
                    result4 = result4 !== null ? result4 : \"\";\n\
                    if (result4 !== null) {\n\
                      result5 = parse__();\n\
                      result5 = result5 !== null ? result5 : \"\";\n\
                      if (result5 !== null) {\n\
                        result6 = parse_StrengthAndWeight();\n\
                        if (result6 !== null) {\n\
                          result0 = [result0, result1, result2, result3, result4, result5, result6];\n\
                        } else {\n\
                          result0 = null;\n\
                          pos = pos1;\n\
                        }\n\
                      } else {\n\
                        result0 = null;\n\
                        pos = pos1;\n\
                      }\n\
                    } else {\n\
                      result0 = null;\n\
                      pos = pos1;\n\
                    }\n\
                  } else {\n\
                    result0 = null;\n\
                    pos = pos1;\n\
                  }\n\
                } else {\n\
                  result0 = null;\n\
                  pos = pos1;\n\
                }\n\
              } else {\n\
                result0 = null;\n\
                pos = pos1;\n\
              }\n\
            } else {\n\
              result0 = null;\n\
              pos = pos1;\n\
            }\n\
            if (result0 !== null) {\n\
              result0 = (function(offset, headEq, value, tailEq, s) {\n\
                  return {headEq:p.join(headEq),value:p.join(value),tailEq:p.join(tailEq),s:s};})(pos0, result0[0], result0[2], result0[4], result0[6]);\n\
            }\n\
            if (result0 === null) {\n\
              pos = pos0;\n\
            }\n\
          }\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_ChainPredVal() {\n\
        var result0, result1;\n\
        \n\
        if (/^[^>=<!) ]/.test(input.charAt(pos))) {\n\
          result1 = input.charAt(pos);\n\
          pos++;\n\
        } else {\n\
          result1 = null;\n\
          if (reportFailures === 0) {\n\
            matchFailed(\"[^>=<!) ]\");\n\
          }\n\
        }\n\
        if (result1 !== null) {\n\
          result0 = [];\n\
          while (result1 !== null) {\n\
            result0.push(result1);\n\
            if (/^[^>=<!) ]/.test(input.charAt(pos))) {\n\
              result1 = input.charAt(pos);\n\
              pos++;\n\
            } else {\n\
              result1 = null;\n\
              if (reportFailures === 0) {\n\
                matchFailed(\"[^>=<!) ]\");\n\
              }\n\
            }\n\
          }\n\
        } else {\n\
          result0 = null;\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_View() {\n\
        var result0, result1, result2, result3;\n\
        var pos0, pos1;\n\
        \n\
        reportFailures++;\n\
        pos0 = pos;\n\
        pos1 = pos;\n\
        if (input.charCodeAt(pos) === 91) {\n\
          result0 = \"[\";\n\
          pos++;\n\
        } else {\n\
          result0 = null;\n\
          if (reportFailures === 0) {\n\
            matchFailed(\"\\\"[\\\"\");\n\
          }\n\
        }\n\
        if (result0 !== null) {\n\
          result2 = parse_NameChars();\n\
          if (result2 !== null) {\n\
            result1 = [];\n\
            while (result2 !== null) {\n\
              result1.push(result2);\n\
              result2 = parse_NameChars();\n\
            }\n\
          } else {\n\
            result1 = null;\n\
          }\n\
          if (result1 !== null) {\n\
            result2 = parse_Predicate();\n\
            result2 = result2 !== null ? result2 : \"\";\n\
            if (result2 !== null) {\n\
              if (input.charCodeAt(pos) === 93) {\n\
                result3 = \"]\";\n\
                pos++;\n\
              } else {\n\
                result3 = null;\n\
                if (reportFailures === 0) {\n\
                  matchFailed(\"\\\"]\\\"\");\n\
                }\n\
              }\n\
              if (result3 !== null) {\n\
                result0 = [result0, result1, result2, result3];\n\
              } else {\n\
                result0 = null;\n\
                pos = pos1;\n\
              }\n\
            } else {\n\
              result0 = null;\n\
              pos = pos1;\n\
            }\n\
          } else {\n\
            result0 = null;\n\
            pos = pos1;\n\
          }\n\
        } else {\n\
          result0 = null;\n\
          pos = pos1;\n\
        }\n\
        if (result0 !== null) {\n\
          result0 = (function(offset, name, p) {return {view:name.join(\"\"),preds:p};})(pos0, result0[1], result0[2]);\n\
        }\n\
        if (result0 === null) {\n\
          pos = pos0;\n\
        }\n\
        if (result0 === null) {\n\
          pos0 = pos;\n\
          if (input.charCodeAt(pos) === 124) {\n\
            result0 = \"|\";\n\
            pos++;\n\
          } else {\n\
            result0 = null;\n\
            if (reportFailures === 0) {\n\
              matchFailed(\"\\\"|\\\"\");\n\
            }\n\
          }\n\
          if (result0 !== null) {\n\
            result0 = (function(offset) {return {view:\"|\"};})(pos0);\n\
          }\n\
          if (result0 === null) {\n\
            pos = pos0;\n\
          }\n\
        }\n\
        reportFailures--;\n\
        if (reportFailures === 0 && result0 === null) {\n\
          matchFailed(\"VFL Element\");\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_Predicate() {\n\
        var result0, result1, result2, result3, result4, result5, result6, result7;\n\
        var pos0, pos1, pos2;\n\
        \n\
        reportFailures++;\n\
        pos0 = pos;\n\
        pos1 = pos;\n\
        if (input.charCodeAt(pos) === 40) {\n\
          result0 = \"(\";\n\
          pos++;\n\
        } else {\n\
          result0 = null;\n\
          if (reportFailures === 0) {\n\
            matchFailed(\"\\\"(\\\"\");\n\
          }\n\
        }\n\
        if (result0 !== null) {\n\
          pos2 = pos;\n\
          result2 = parse_PredEq();\n\
          if (result2 !== null) {\n\
            result3 = parse_PredExpression();\n\
            if (result3 !== null) {\n\
              result4 = parse_StrengthAndWeight();\n\
              result4 = result4 !== null ? result4 : \"\";\n\
              if (result4 !== null) {\n\
                result5 = parse__();\n\
                result5 = result5 !== null ? result5 : \"\";\n\
                if (result5 !== null) {\n\
                  result6 = parse_PredSeperator();\n\
                  if (result6 !== null) {\n\
                    result7 = parse__();\n\
                    result7 = result7 !== null ? result7 : \"\";\n\
                    if (result7 !== null) {\n\
                      result2 = [result2, result3, result4, result5, result6, result7];\n\
                    } else {\n\
                      result2 = null;\n\
                      pos = pos2;\n\
                    }\n\
                  } else {\n\
                    result2 = null;\n\
                    pos = pos2;\n\
                  }\n\
                } else {\n\
                  result2 = null;\n\
                  pos = pos2;\n\
                }\n\
              } else {\n\
                result2 = null;\n\
                pos = pos2;\n\
              }\n\
            } else {\n\
              result2 = null;\n\
              pos = pos2;\n\
            }\n\
          } else {\n\
            result2 = null;\n\
            pos = pos2;\n\
          }\n\
          if (result2 !== null) {\n\
            result1 = [];\n\
            while (result2 !== null) {\n\
              result1.push(result2);\n\
              pos2 = pos;\n\
              result2 = parse_PredEq();\n\
              if (result2 !== null) {\n\
                result3 = parse_PredExpression();\n\
                if (result3 !== null) {\n\
                  result4 = parse_StrengthAndWeight();\n\
                  result4 = result4 !== null ? result4 : \"\";\n\
                  if (result4 !== null) {\n\
                    result5 = parse__();\n\
                    result5 = result5 !== null ? result5 : \"\";\n\
                    if (result5 !== null) {\n\
                      result6 = parse_PredSeperator();\n\
                      if (result6 !== null) {\n\
                        result7 = parse__();\n\
                        result7 = result7 !== null ? result7 : \"\";\n\
                        if (result7 !== null) {\n\
                          result2 = [result2, result3, result4, result5, result6, result7];\n\
                        } else {\n\
                          result2 = null;\n\
                          pos = pos2;\n\
                        }\n\
                      } else {\n\
                        result2 = null;\n\
                        pos = pos2;\n\
                      }\n\
                    } else {\n\
                      result2 = null;\n\
                      pos = pos2;\n\
                    }\n\
                  } else {\n\
                    result2 = null;\n\
                    pos = pos2;\n\
                  }\n\
                } else {\n\
                  result2 = null;\n\
                  pos = pos2;\n\
                }\n\
              } else {\n\
                result2 = null;\n\
                pos = pos2;\n\
              }\n\
            }\n\
          } else {\n\
            result1 = null;\n\
          }\n\
          if (result1 !== null) {\n\
            if (input.charCodeAt(pos) === 41) {\n\
              result2 = \")\";\n\
              pos++;\n\
            } else {\n\
              result2 = null;\n\
              if (reportFailures === 0) {\n\
                matchFailed(\"\\\")\\\"\");\n\
              }\n\
            }\n\
            if (result2 !== null) {\n\
              result0 = [result0, result1, result2];\n\
            } else {\n\
              result0 = null;\n\
              pos = pos1;\n\
            }\n\
          } else {\n\
            result0 = null;\n\
            pos = pos1;\n\
          }\n\
        } else {\n\
          result0 = null;\n\
          pos = pos1;\n\
        }\n\
        if (result0 !== null) {\n\
          result0 = (function(offset, preds) {return preds;})(pos0, result0[1]);\n\
        }\n\
        if (result0 === null) {\n\
          pos = pos0;\n\
        }\n\
        reportFailures--;\n\
        if (reportFailures === 0 && result0 === null) {\n\
          matchFailed(\"Predicate\");\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_PredExpression() {\n\
        var result0, result1;\n\
        \n\
        reportFailures++;\n\
        result1 = parse_PredOp();\n\
        if (result1 === null) {\n\
          result1 = parse_PredLiteral();\n\
          if (result1 === null) {\n\
            result1 = parse_PredVariable();\n\
            if (result1 === null) {\n\
              result1 = parse_PredViewVariable();\n\
              if (result1 === null) {\n\
                result1 = parse_PredView();\n\
              }\n\
            }\n\
          }\n\
        }\n\
        if (result1 !== null) {\n\
          result0 = [];\n\
          while (result1 !== null) {\n\
            result0.push(result1);\n\
            result1 = parse_PredOp();\n\
            if (result1 === null) {\n\
              result1 = parse_PredLiteral();\n\
              if (result1 === null) {\n\
                result1 = parse_PredVariable();\n\
                if (result1 === null) {\n\
                  result1 = parse_PredViewVariable();\n\
                  if (result1 === null) {\n\
                    result1 = parse_PredView();\n\
                  }\n\
                }\n\
              }\n\
            }\n\
          }\n\
        } else {\n\
          result0 = null;\n\
        }\n\
        reportFailures--;\n\
        if (reportFailures === 0 && result0 === null) {\n\
          matchFailed(\"Predicate Expression\");\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_PredEq() {\n\
        var result0, result1, result2;\n\
        var pos0, pos1, pos2;\n\
        \n\
        pos0 = pos;\n\
        pos1 = pos;\n\
        result0 = parse__();\n\
        result0 = result0 !== null ? result0 : \"\";\n\
        if (result0 !== null) {\n\
          if (input.substr(pos, 2) === \"==\") {\n\
            result1 = \"==\";\n\
            pos += 2;\n\
          } else {\n\
            result1 = null;\n\
            if (reportFailures === 0) {\n\
              matchFailed(\"\\\"==\\\"\");\n\
            }\n\
          }\n\
          if (result1 === null) {\n\
            if (input.substr(pos, 2) === \"<=\") {\n\
              result1 = \"<=\";\n\
              pos += 2;\n\
            } else {\n\
              result1 = null;\n\
              if (reportFailures === 0) {\n\
                matchFailed(\"\\\"<=\\\"\");\n\
              }\n\
            }\n\
            if (result1 === null) {\n\
              if (input.charCodeAt(pos) === 60) {\n\
                result1 = \"<\";\n\
                pos++;\n\
              } else {\n\
                result1 = null;\n\
                if (reportFailures === 0) {\n\
                  matchFailed(\"\\\"<\\\"\");\n\
                }\n\
              }\n\
              if (result1 === null) {\n\
                if (input.substr(pos, 2) === \">=\") {\n\
                  result1 = \">=\";\n\
                  pos += 2;\n\
                } else {\n\
                  result1 = null;\n\
                  if (reportFailures === 0) {\n\
                    matchFailed(\"\\\">=\\\"\");\n\
                  }\n\
                }\n\
                if (result1 === null) {\n\
                  if (input.charCodeAt(pos) === 62) {\n\
                    result1 = \">\";\n\
                    pos++;\n\
                  } else {\n\
                    result1 = null;\n\
                    if (reportFailures === 0) {\n\
                      matchFailed(\"\\\">\\\"\");\n\
                    }\n\
                  }\n\
                  if (result1 === null) {\n\
                    pos2 = pos;\n\
                    if (input.substr(pos, 2) === \"=<\") {\n\
                      result1 = \"=<\";\n\
                      pos += 2;\n\
                    } else {\n\
                      result1 = null;\n\
                      if (reportFailures === 0) {\n\
                        matchFailed(\"\\\"=<\\\"\");\n\
                      }\n\
                    }\n\
                    if (result1 !== null) {\n\
                      result1 = (function(offset) {return \"<=\";})(pos2);\n\
                    }\n\
                    if (result1 === null) {\n\
                      pos = pos2;\n\
                    }\n\
                    if (result1 === null) {\n\
                      pos2 = pos;\n\
                      if (input.substr(pos, 2) === \"=>\") {\n\
                        result1 = \"=>\";\n\
                        pos += 2;\n\
                      } else {\n\
                        result1 = null;\n\
                        if (reportFailures === 0) {\n\
                          matchFailed(\"\\\"=>\\\"\");\n\
                        }\n\
                      }\n\
                      if (result1 !== null) {\n\
                        result1 = (function(offset) {return \">=\";})(pos2);\n\
                      }\n\
                      if (result1 === null) {\n\
                        pos = pos2;\n\
                      }\n\
                    }\n\
                  }\n\
                }\n\
              }\n\
            }\n\
          }\n\
          if (result1 !== null) {\n\
            result2 = parse__();\n\
            result2 = result2 !== null ? result2 : \"\";\n\
            if (result2 !== null) {\n\
              result0 = [result0, result1, result2];\n\
            } else {\n\
              result0 = null;\n\
              pos = pos1;\n\
            }\n\
          } else {\n\
            result0 = null;\n\
            pos = pos1;\n\
          }\n\
        } else {\n\
          result0 = null;\n\
          pos = pos1;\n\
        }\n\
        if (result0 !== null) {\n\
          result0 = (function(offset, eq) {return eq;})(pos0, result0[1]);\n\
        }\n\
        if (result0 === null) {\n\
          pos = pos0;\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_PredOp() {\n\
        var result0, result1;\n\
        var pos0, pos1;\n\
        \n\
        pos0 = pos;\n\
        pos1 = pos;\n\
        if (/^[+\\-\\/*]/.test(input.charAt(pos))) {\n\
          result0 = input.charAt(pos);\n\
          pos++;\n\
        } else {\n\
          result0 = null;\n\
          if (reportFailures === 0) {\n\
            matchFailed(\"[+\\\\-\\\\/*]\");\n\
          }\n\
        }\n\
        if (result0 !== null) {\n\
          result1 = parse__();\n\
          result1 = result1 !== null ? result1 : \"\";\n\
          if (result1 !== null) {\n\
            result0 = [result0, result1];\n\
          } else {\n\
            result0 = null;\n\
            pos = pos1;\n\
          }\n\
        } else {\n\
          result0 = null;\n\
          pos = pos1;\n\
        }\n\
        if (result0 !== null) {\n\
          result0 = (function(offset, op) {return op;})(pos0, result0[0]);\n\
        }\n\
        if (result0 === null) {\n\
          pos = pos0;\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_PredView() {\n\
        var result0, result1;\n\
        var pos0, pos1;\n\
        \n\
        pos0 = pos;\n\
        pos1 = pos;\n\
        result1 = parse_NameChars();\n\
        if (result1 !== null) {\n\
          result0 = [];\n\
          while (result1 !== null) {\n\
            result0.push(result1);\n\
            result1 = parse_NameChars();\n\
          }\n\
        } else {\n\
          result0 = null;\n\
        }\n\
        if (result0 !== null) {\n\
          result1 = parse__();\n\
          result1 = result1 !== null ? result1 : \"\";\n\
          if (result1 !== null) {\n\
            result0 = [result0, result1];\n\
          } else {\n\
            result0 = null;\n\
            pos = pos1;\n\
          }\n\
        } else {\n\
          result0 = null;\n\
          pos = pos1;\n\
        }\n\
        if (result0 !== null) {\n\
          result0 = (function(offset, name) {return [\"view\",name.join(\"\")];})(pos0, result0[0]);\n\
        }\n\
        if (result0 === null) {\n\
          pos = pos0;\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_PredLiteral() {\n\
        var result0, result1;\n\
        var pos0, pos1;\n\
        \n\
        pos0 = pos;\n\
        pos1 = pos;\n\
        result1 = parse_Number();\n\
        if (result1 !== null) {\n\
          result0 = [];\n\
          while (result1 !== null) {\n\
            result0.push(result1);\n\
            result1 = parse_Number();\n\
          }\n\
        } else {\n\
          result0 = null;\n\
        }\n\
        if (result0 !== null) {\n\
          result1 = parse__();\n\
          result1 = result1 !== null ? result1 : \"\";\n\
          if (result1 !== null) {\n\
            result0 = [result0, result1];\n\
          } else {\n\
            result0 = null;\n\
            pos = pos1;\n\
          }\n\
        } else {\n\
          result0 = null;\n\
          pos = pos1;\n\
        }\n\
        if (result0 !== null) {\n\
          result0 = (function(offset, n) {return n.join(\"\");})(pos0, result0[0]);\n\
        }\n\
        if (result0 === null) {\n\
          pos = pos0;\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_PredVariable() {\n\
        var result0, result1, result2, result3;\n\
        var pos0, pos1;\n\
        \n\
        pos0 = pos;\n\
        pos1 = pos;\n\
        if (input.charCodeAt(pos) === 91) {\n\
          result0 = \"[\";\n\
          pos++;\n\
        } else {\n\
          result0 = null;\n\
          if (reportFailures === 0) {\n\
            matchFailed(\"\\\"[\\\"\");\n\
          }\n\
        }\n\
        if (result0 !== null) {\n\
          result2 = parse_NameChars();\n\
          if (result2 !== null) {\n\
            result1 = [];\n\
            while (result2 !== null) {\n\
              result1.push(result2);\n\
              result2 = parse_NameChars();\n\
            }\n\
          } else {\n\
            result1 = null;\n\
          }\n\
          if (result1 !== null) {\n\
            if (input.charCodeAt(pos) === 93) {\n\
              result2 = \"]\";\n\
              pos++;\n\
            } else {\n\
              result2 = null;\n\
              if (reportFailures === 0) {\n\
                matchFailed(\"\\\"]\\\"\");\n\
              }\n\
            }\n\
            if (result2 !== null) {\n\
              result3 = parse__();\n\
              result3 = result3 !== null ? result3 : \"\";\n\
              if (result3 !== null) {\n\
                result0 = [result0, result1, result2, result3];\n\
              } else {\n\
                result0 = null;\n\
                pos = pos1;\n\
              }\n\
            } else {\n\
              result0 = null;\n\
              pos = pos1;\n\
            }\n\
          } else {\n\
            result0 = null;\n\
            pos = pos1;\n\
          }\n\
        } else {\n\
          result0 = null;\n\
          pos = pos1;\n\
        }\n\
        if (result0 !== null) {\n\
          result0 = (function(offset, name) {return \"[\" + name.join(\"\") + \"]\";})(pos0, result0[1]);\n\
        }\n\
        if (result0 === null) {\n\
          pos = pos0;\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_PredViewVariable() {\n\
        var result0, result1, result2, result3, result4;\n\
        var pos0, pos1;\n\
        \n\
        pos0 = pos;\n\
        pos1 = pos;\n\
        result1 = parse_NameChars();\n\
        if (result1 !== null) {\n\
          result0 = [];\n\
          while (result1 !== null) {\n\
            result0.push(result1);\n\
            result1 = parse_NameChars();\n\
          }\n\
        } else {\n\
          result0 = null;\n\
        }\n\
        if (result0 !== null) {\n\
          if (input.charCodeAt(pos) === 91) {\n\
            result1 = \"[\";\n\
            pos++;\n\
          } else {\n\
            result1 = null;\n\
            if (reportFailures === 0) {\n\
              matchFailed(\"\\\"[\\\"\");\n\
            }\n\
          }\n\
          if (result1 !== null) {\n\
            result3 = parse_NameChars();\n\
            if (result3 !== null) {\n\
              result2 = [];\n\
              while (result3 !== null) {\n\
                result2.push(result3);\n\
                result3 = parse_NameChars();\n\
              }\n\
            } else {\n\
              result2 = null;\n\
            }\n\
            if (result2 !== null) {\n\
              if (input.charCodeAt(pos) === 93) {\n\
                result3 = \"]\";\n\
                pos++;\n\
              } else {\n\
                result3 = null;\n\
                if (reportFailures === 0) {\n\
                  matchFailed(\"\\\"]\\\"\");\n\
                }\n\
              }\n\
              if (result3 !== null) {\n\
                result4 = parse__();\n\
                result4 = result4 !== null ? result4 : \"\";\n\
                if (result4 !== null) {\n\
                  result0 = [result0, result1, result2, result3, result4];\n\
                } else {\n\
                  result0 = null;\n\
                  pos = pos1;\n\
                }\n\
              } else {\n\
                result0 = null;\n\
                pos = pos1;\n\
              }\n\
            } else {\n\
              result0 = null;\n\
              pos = pos1;\n\
            }\n\
          } else {\n\
            result0 = null;\n\
            pos = pos1;\n\
          }\n\
        } else {\n\
          result0 = null;\n\
          pos = pos1;\n\
        }\n\
        if (result0 !== null) {\n\
          result0 = (function(offset, view, prop) {return view.join(\"\") + \"[\" + prop.join(\"\") + \"]\";})(pos0, result0[0], result0[2]);\n\
        }\n\
        if (result0 === null) {\n\
          pos = pos0;\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_PredSeperator() {\n\
        var result0;\n\
        var pos0;\n\
        \n\
        pos0 = pos;\n\
        if (input.charCodeAt(pos) === 44) {\n\
          result0 = \",\";\n\
          pos++;\n\
        } else {\n\
          result0 = null;\n\
          if (reportFailures === 0) {\n\
            matchFailed(\"\\\",\\\"\");\n\
          }\n\
        }\n\
        result0 = result0 !== null ? result0 : \"\";\n\
        if (result0 !== null) {\n\
          result0 = (function(offset) {return \"\";})(pos0);\n\
        }\n\
        if (result0 === null) {\n\
          pos = pos0;\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_Connection() {\n\
        var result0, result1, result2;\n\
        var pos0, pos1;\n\
        \n\
        reportFailures++;\n\
        pos0 = pos;\n\
        pos1 = pos;\n\
        if (input.charCodeAt(pos) === 45) {\n\
          result0 = \"-\";\n\
          pos++;\n\
        } else {\n\
          result0 = null;\n\
          if (reportFailures === 0) {\n\
            matchFailed(\"\\\"-\\\"\");\n\
          }\n\
        }\n\
        if (result0 !== null) {\n\
          result2 = parse_GapChars();\n\
          if (result2 !== null) {\n\
            result1 = [];\n\
            while (result2 !== null) {\n\
              result1.push(result2);\n\
              result2 = parse_GapChars();\n\
            }\n\
          } else {\n\
            result1 = null;\n\
          }\n\
          if (result1 !== null) {\n\
            if (input.charCodeAt(pos) === 45) {\n\
              result2 = \"-\";\n\
              pos++;\n\
            } else {\n\
              result2 = null;\n\
              if (reportFailures === 0) {\n\
                matchFailed(\"\\\"-\\\"\");\n\
              }\n\
            }\n\
            if (result2 !== null) {\n\
              result0 = [result0, result1, result2];\n\
            } else {\n\
              result0 = null;\n\
              pos = pos1;\n\
            }\n\
          } else {\n\
            result0 = null;\n\
            pos = pos1;\n\
          }\n\
        } else {\n\
          result0 = null;\n\
          pos = pos1;\n\
        }\n\
        if (result0 !== null) {\n\
          result0 = (function(offset, gap) {return {op:\"==\",gap:gap.join(\"\")};})(pos0, result0[1]);\n\
        }\n\
        if (result0 === null) {\n\
          pos = pos0;\n\
        }\n\
        if (result0 === null) {\n\
          pos0 = pos;\n\
          if (input.charCodeAt(pos) === 45) {\n\
            result0 = \"-\";\n\
            pos++;\n\
          } else {\n\
            result0 = null;\n\
            if (reportFailures === 0) {\n\
              matchFailed(\"\\\"-\\\"\");\n\
            }\n\
          }\n\
          if (result0 !== null) {\n\
            result0 = (function(offset) {return {op:\"==\",gap:\"__STANDARD__\"};})(pos0);\n\
          }\n\
          if (result0 === null) {\n\
            pos = pos0;\n\
          }\n\
          if (result0 === null) {\n\
            pos0 = pos;\n\
            pos1 = pos;\n\
            if (input.charCodeAt(pos) === 126) {\n\
              result0 = \"~\";\n\
              pos++;\n\
            } else {\n\
              result0 = null;\n\
              if (reportFailures === 0) {\n\
                matchFailed(\"\\\"~\\\"\");\n\
              }\n\
            }\n\
            if (result0 !== null) {\n\
              result2 = parse_GapChars();\n\
              if (result2 !== null) {\n\
                result1 = [];\n\
                while (result2 !== null) {\n\
                  result1.push(result2);\n\
                  result2 = parse_GapChars();\n\
                }\n\
              } else {\n\
                result1 = null;\n\
              }\n\
              if (result1 !== null) {\n\
                if (input.charCodeAt(pos) === 126) {\n\
                  result2 = \"~\";\n\
                  pos++;\n\
                } else {\n\
                  result2 = null;\n\
                  if (reportFailures === 0) {\n\
                    matchFailed(\"\\\"~\\\"\");\n\
                  }\n\
                }\n\
                if (result2 !== null) {\n\
                  result0 = [result0, result1, result2];\n\
                } else {\n\
                  result0 = null;\n\
                  pos = pos1;\n\
                }\n\
              } else {\n\
                result0 = null;\n\
                pos = pos1;\n\
              }\n\
            } else {\n\
              result0 = null;\n\
              pos = pos1;\n\
            }\n\
            if (result0 !== null) {\n\
              result0 = (function(offset, gap) {return {op:\"<=\",gap:gap.join(\"\")};})(pos0, result0[1]);\n\
            }\n\
            if (result0 === null) {\n\
              pos = pos0;\n\
            }\n\
            if (result0 === null) {\n\
              pos0 = pos;\n\
              pos1 = pos;\n\
              if (input.charCodeAt(pos) === 126) {\n\
                result0 = \"~\";\n\
                pos++;\n\
              } else {\n\
                result0 = null;\n\
                if (reportFailures === 0) {\n\
                  matchFailed(\"\\\"~\\\"\");\n\
                }\n\
              }\n\
              if (result0 !== null) {\n\
                if (input.charCodeAt(pos) === 45) {\n\
                  result1 = \"-\";\n\
                  pos++;\n\
                } else {\n\
                  result1 = null;\n\
                  if (reportFailures === 0) {\n\
                    matchFailed(\"\\\"-\\\"\");\n\
                  }\n\
                }\n\
                if (result1 !== null) {\n\
                  if (input.charCodeAt(pos) === 126) {\n\
                    result2 = \"~\";\n\
                    pos++;\n\
                  } else {\n\
                    result2 = null;\n\
                    if (reportFailures === 0) {\n\
                      matchFailed(\"\\\"~\\\"\");\n\
                    }\n\
                  }\n\
                  if (result2 !== null) {\n\
                    result0 = [result0, result1, result2];\n\
                  } else {\n\
                    result0 = null;\n\
                    pos = pos1;\n\
                  }\n\
                } else {\n\
                  result0 = null;\n\
                  pos = pos1;\n\
                }\n\
              } else {\n\
                result0 = null;\n\
                pos = pos1;\n\
              }\n\
              if (result0 !== null) {\n\
                result0 = (function(offset) {return {op:\"<=\",gap:\"__STANDARD__\"};})(pos0);\n\
              }\n\
              if (result0 === null) {\n\
                pos = pos0;\n\
              }\n\
              if (result0 === null) {\n\
                pos0 = pos;\n\
                if (input.charCodeAt(pos) === 126) {\n\
                  result0 = \"~\";\n\
                  pos++;\n\
                } else {\n\
                  result0 = null;\n\
                  if (reportFailures === 0) {\n\
                    matchFailed(\"\\\"~\\\"\");\n\
                  }\n\
                }\n\
                if (result0 !== null) {\n\
                  result0 = (function(offset) {return {op:\"<=\"};})(pos0);\n\
                }\n\
                if (result0 === null) {\n\
                  pos = pos0;\n\
                }\n\
                if (result0 === null) {\n\
                  pos0 = pos;\n\
                  result0 = \"\";\n\
                  if (result0 !== null) {\n\
                    result0 = (function(offset) {return {op:\"==\"};})(pos0);\n\
                  }\n\
                  if (result0 === null) {\n\
                    pos = pos0;\n\
                  }\n\
                }\n\
              }\n\
            }\n\
          }\n\
        }\n\
        reportFailures--;\n\
        if (reportFailures === 0 && result0 === null) {\n\
          matchFailed(\"VFL Connection\");\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_GapChars() {\n\
        var result0;\n\
        \n\
        reportFailures++;\n\
        if (/^[a-zA-Z0-9#._$]/.test(input.charAt(pos))) {\n\
          result0 = input.charAt(pos);\n\
          pos++;\n\
        } else {\n\
          result0 = null;\n\
          if (reportFailures === 0) {\n\
            matchFailed(\"[a-zA-Z0-9#._$]\");\n\
          }\n\
        }\n\
        reportFailures--;\n\
        if (reportFailures === 0 && result0 === null) {\n\
          matchFailed(\"VFL Connection Gap\");\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_StrengthAndWeight() {\n\
        var result0, result1, result2, result3;\n\
        var pos0, pos1;\n\
        \n\
        reportFailures++;\n\
        pos0 = pos;\n\
        pos1 = pos;\n\
        if (input.charCodeAt(pos) === 33) {\n\
          result0 = \"!\";\n\
          pos++;\n\
        } else {\n\
          result0 = null;\n\
          if (reportFailures === 0) {\n\
            matchFailed(\"\\\"!\\\"\");\n\
          }\n\
        }\n\
        if (result0 !== null) {\n\
          if (/^[a-zA-Z]/.test(input.charAt(pos))) {\n\
            result2 = input.charAt(pos);\n\
            pos++;\n\
          } else {\n\
            result2 = null;\n\
            if (reportFailures === 0) {\n\
              matchFailed(\"[a-zA-Z]\");\n\
            }\n\
          }\n\
          if (result2 !== null) {\n\
            result1 = [];\n\
            while (result2 !== null) {\n\
              result1.push(result2);\n\
              if (/^[a-zA-Z]/.test(input.charAt(pos))) {\n\
                result2 = input.charAt(pos);\n\
                pos++;\n\
              } else {\n\
                result2 = null;\n\
                if (reportFailures === 0) {\n\
                  matchFailed(\"[a-zA-Z]\");\n\
                }\n\
              }\n\
            }\n\
          } else {\n\
            result1 = null;\n\
          }\n\
          result1 = result1 !== null ? result1 : \"\";\n\
          if (result1 !== null) {\n\
            if (/^[0-9]/.test(input.charAt(pos))) {\n\
              result3 = input.charAt(pos);\n\
              pos++;\n\
            } else {\n\
              result3 = null;\n\
              if (reportFailures === 0) {\n\
                matchFailed(\"[0-9]\");\n\
              }\n\
            }\n\
            if (result3 !== null) {\n\
              result2 = [];\n\
              while (result3 !== null) {\n\
                result2.push(result3);\n\
                if (/^[0-9]/.test(input.charAt(pos))) {\n\
                  result3 = input.charAt(pos);\n\
                  pos++;\n\
                } else {\n\
                  result3 = null;\n\
                  if (reportFailures === 0) {\n\
                    matchFailed(\"[0-9]\");\n\
                  }\n\
                }\n\
              }\n\
            } else {\n\
              result2 = null;\n\
            }\n\
            result2 = result2 !== null ? result2 : \"\";\n\
            if (result2 !== null) {\n\
              result0 = [result0, result1, result2];\n\
            } else {\n\
              result0 = null;\n\
              pos = pos1;\n\
            }\n\
          } else {\n\
            result0 = null;\n\
            pos = pos1;\n\
          }\n\
        } else {\n\
          result0 = null;\n\
          pos = pos1;\n\
        }\n\
        if (result0 !== null) {\n\
          result0 = (function(offset, s, w) { \n\
            var val;\n\
            val = \"!\" + p.join(s) + p.join(w);\n\
            return val.trim();\n\
          })(pos0, result0[1], result0[2]);\n\
        }\n\
        if (result0 === null) {\n\
          pos = pos0;\n\
        }\n\
        if (result0 === null) {\n\
          pos0 = pos;\n\
          pos1 = pos;\n\
          if (input.charCodeAt(pos) === 33) {\n\
            result0 = \"!\";\n\
            pos++;\n\
          } else {\n\
            result0 = null;\n\
            if (reportFailures === 0) {\n\
              matchFailed(\"\\\"!\\\"\");\n\
            }\n\
          }\n\
          if (result0 !== null) {\n\
            if (input.length > pos) {\n\
              result1 = input.charAt(pos);\n\
              pos++;\n\
            } else {\n\
              result1 = null;\n\
              if (reportFailures === 0) {\n\
                matchFailed(\"any character\");\n\
              }\n\
            }\n\
            result1 = result1 !== null ? result1 : \"\";\n\
            if (result1 !== null) {\n\
              result0 = [result0, result1];\n\
            } else {\n\
              result0 = null;\n\
              pos = pos1;\n\
            }\n\
          } else {\n\
            result0 = null;\n\
            pos = pos1;\n\
          }\n\
          if (result0 !== null) {\n\
            result0 = (function(offset) {return parser.error(\"Invalid Strength or Weight\",line,column);})(pos0);\n\
          }\n\
          if (result0 === null) {\n\
            pos = pos0;\n\
          }\n\
        }\n\
        reportFailures--;\n\
        if (reportFailures === 0 && result0 === null) {\n\
          matchFailed(\"Strength / Weight\");\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_Strength() {\n\
        var result0;\n\
        var pos0;\n\
        \n\
        pos0 = pos;\n\
        if (input.substr(pos, 7) === \"require\") {\n\
          result0 = \"require\";\n\
          pos += 7;\n\
        } else {\n\
          result0 = null;\n\
          if (reportFailures === 0) {\n\
            matchFailed(\"\\\"require\\\"\");\n\
          }\n\
        }\n\
        if (result0 === null) {\n\
          if (input.substr(pos, 7) === \"REQUIRE\") {\n\
            result0 = \"REQUIRE\";\n\
            pos += 7;\n\
          } else {\n\
            result0 = null;\n\
            if (reportFailures === 0) {\n\
              matchFailed(\"\\\"REQUIRE\\\"\");\n\
            }\n\
          }\n\
          if (result0 === null) {\n\
            if (input.substr(pos, 7) === \"Require\") {\n\
              result0 = \"Require\";\n\
              pos += 7;\n\
            } else {\n\
              result0 = null;\n\
              if (reportFailures === 0) {\n\
                matchFailed(\"\\\"Require\\\"\");\n\
              }\n\
            }\n\
          }\n\
        }\n\
        if (result0 !== null) {\n\
          result0 = (function(offset) {return \"require\";})(pos0);\n\
        }\n\
        if (result0 === null) {\n\
          pos = pos0;\n\
        }\n\
        if (result0 === null) {\n\
          pos0 = pos;\n\
          if (input.substr(pos, 6) === \"strong\") {\n\
            result0 = \"strong\";\n\
            pos += 6;\n\
          } else {\n\
            result0 = null;\n\
            if (reportFailures === 0) {\n\
              matchFailed(\"\\\"strong\\\"\");\n\
            }\n\
          }\n\
          if (result0 === null) {\n\
            if (input.substr(pos, 6) === \"STRONG\") {\n\
              result0 = \"STRONG\";\n\
              pos += 6;\n\
            } else {\n\
              result0 = null;\n\
              if (reportFailures === 0) {\n\
                matchFailed(\"\\\"STRONG\\\"\");\n\
              }\n\
            }\n\
            if (result0 === null) {\n\
              if (input.substr(pos, 6) === \"Strong\") {\n\
                result0 = \"Strong\";\n\
                pos += 6;\n\
              } else {\n\
                result0 = null;\n\
                if (reportFailures === 0) {\n\
                  matchFailed(\"\\\"Strong\\\"\");\n\
                }\n\
              }\n\
            }\n\
          }\n\
          if (result0 !== null) {\n\
            result0 = (function(offset) {return \"strong\";})(pos0);\n\
          }\n\
          if (result0 === null) {\n\
            pos = pos0;\n\
          }\n\
          if (result0 === null) {\n\
            pos0 = pos;\n\
            if (input.substr(pos, 6) === \"medium\") {\n\
              result0 = \"medium\";\n\
              pos += 6;\n\
            } else {\n\
              result0 = null;\n\
              if (reportFailures === 0) {\n\
                matchFailed(\"\\\"medium\\\"\");\n\
              }\n\
            }\n\
            if (result0 === null) {\n\
              if (input.substr(pos, 6) === \"MEDIUM\") {\n\
                result0 = \"MEDIUM\";\n\
                pos += 6;\n\
              } else {\n\
                result0 = null;\n\
                if (reportFailures === 0) {\n\
                  matchFailed(\"\\\"MEDIUM\\\"\");\n\
                }\n\
              }\n\
              if (result0 === null) {\n\
                if (input.substr(pos, 6) === \"Medium\") {\n\
                  result0 = \"Medium\";\n\
                  pos += 6;\n\
                } else {\n\
                  result0 = null;\n\
                  if (reportFailures === 0) {\n\
                    matchFailed(\"\\\"Medium\\\"\");\n\
                  }\n\
                }\n\
              }\n\
            }\n\
            if (result0 !== null) {\n\
              result0 = (function(offset) {return \"medium\";})(pos0);\n\
            }\n\
            if (result0 === null) {\n\
              pos = pos0;\n\
            }\n\
            if (result0 === null) {\n\
              pos0 = pos;\n\
              if (input.substr(pos, 4) === \"weak\") {\n\
                result0 = \"weak\";\n\
                pos += 4;\n\
              } else {\n\
                result0 = null;\n\
                if (reportFailures === 0) {\n\
                  matchFailed(\"\\\"weak\\\"\");\n\
                }\n\
              }\n\
              if (result0 === null) {\n\
                if (input.substr(pos, 4) === \"WEAK\") {\n\
                  result0 = \"WEAK\";\n\
                  pos += 4;\n\
                } else {\n\
                  result0 = null;\n\
                  if (reportFailures === 0) {\n\
                    matchFailed(\"\\\"WEAK\\\"\");\n\
                  }\n\
                }\n\
                if (result0 === null) {\n\
                  if (input.substr(pos, 4) === \"Weak\") {\n\
                    result0 = \"Weak\";\n\
                    pos += 4;\n\
                  } else {\n\
                    result0 = null;\n\
                    if (reportFailures === 0) {\n\
                      matchFailed(\"\\\"Weak\\\"\");\n\
                    }\n\
                  }\n\
                }\n\
              }\n\
              if (result0 !== null) {\n\
                result0 = (function(offset) {return \"weak\";})(pos0);\n\
              }\n\
              if (result0 === null) {\n\
                pos = pos0;\n\
              }\n\
              if (result0 === null) {\n\
                pos0 = pos;\n\
                if (input.substr(pos, 8) === \"required\") {\n\
                  result0 = \"required\";\n\
                  pos += 8;\n\
                } else {\n\
                  result0 = null;\n\
                  if (reportFailures === 0) {\n\
                    matchFailed(\"\\\"required\\\"\");\n\
                  }\n\
                }\n\
                if (result0 === null) {\n\
                  if (input.substr(pos, 8) === \"REQUIRED\") {\n\
                    result0 = \"REQUIRED\";\n\
                    pos += 8;\n\
                  } else {\n\
                    result0 = null;\n\
                    if (reportFailures === 0) {\n\
                      matchFailed(\"\\\"REQUIRED\\\"\");\n\
                    }\n\
                  }\n\
                  if (result0 === null) {\n\
                    if (input.substr(pos, 8) === \"Required\") {\n\
                      result0 = \"Required\";\n\
                      pos += 8;\n\
                    } else {\n\
                      result0 = null;\n\
                      if (reportFailures === 0) {\n\
                        matchFailed(\"\\\"Required\\\"\");\n\
                      }\n\
                    }\n\
                  }\n\
                }\n\
                if (result0 !== null) {\n\
                  result0 = (function(offset) {return \"require\";})(pos0);\n\
                }\n\
                if (result0 === null) {\n\
                  pos = pos0;\n\
                }\n\
              }\n\
            }\n\
          }\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_NameChars() {\n\
        var result0;\n\
        \n\
        if (/^[a-zA-Z0-9#.\\-_$:\"\"]/.test(input.charAt(pos))) {\n\
          result0 = input.charAt(pos);\n\
          pos++;\n\
        } else {\n\
          result0 = null;\n\
          if (reportFailures === 0) {\n\
            matchFailed(\"[a-zA-Z0-9#.\\\\-_$:\\\"\\\"]\");\n\
          }\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_NameCharsWithSpace() {\n\
        var result0;\n\
        \n\
        result0 = parse_NameChars();\n\
        if (result0 === null) {\n\
          if (input.charCodeAt(pos) === 32) {\n\
            result0 = \" \";\n\
            pos++;\n\
          } else {\n\
            result0 = null;\n\
            if (reportFailures === 0) {\n\
              matchFailed(\"\\\" \\\"\");\n\
            }\n\
          }\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_Literal() {\n\
        var result0;\n\
        var pos0;\n\
        \n\
        pos0 = pos;\n\
        result0 = parse_Number();\n\
        if (result0 !== null) {\n\
          result0 = (function(offset, val) {\n\
            return [ \"number\",\n\
              val\n\
            ];\n\
          })(pos0, result0);\n\
        }\n\
        if (result0 === null) {\n\
          pos = pos0;\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_Number() {\n\
        var result0;\n\
        \n\
        result0 = parse_Real();\n\
        if (result0 === null) {\n\
          result0 = parse_Integer();\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_Integer() {\n\
        var result0, result1;\n\
        var pos0;\n\
        \n\
        pos0 = pos;\n\
        if (/^[0-9]/.test(input.charAt(pos))) {\n\
          result1 = input.charAt(pos);\n\
          pos++;\n\
        } else {\n\
          result1 = null;\n\
          if (reportFailures === 0) {\n\
            matchFailed(\"[0-9]\");\n\
          }\n\
        }\n\
        if (result1 !== null) {\n\
          result0 = [];\n\
          while (result1 !== null) {\n\
            result0.push(result1);\n\
            if (/^[0-9]/.test(input.charAt(pos))) {\n\
              result1 = input.charAt(pos);\n\
              pos++;\n\
            } else {\n\
              result1 = null;\n\
              if (reportFailures === 0) {\n\
                matchFailed(\"[0-9]\");\n\
              }\n\
            }\n\
          }\n\
        } else {\n\
          result0 = null;\n\
        }\n\
        if (result0 !== null) {\n\
          result0 = (function(offset, digits) {\n\
            return parseInt(digits.join(\"\"), 10);\n\
          })(pos0, result0);\n\
        }\n\
        if (result0 === null) {\n\
          pos = pos0;\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_Real() {\n\
        var result0, result1, result2;\n\
        var pos0, pos1;\n\
        \n\
        pos0 = pos;\n\
        pos1 = pos;\n\
        result0 = parse_Integer();\n\
        if (result0 !== null) {\n\
          if (input.charCodeAt(pos) === 46) {\n\
            result1 = \".\";\n\
            pos++;\n\
          } else {\n\
            result1 = null;\n\
            if (reportFailures === 0) {\n\
              matchFailed(\"\\\".\\\"\");\n\
            }\n\
          }\n\
          if (result1 !== null) {\n\
            result2 = parse_Integer();\n\
            if (result2 !== null) {\n\
              result0 = [result0, result1, result2];\n\
            } else {\n\
              result0 = null;\n\
              pos = pos1;\n\
            }\n\
          } else {\n\
            result0 = null;\n\
            pos = pos1;\n\
          }\n\
        } else {\n\
          result0 = null;\n\
          pos = pos1;\n\
        }\n\
        if (result0 !== null) {\n\
          result0 = (function(offset, digits) {\n\
            return parseFloat(digits.join(\"\"));\n\
          })(pos0, result0);\n\
        }\n\
        if (result0 === null) {\n\
          pos = pos0;\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_SignedInteger() {\n\
        var result0, result1, result2;\n\
        var pos0;\n\
        \n\
        pos0 = pos;\n\
        if (/^[\\-+]/.test(input.charAt(pos))) {\n\
          result0 = input.charAt(pos);\n\
          pos++;\n\
        } else {\n\
          result0 = null;\n\
          if (reportFailures === 0) {\n\
            matchFailed(\"[\\\\-+]\");\n\
          }\n\
        }\n\
        result0 = result0 !== null ? result0 : \"\";\n\
        if (result0 !== null) {\n\
          if (/^[0-9]/.test(input.charAt(pos))) {\n\
            result2 = input.charAt(pos);\n\
            pos++;\n\
          } else {\n\
            result2 = null;\n\
            if (reportFailures === 0) {\n\
              matchFailed(\"[0-9]\");\n\
            }\n\
          }\n\
          if (result2 !== null) {\n\
            result1 = [];\n\
            while (result2 !== null) {\n\
              result1.push(result2);\n\
              if (/^[0-9]/.test(input.charAt(pos))) {\n\
                result2 = input.charAt(pos);\n\
                pos++;\n\
              } else {\n\
                result2 = null;\n\
                if (reportFailures === 0) {\n\
                  matchFailed(\"[0-9]\");\n\
                }\n\
              }\n\
            }\n\
          } else {\n\
            result1 = null;\n\
          }\n\
          if (result1 !== null) {\n\
            result0 = [result0, result1];\n\
          } else {\n\
            result0 = null;\n\
            pos = pos0;\n\
          }\n\
        } else {\n\
          result0 = null;\n\
          pos = pos0;\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_SourceCharacter() {\n\
        var result0;\n\
        \n\
        if (input.length > pos) {\n\
          result0 = input.charAt(pos);\n\
          pos++;\n\
        } else {\n\
          result0 = null;\n\
          if (reportFailures === 0) {\n\
            matchFailed(\"any character\");\n\
          }\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_WhiteSpace() {\n\
        var result0;\n\
        \n\
        reportFailures++;\n\
        if (/^[\\t\\x0B\\f \\xA0\\uFEFF]/.test(input.charAt(pos))) {\n\
          result0 = input.charAt(pos);\n\
          pos++;\n\
        } else {\n\
          result0 = null;\n\
          if (reportFailures === 0) {\n\
            matchFailed(\"[\\\\t\\\\x0B\\\\f \\\\xA0\\\\uFEFF]\");\n\
          }\n\
        }\n\
        reportFailures--;\n\
        if (reportFailures === 0 && result0 === null) {\n\
          matchFailed(\"whitespace\");\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_LineTerminator() {\n\
        var result0;\n\
        \n\
        if (/^[\\n\
\\r\\u2028\\u2029]/.test(input.charAt(pos))) {\n\
          result0 = input.charAt(pos);\n\
          pos++;\n\
        } else {\n\
          result0 = null;\n\
          if (reportFailures === 0) {\n\
            matchFailed(\"[\\\\n\
\\\\r\\\\u2028\\\\u2029]\");\n\
          }\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_LineTerminatorSequence() {\n\
        var result0;\n\
        \n\
        reportFailures++;\n\
        if (input.charCodeAt(pos) === 10) {\n\
          result0 = \"\\n\
\";\n\
          pos++;\n\
        } else {\n\
          result0 = null;\n\
          if (reportFailures === 0) {\n\
            matchFailed(\"\\\"\\\\n\
\\\"\");\n\
          }\n\
        }\n\
        if (result0 === null) {\n\
          if (input.substr(pos, 2) === \"\\r\\n\
\") {\n\
            result0 = \"\\r\\n\
\";\n\
            pos += 2;\n\
          } else {\n\
            result0 = null;\n\
            if (reportFailures === 0) {\n\
              matchFailed(\"\\\"\\\\r\\\\n\
\\\"\");\n\
            }\n\
          }\n\
          if (result0 === null) {\n\
            if (input.charCodeAt(pos) === 13) {\n\
              result0 = \"\\r\";\n\
              pos++;\n\
            } else {\n\
              result0 = null;\n\
              if (reportFailures === 0) {\n\
                matchFailed(\"\\\"\\\\r\\\"\");\n\
              }\n\
            }\n\
            if (result0 === null) {\n\
              if (input.charCodeAt(pos) === 8232) {\n\
                result0 = \"\\u2028\";\n\
                pos++;\n\
              } else {\n\
                result0 = null;\n\
                if (reportFailures === 0) {\n\
                  matchFailed(\"\\\"\\\\u2028\\\"\");\n\
                }\n\
              }\n\
              if (result0 === null) {\n\
                if (input.charCodeAt(pos) === 8233) {\n\
                  result0 = \"\\u2029\";\n\
                  pos++;\n\
                } else {\n\
                  result0 = null;\n\
                  if (reportFailures === 0) {\n\
                    matchFailed(\"\\\"\\\\u2029\\\"\");\n\
                  }\n\
                }\n\
              }\n\
            }\n\
          }\n\
        }\n\
        reportFailures--;\n\
        if (reportFailures === 0 && result0 === null) {\n\
          matchFailed(\"end of line\");\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_EOS() {\n\
        var result0, result1;\n\
        var pos0;\n\
        \n\
        pos0 = pos;\n\
        result0 = parse___();\n\
        if (result0 !== null) {\n\
          if (input.charCodeAt(pos) === 59) {\n\
            result1 = \";\";\n\
            pos++;\n\
          } else {\n\
            result1 = null;\n\
            if (reportFailures === 0) {\n\
              matchFailed(\"\\\";\\\"\");\n\
            }\n\
          }\n\
          if (result1 !== null) {\n\
            result0 = [result0, result1];\n\
          } else {\n\
            result0 = null;\n\
            pos = pos0;\n\
          }\n\
        } else {\n\
          result0 = null;\n\
          pos = pos0;\n\
        }\n\
        if (result0 === null) {\n\
          pos0 = pos;\n\
          result0 = parse__();\n\
          if (result0 !== null) {\n\
            result1 = parse_LineTerminatorSequence();\n\
            if (result1 !== null) {\n\
              result0 = [result0, result1];\n\
            } else {\n\
              result0 = null;\n\
              pos = pos0;\n\
            }\n\
          } else {\n\
            result0 = null;\n\
            pos = pos0;\n\
          }\n\
          if (result0 === null) {\n\
            pos0 = pos;\n\
            result0 = parse___();\n\
            if (result0 !== null) {\n\
              result1 = parse_EOF();\n\
              if (result1 !== null) {\n\
                result0 = [result0, result1];\n\
              } else {\n\
                result0 = null;\n\
                pos = pos0;\n\
              }\n\
            } else {\n\
              result0 = null;\n\
              pos = pos0;\n\
            }\n\
          }\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_EOF() {\n\
        var result0;\n\
        var pos0;\n\
        \n\
        pos0 = pos;\n\
        reportFailures++;\n\
        if (input.length > pos) {\n\
          result0 = input.charAt(pos);\n\
          pos++;\n\
        } else {\n\
          result0 = null;\n\
          if (reportFailures === 0) {\n\
            matchFailed(\"any character\");\n\
          }\n\
        }\n\
        reportFailures--;\n\
        if (result0 === null) {\n\
          result0 = \"\";\n\
        } else {\n\
          result0 = null;\n\
          pos = pos0;\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_Comment() {\n\
        var result0;\n\
        \n\
        reportFailures++;\n\
        result0 = parse_MultiLineComment();\n\
        if (result0 === null) {\n\
          result0 = parse_SingleLineComment();\n\
        }\n\
        reportFailures--;\n\
        if (reportFailures === 0 && result0 === null) {\n\
          matchFailed(\"comment\");\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_MultiLineComment() {\n\
        var result0, result1, result2, result3;\n\
        var pos0, pos1, pos2;\n\
        \n\
        pos0 = pos;\n\
        if (input.substr(pos, 2) === \"/*\") {\n\
          result0 = \"/*\";\n\
          pos += 2;\n\
        } else {\n\
          result0 = null;\n\
          if (reportFailures === 0) {\n\
            matchFailed(\"\\\"/*\\\"\");\n\
          }\n\
        }\n\
        if (result0 !== null) {\n\
          result1 = [];\n\
          pos1 = pos;\n\
          pos2 = pos;\n\
          reportFailures++;\n\
          if (input.substr(pos, 2) === \"*/\") {\n\
            result2 = \"*/\";\n\
            pos += 2;\n\
          } else {\n\
            result2 = null;\n\
            if (reportFailures === 0) {\n\
              matchFailed(\"\\\"*/\\\"\");\n\
            }\n\
          }\n\
          reportFailures--;\n\
          if (result2 === null) {\n\
            result2 = \"\";\n\
          } else {\n\
            result2 = null;\n\
            pos = pos2;\n\
          }\n\
          if (result2 !== null) {\n\
            result3 = parse_SourceCharacter();\n\
            if (result3 !== null) {\n\
              result2 = [result2, result3];\n\
            } else {\n\
              result2 = null;\n\
              pos = pos1;\n\
            }\n\
          } else {\n\
            result2 = null;\n\
            pos = pos1;\n\
          }\n\
          while (result2 !== null) {\n\
            result1.push(result2);\n\
            pos1 = pos;\n\
            pos2 = pos;\n\
            reportFailures++;\n\
            if (input.substr(pos, 2) === \"*/\") {\n\
              result2 = \"*/\";\n\
              pos += 2;\n\
            } else {\n\
              result2 = null;\n\
              if (reportFailures === 0) {\n\
                matchFailed(\"\\\"*/\\\"\");\n\
              }\n\
            }\n\
            reportFailures--;\n\
            if (result2 === null) {\n\
              result2 = \"\";\n\
            } else {\n\
              result2 = null;\n\
              pos = pos2;\n\
            }\n\
            if (result2 !== null) {\n\
              result3 = parse_SourceCharacter();\n\
              if (result3 !== null) {\n\
                result2 = [result2, result3];\n\
              } else {\n\
                result2 = null;\n\
                pos = pos1;\n\
              }\n\
            } else {\n\
              result2 = null;\n\
              pos = pos1;\n\
            }\n\
          }\n\
          if (result1 !== null) {\n\
            if (input.substr(pos, 2) === \"*/\") {\n\
              result2 = \"*/\";\n\
              pos += 2;\n\
            } else {\n\
              result2 = null;\n\
              if (reportFailures === 0) {\n\
                matchFailed(\"\\\"*/\\\"\");\n\
              }\n\
            }\n\
            if (result2 !== null) {\n\
              result0 = [result0, result1, result2];\n\
            } else {\n\
              result0 = null;\n\
              pos = pos0;\n\
            }\n\
          } else {\n\
            result0 = null;\n\
            pos = pos0;\n\
          }\n\
        } else {\n\
          result0 = null;\n\
          pos = pos0;\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_MultiLineCommentNoLineTerminator() {\n\
        var result0, result1, result2, result3;\n\
        var pos0, pos1, pos2;\n\
        \n\
        pos0 = pos;\n\
        if (input.substr(pos, 2) === \"/*\") {\n\
          result0 = \"/*\";\n\
          pos += 2;\n\
        } else {\n\
          result0 = null;\n\
          if (reportFailures === 0) {\n\
            matchFailed(\"\\\"/*\\\"\");\n\
          }\n\
        }\n\
        if (result0 !== null) {\n\
          result1 = [];\n\
          pos1 = pos;\n\
          pos2 = pos;\n\
          reportFailures++;\n\
          if (input.substr(pos, 2) === \"*/\") {\n\
            result2 = \"*/\";\n\
            pos += 2;\n\
          } else {\n\
            result2 = null;\n\
            if (reportFailures === 0) {\n\
              matchFailed(\"\\\"*/\\\"\");\n\
            }\n\
          }\n\
          if (result2 === null) {\n\
            result2 = parse_LineTerminator();\n\
          }\n\
          reportFailures--;\n\
          if (result2 === null) {\n\
            result2 = \"\";\n\
          } else {\n\
            result2 = null;\n\
            pos = pos2;\n\
          }\n\
          if (result2 !== null) {\n\
            result3 = parse_SourceCharacter();\n\
            if (result3 !== null) {\n\
              result2 = [result2, result3];\n\
            } else {\n\
              result2 = null;\n\
              pos = pos1;\n\
            }\n\
          } else {\n\
            result2 = null;\n\
            pos = pos1;\n\
          }\n\
          while (result2 !== null) {\n\
            result1.push(result2);\n\
            pos1 = pos;\n\
            pos2 = pos;\n\
            reportFailures++;\n\
            if (input.substr(pos, 2) === \"*/\") {\n\
              result2 = \"*/\";\n\
              pos += 2;\n\
            } else {\n\
              result2 = null;\n\
              if (reportFailures === 0) {\n\
                matchFailed(\"\\\"*/\\\"\");\n\
              }\n\
            }\n\
            if (result2 === null) {\n\
              result2 = parse_LineTerminator();\n\
            }\n\
            reportFailures--;\n\
            if (result2 === null) {\n\
              result2 = \"\";\n\
            } else {\n\
              result2 = null;\n\
              pos = pos2;\n\
            }\n\
            if (result2 !== null) {\n\
              result3 = parse_SourceCharacter();\n\
              if (result3 !== null) {\n\
                result2 = [result2, result3];\n\
              } else {\n\
                result2 = null;\n\
                pos = pos1;\n\
              }\n\
            } else {\n\
              result2 = null;\n\
              pos = pos1;\n\
            }\n\
          }\n\
          if (result1 !== null) {\n\
            if (input.substr(pos, 2) === \"*/\") {\n\
              result2 = \"*/\";\n\
              pos += 2;\n\
            } else {\n\
              result2 = null;\n\
              if (reportFailures === 0) {\n\
                matchFailed(\"\\\"*/\\\"\");\n\
              }\n\
            }\n\
            if (result2 !== null) {\n\
              result0 = [result0, result1, result2];\n\
            } else {\n\
              result0 = null;\n\
              pos = pos0;\n\
            }\n\
          } else {\n\
            result0 = null;\n\
            pos = pos0;\n\
          }\n\
        } else {\n\
          result0 = null;\n\
          pos = pos0;\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_SingleLineComment() {\n\
        var result0, result1, result2, result3;\n\
        var pos0, pos1, pos2;\n\
        \n\
        pos0 = pos;\n\
        if (input.substr(pos, 2) === \"//\") {\n\
          result0 = \"//\";\n\
          pos += 2;\n\
        } else {\n\
          result0 = null;\n\
          if (reportFailures === 0) {\n\
            matchFailed(\"\\\"//\\\"\");\n\
          }\n\
        }\n\
        if (result0 !== null) {\n\
          result1 = [];\n\
          pos1 = pos;\n\
          pos2 = pos;\n\
          reportFailures++;\n\
          result2 = parse_LineTerminator();\n\
          reportFailures--;\n\
          if (result2 === null) {\n\
            result2 = \"\";\n\
          } else {\n\
            result2 = null;\n\
            pos = pos2;\n\
          }\n\
          if (result2 !== null) {\n\
            result3 = parse_SourceCharacter();\n\
            if (result3 !== null) {\n\
              result2 = [result2, result3];\n\
            } else {\n\
              result2 = null;\n\
              pos = pos1;\n\
            }\n\
          } else {\n\
            result2 = null;\n\
            pos = pos1;\n\
          }\n\
          while (result2 !== null) {\n\
            result1.push(result2);\n\
            pos1 = pos;\n\
            pos2 = pos;\n\
            reportFailures++;\n\
            result2 = parse_LineTerminator();\n\
            reportFailures--;\n\
            if (result2 === null) {\n\
              result2 = \"\";\n\
            } else {\n\
              result2 = null;\n\
              pos = pos2;\n\
            }\n\
            if (result2 !== null) {\n\
              result3 = parse_SourceCharacter();\n\
              if (result3 !== null) {\n\
                result2 = [result2, result3];\n\
              } else {\n\
                result2 = null;\n\
                pos = pos1;\n\
              }\n\
            } else {\n\
              result2 = null;\n\
              pos = pos1;\n\
            }\n\
          }\n\
          if (result1 !== null) {\n\
            result2 = parse_LineTerminator();\n\
            if (result2 === null) {\n\
              result2 = parse_EOF();\n\
            }\n\
            if (result2 !== null) {\n\
              result0 = [result0, result1, result2];\n\
            } else {\n\
              result0 = null;\n\
              pos = pos0;\n\
            }\n\
          } else {\n\
            result0 = null;\n\
            pos = pos0;\n\
          }\n\
        } else {\n\
          result0 = null;\n\
          pos = pos0;\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse__() {\n\
        var result0, result1;\n\
        \n\
        result0 = [];\n\
        result1 = parse_WhiteSpace();\n\
        if (result1 === null) {\n\
          result1 = parse_MultiLineCommentNoLineTerminator();\n\
          if (result1 === null) {\n\
            result1 = parse_SingleLineComment();\n\
          }\n\
        }\n\
        while (result1 !== null) {\n\
          result0.push(result1);\n\
          result1 = parse_WhiteSpace();\n\
          if (result1 === null) {\n\
            result1 = parse_MultiLineCommentNoLineTerminator();\n\
            if (result1 === null) {\n\
              result1 = parse_SingleLineComment();\n\
            }\n\
          }\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse___() {\n\
        var result0, result1;\n\
        \n\
        result0 = [];\n\
        result1 = parse_WhiteSpace();\n\
        if (result1 === null) {\n\
          result1 = parse_LineTerminatorSequence();\n\
          if (result1 === null) {\n\
            result1 = parse_Comment();\n\
          }\n\
        }\n\
        while (result1 !== null) {\n\
          result0.push(result1);\n\
          result1 = parse_WhiteSpace();\n\
          if (result1 === null) {\n\
            result1 = parse_LineTerminatorSequence();\n\
            if (result1 === null) {\n\
              result1 = parse_Comment();\n\
            }\n\
          }\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      \n\
      function cleanupExpected(expected) {\n\
        expected.sort();\n\
        \n\
        var lastExpected = null;\n\
        var cleanExpected = [];\n\
        for (var i = 0; i < expected.length; i++) {\n\
          if (expected[i] !== lastExpected) {\n\
            cleanExpected.push(expected[i]);\n\
            lastExpected = expected[i];\n\
          }\n\
        }\n\
        return cleanExpected;\n\
      }\n\
      \n\
      function computeErrorPosition() {\n\
        /*\n\
         * The first idea was to use |String.split| to break the input up to the\n\
         * error position along newlines and derive the line and column from\n\
         * there. However IE's |split| implementation is so broken that it was\n\
         * enough to prevent it.\n\
         */\n\
        \n\
        var line = 1;\n\
        var column = 1;\n\
        var seenCR = false;\n\
        \n\
        for (var i = 0; i < Math.max(pos, rightmostFailuresPos); i++) {\n\
          var ch = input.charAt(i);\n\
          if (ch === \"\\n\
\") {\n\
            if (!seenCR) { line++; }\n\
            column = 1;\n\
            seenCR = false;\n\
          } else if (ch === \"\\r\" || ch === \"\\u2028\" || ch === \"\\u2029\") {\n\
            line++;\n\
            column = 1;\n\
            seenCR = true;\n\
          } else {\n\
            column++;\n\
            seenCR = false;\n\
          }\n\
        }\n\
        \n\
        return { line: line, column: column };\n\
      }\n\
      \n\
      \n\
        var p, parser, cs, leftVarNames, superLeftVarNames, rightVarNames, superRightVarNames, standardGapNames, getSuperViewName, getGapString, sizeVarNames; \n\
      \n\
        p = parser = this;\n\
        \n\
        \n\
        p.trickleDownOptions = [\"name\"];\n\
        sizeVarNames = p.sizeVarNames = [\"width\", \"height\"];\n\
        leftVarNames = p.leftVarNames = [\"right\", \"bottom\"];\n\
        superLeftVarNames = p.superLeftVarNames = [\"left\", \"top\"];\n\
        rightVarNames = p.rightVarNames = [\"left\", \"top\"];\n\
        superRightVarNames = p.superRightVarNames = [\"right\", \"bottom\"];\n\
      \n\
        cs = parser.cs = [];\n\
      \n\
        parser.addC = function (c) {\n\
          cs.push(c);\n\
        };\n\
      \n\
        parser.addPreds = function (view,preds,d) {\n\
          var pred, ccss, eq, exps, exp;\n\
          if (preds) {      \n\
            for (var i = 0; i < preds.length; i++) {\n\
              pred = preds[i];\n\
              eq = pred[0];\n\
              ccss = view + \"[\" + sizeVarNames[d] + \"] \" + eq + \" \";\n\
              exps = pred[1];\n\
              for (var j = 0; j < exps.length; j++) {       \n\
                exp = exps[j];\n\
                if (exp[0] === \"view\") {\n\
                  exp = exp[1] + \"[\" + sizeVarNames[d] + \"]\";\n\
                }\n\
                ccss += exp + \" \";\n\
              }\n\
              ccss += pred[2]; // strength & weight\n\
              cs.push(ccss.trim());\n\
            }\n\
          }\n\
        };\n\
      \n\
        parser.defaultChainObject = {\n\
          headEq: \"==\",\n\
          value: \"\",\n\
          tailEq: \"\",\n\
          s: \"\"\n\
        };\n\
      \n\
        parser.chainTailEqMap = {\n\
          \"<=\": \">=\",\n\
          \">=\": \"<=\",\n\
          \"==\": \"==\",\n\
          \"<\" : \">\",\n\
          \">\" : \"<\" \n\
        };\n\
      \n\
        parser.addChains = function (views,o) {\n\
          var chains, chain, prop, preds, connector, ccss, view, pred;\n\
          chains = o.chains;\n\
          if (chains) {            \n\
            for (var i = 0; i < chains.length; i++) {\n\
              chain = chains[i];\n\
              prop = chain[0];\n\
              preds = chain[1];\n\
              if (preds === \"\") {\n\
                preds = [parser.defaultChainObject];\n\
              } // load default chain predicate\n\
              for (var j = 0; j < preds.length; j++) {\n\
                pred = preds[j];\n\
                ccss = \"\";\n\
                for (var k = 0; k < views.length - 1; k++) {\n\
                  view = views[k];  \n\
                  if (pred.headEq === \"\") {\n\
                    pred.headEq = parser.defaultChainObject.headEq;\n\
                  }\n\
                  ccss += \" \" + view + \"[\" + prop + \"] \" + pred.headEq;\n\
                  if (pred.value !== \"\") {\n\
                    ccss += \" \" + pred.value;\n\
                    if (views.length > 1) {\n\
                      if (pred.tailEq === \"\") {\n\
                        pred.tailEq = parser.chainTailEqMap[pred.headEq];\n\
                      }\n\
                      ccss += \" \" + pred.tailEq;\n\
                    }\n\
                    else {\n\
                      ccss += \" \" + pred.s;\n\
                      cs.push(ccss.trim());\n\
                    }\n\
                  }\n\
                }\n\
                if (views.length > 1) {\n\
                   ccss += \" \" + views[views.length-1] + \"[\" + prop + \"]\";\n\
                   ccss += p.getTrailingOptions(o);\n\
                   ccss += \" \" + pred.s;\n\
                   cs.push(ccss.trim());\n\
                }\n\
              }\n\
            }\n\
          } \n\
        };\n\
      \n\
        getSuperViewName = function (o) {\n\
          if (o.in === undefined) {\n\
            return \"::this\";\n\
          }\n\
          return o.in;\n\
        };\n\
      \n\
        parser.getLeftVar = function (view, dimension, o) {\n\
          var varName, viewName;\n\
          if (view === \"|\") {\n\
            viewName = getSuperViewName(o);\n\
            varName = superLeftVarNames[dimension];\n\
          }\n\
          else {\n\
            viewName = view;\n\
            varName = leftVarNames[dimension];\n\
          }\n\
          return viewName + \"[\" + varName + \"]\";\n\
        };\n\
        \n\
        parser.getRightVar = function (view, dimension, o) {\n\
          var varName;\n\
          \n\
          if (view === \"|\") {\n\
            view = getSuperViewName(o);\n\
            varName = superRightVarNames[dimension];\n\
          }\n\
          else {\n\
            varName = rightVarNames[dimension];\n\
            \n\
          }\n\
          return view + \"[\" + varName + \"]\";\n\
        };\n\
        \n\
        standardGapNames = [\"[hgap]\", \"[vgap]\"];\n\
        \n\
        getGapString = function (g,d,o,withContainer) {\n\
          if (g === undefined) {return \"\";}\n\
          if (g === \"__STANDARD__\") {\n\
            // use gap if given with `gap()` or `outer-gap`\n\
            if (withContainer && o['outer-gap']) {\n\
              g = o['outer-gap'];\n\
            } else if (o.gap) {\n\
              g = o.gap;\n\
            // else use standard var\n\
            } else {\n\
              g = standardGapNames[d];\n\
            }\n\
          }\n\
          return \"+ \" + g;\n\
        };\n\
      \n\
        parser.getConnectionString = function (c, d, o, withContainer) {\n\
          \n\
          return (getGapString(c.gap,d,o,withContainer) + \" \" + c.op).trim();\n\
        };\n\
        \n\
          \n\
        p.getTrailingOptions = function (o) {\n\
          var string = \"\";    \n\
          p.trickleDownOptions.forEach(function(key){\n\
            if (o[key] != null) {\n\
              string = string + \" \" + key + \"(\" + o[key] + \")\";\n\
            }\n\
          });\n\
          return string;\n\
        };\n\
        \n\
        p.getSW = function (o) {\n\
          if (o.sw) {\n\
            return \" \" + o.sw.trim();\n\
          }\n\
          return \"\";\n\
        };\n\
        \n\
      \n\
        parser.getResults = function () {\n\
          return this.cs;\n\
        };\n\
      \n\
        parser.error = function (m,l,c) {\n\
          if (!!l && !!c) {\n\
            m = m + \" {line:\" + l + \", col:\" + c + \"}\";\n\
          }\n\
          console.error(m);\n\
          return m;\n\
        };\n\
      \n\
        parser.join = function (a) {\n\
          if (a.join){return a.join(\"\");}\n\
          return a;\n\
        };\n\
        \n\
      \n\
      \n\
      var result = parseFunctions[startRule]();\n\
      \n\
      /*\n\
       * The parser is now in one of the following three states:\n\
       *\n\
       * 1. The parser successfully parsed the whole input.\n\
       *\n\
       *    - |result !== null|\n\
       *    - |pos === input.length|\n\
       *    - |rightmostFailuresExpected| may or may not contain something\n\
       *\n\
       * 2. The parser successfully parsed only a part of the input.\n\
       *\n\
       *    - |result !== null|\n\
       *    - |pos < input.length|\n\
       *    - |rightmostFailuresExpected| may or may not contain something\n\
       *\n\
       * 3. The parser did not successfully parse any part of the input.\n\
       *\n\
       *   - |result === null|\n\
       *   - |pos === 0|\n\
       *   - |rightmostFailuresExpected| contains at least one failure\n\
       *\n\
       * All code following this comment (including called functions) must\n\
       * handle these states.\n\
       */\n\
      if (result === null || pos !== input.length) {\n\
        var offset = Math.max(pos, rightmostFailuresPos);\n\
        var found = offset < input.length ? input.charAt(offset) : null;\n\
        var errorPosition = computeErrorPosition();\n\
        \n\
        throw new this.SyntaxError(\n\
          cleanupExpected(rightmostFailuresExpected),\n\
          found,\n\
          offset,\n\
          errorPosition.line,\n\
          errorPosition.column\n\
        );\n\
      }\n\
      \n\
      return result;\n\
    },\n\
    \n\
    /* Returns the parser source code. */\n\
    toSource: function() { return this._source; }\n\
  };\n\
  \n\
  /* Thrown when a parser encounters a syntax error. */\n\
  \n\
  result.SyntaxError = function(expected, found, offset, line, column) {\n\
    function buildMessage(expected, found) {\n\
      var expectedHumanized, foundHumanized;\n\
      \n\
      switch (expected.length) {\n\
        case 0:\n\
          expectedHumanized = \"end of input\";\n\
          break;\n\
        case 1:\n\
          expectedHumanized = expected[0];\n\
          break;\n\
        default:\n\
          expectedHumanized = expected.slice(0, expected.length - 1).join(\", \")\n\
            + \" or \"\n\
            + expected[expected.length - 1];\n\
      }\n\
      \n\
      foundHumanized = found ? quote(found) : \"end of input\";\n\
      \n\
      return \"Expected \" + expectedHumanized + \" but \" + foundHumanized + \" found.\";\n\
    }\n\
    \n\
    this.name = \"SyntaxError\";\n\
    this.expected = expected;\n\
    this.found = found;\n\
    this.message = buildMessage(expected, found);\n\
    this.offset = offset;\n\
    this.line = line;\n\
    this.column = column;\n\
  };\n\
  \n\
  result.SyntaxError.prototype = Error.prototype;\n\
  \n\
  return result;\n\
})();//@ sourceURL=the-gss-vfl-compiler/lib/vfl-compiler.js"
));
require.register("the-gss-vfl-compiler/lib/compiler.js", Function("exports, require, module",
"var vfl = require('./vfl-compiler');\n\
\n\
exports.parse = function (rules) {\n\
  return vfl.parse(rules);\n\
};//@ sourceURL=the-gss-vfl-compiler/lib/compiler.js"
));
require.register("the-gss-vgl-compiler/lib/vgl-compiler.js", Function("exports, require, module",
"module.exports = (function(){\n\
  /*\n\
   * Generated by PEG.js 0.7.0.\n\
   *\n\
   * http://pegjs.majda.cz/\n\
   */\n\
  \n\
  function quote(s) {\n\
    /*\n\
     * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a\n\
     * string literal except for the closing quote character, backslash,\n\
     * carriage return, line separator, paragraph separator, and line feed.\n\
     * Any character may appear in the form of an escape sequence.\n\
     *\n\
     * For portability, we also escape escape all control and non-ASCII\n\
     * characters. Note that \"\\0\" and \"\\v\" escape sequences are not used\n\
     * because JSHint does not like the first and IE the second.\n\
     */\n\
     return '\"' + s\n\
      .replace(/\\\\/g, '\\\\\\\\')  // backslash\n\
      .replace(/\"/g, '\\\\\"')    // closing quote character\n\
      .replace(/\\x08/g, '\\\\b') // backspace\n\
      .replace(/\\t/g, '\\\\t')   // horizontal tab\n\
      .replace(/\\n\
/g, '\\\\n\
')   // line feed\n\
      .replace(/\\f/g, '\\\\f')   // form feed\n\
      .replace(/\\r/g, '\\\\r')   // carriage return\n\
      .replace(/[\\x00-\\x07\\x0B\\x0E-\\x1F\\x80-\\uFFFF]/g, escape)\n\
      + '\"';\n\
  }\n\
  \n\
  var result = {\n\
    /*\n\
     * Parses the input with a generated parser. If the parsing is successfull,\n\
     * returns a value explicitly or implicitly specified by the grammar from\n\
     * which the parser was generated (see |PEG.buildParser|). If the parsing is\n\
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.\n\
     */\n\
    parse: function(input, startRule) {\n\
      var parseFunctions = {\n\
        \"start\": parse_start,\n\
        \"Statement\": parse_Statement,\n\
        \"VGLStatement\": parse_VGLStatement,\n\
        \"RowsCols\": parse_RowsCols,\n\
        \"Template\": parse_Template,\n\
        \"TemplateLine\": parse_TemplateLine,\n\
        \"TemplateOptions\": parse_TemplateOptions,\n\
        \"TemplateOption\": parse_TemplateOption,\n\
        \"OpionValueChars\": parse_OpionValueChars,\n\
        \"TemplateZone\": parse_TemplateZone,\n\
        \"RowColDimension\": parse_RowColDimension,\n\
        \"Line\": parse_Line,\n\
        \"LineChunk\": parse_LineChunk,\n\
        \"Connection\": parse_Connection,\n\
        \"ConnectionTypes\": parse_ConnectionTypes,\n\
        \"VirtualNameChars\": parse_VirtualNameChars,\n\
        \"NameChars\": parse_NameChars,\n\
        \"NameCharsWithSpace\": parse_NameCharsWithSpace,\n\
        \"Literal\": parse_Literal,\n\
        \"Number\": parse_Number,\n\
        \"Integer\": parse_Integer,\n\
        \"Real\": parse_Real,\n\
        \"SignedInteger\": parse_SignedInteger,\n\
        \"SourceCharacter\": parse_SourceCharacter,\n\
        \"WhiteSpace\": parse_WhiteSpace,\n\
        \"LineTerminator\": parse_LineTerminator,\n\
        \"LineTerminatorSequence\": parse_LineTerminatorSequence,\n\
        \"AnyChar\": parse_AnyChar,\n\
        \"EOS\": parse_EOS,\n\
        \"EOF\": parse_EOF,\n\
        \"Comment\": parse_Comment,\n\
        \"MultiLineComment\": parse_MultiLineComment,\n\
        \"MultiLineCommentNoLineTerminator\": parse_MultiLineCommentNoLineTerminator,\n\
        \"SingleLineComment\": parse_SingleLineComment,\n\
        \"_\": parse__,\n\
        \"__\": parse___\n\
      };\n\
      \n\
      if (startRule !== undefined) {\n\
        if (parseFunctions[startRule] === undefined) {\n\
          throw new Error(\"Invalid rule name: \" + quote(startRule) + \".\");\n\
        }\n\
      } else {\n\
        startRule = \"start\";\n\
      }\n\
      \n\
      var pos = 0;\n\
      var reportFailures = 0;\n\
      var rightmostFailuresPos = 0;\n\
      var rightmostFailuresExpected = [];\n\
      \n\
      function padLeft(input, padding, length) {\n\
        var result = input;\n\
        \n\
        var padLength = length - input.length;\n\
        for (var i = 0; i < padLength; i++) {\n\
          result = padding + result;\n\
        }\n\
        \n\
        return result;\n\
      }\n\
      \n\
      function escape(ch) {\n\
        var charCode = ch.charCodeAt(0);\n\
        var escapeChar;\n\
        var length;\n\
        \n\
        if (charCode <= 0xFF) {\n\
          escapeChar = 'x';\n\
          length = 2;\n\
        } else {\n\
          escapeChar = 'u';\n\
          length = 4;\n\
        }\n\
        \n\
        return '\\\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);\n\
      }\n\
      \n\
      function matchFailed(failure) {\n\
        if (pos < rightmostFailuresPos) {\n\
          return;\n\
        }\n\
        \n\
        if (pos > rightmostFailuresPos) {\n\
          rightmostFailuresPos = pos;\n\
          rightmostFailuresExpected = [];\n\
        }\n\
        \n\
        rightmostFailuresExpected.push(failure);\n\
      }\n\
      \n\
      function parse_start() {\n\
        var result0, result1, result2;\n\
        var pos0, pos1;\n\
        \n\
        pos0 = pos;\n\
        pos1 = pos;\n\
        result0 = parse___();\n\
        if (result0 !== null) {\n\
          result1 = [];\n\
          result2 = parse_Statement();\n\
          while (result2 !== null) {\n\
            result1.push(result2);\n\
            result2 = parse_Statement();\n\
          }\n\
          if (result1 !== null) {\n\
            result2 = parse___();\n\
            if (result2 !== null) {\n\
              result0 = [result0, result1, result2];\n\
            } else {\n\
              result0 = null;\n\
              pos = pos1;\n\
            }\n\
          } else {\n\
            result0 = null;\n\
            pos = pos1;\n\
          }\n\
        } else {\n\
          result0 = null;\n\
          pos = pos1;\n\
        }\n\
        if (result0 !== null) {\n\
          result0 = (function(offset) {return p.getResults()})(pos0);\n\
        }\n\
        if (result0 === null) {\n\
          pos = pos0;\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_Statement() {\n\
        var result0, result1, result2, result3;\n\
        var pos0, pos1;\n\
        \n\
        pos0 = pos;\n\
        pos1 = pos;\n\
        if (input.charCodeAt(pos) === 64) {\n\
          result0 = \"@\";\n\
          pos++;\n\
        } else {\n\
          result0 = null;\n\
          if (reportFailures === 0) {\n\
            matchFailed(\"\\\"@\\\"\");\n\
          }\n\
        }\n\
        if (result0 !== null) {\n\
          result1 = parse_VGLStatement();\n\
          if (result1 !== null) {\n\
            result2 = parse_EOS();\n\
            if (result2 !== null) {\n\
              result3 = parse___();\n\
              if (result3 !== null) {\n\
                result0 = [result0, result1, result2, result3];\n\
              } else {\n\
                result0 = null;\n\
                pos = pos1;\n\
              }\n\
            } else {\n\
              result0 = null;\n\
              pos = pos1;\n\
            }\n\
          } else {\n\
            result0 = null;\n\
            pos = pos1;\n\
          }\n\
        } else {\n\
          result0 = null;\n\
          pos = pos1;\n\
        }\n\
        if (result0 !== null) {\n\
          result0 = (function(offset, vfls) { return vfls; })(pos0, result0[1]);\n\
        }\n\
        if (result0 === null) {\n\
          pos = pos0;\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_VGLStatement() {\n\
        var result0;\n\
        \n\
        result0 = parse_RowsCols();\n\
        if (result0 === null) {\n\
          result0 = parse_Template();\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_RowsCols() {\n\
        var result0, result1, result2, result3, result4, result5, result6, result7, result8;\n\
        var pos0, pos1;\n\
        \n\
        reportFailures++;\n\
        pos0 = pos;\n\
        pos1 = pos;\n\
        if (input.substr(pos, 5) === \"grid-\") {\n\
          result0 = \"grid-\";\n\
          pos += 5;\n\
        } else {\n\
          result0 = null;\n\
          if (reportFailures === 0) {\n\
            matchFailed(\"\\\"grid-\\\"\");\n\
          }\n\
        }\n\
        if (result0 === null) {\n\
          if (input.substr(pos, 10) === \"-gss-grid-\") {\n\
            result0 = \"-gss-grid-\";\n\
            pos += 10;\n\
          } else {\n\
            result0 = null;\n\
            if (reportFailures === 0) {\n\
              matchFailed(\"\\\"-gss-grid-\\\"\");\n\
            }\n\
          }\n\
        }\n\
        if (result0 !== null) {\n\
          result1 = parse_RowColDimension();\n\
          if (result1 !== null) {\n\
            result2 = parse___();\n\
            if (result2 !== null) {\n\
              if (input.charCodeAt(pos) === 34) {\n\
                result3 = \"\\\"\";\n\
                pos++;\n\
              } else {\n\
                result3 = null;\n\
                if (reportFailures === 0) {\n\
                  matchFailed(\"\\\"\\\\\\\"\\\"\");\n\
                }\n\
              }\n\
              if (result3 !== null) {\n\
                result4 = parse_Line();\n\
                if (result4 !== null) {\n\
                  if (input.charCodeAt(pos) === 34) {\n\
                    result5 = \"\\\"\";\n\
                    pos++;\n\
                  } else {\n\
                    result5 = null;\n\
                    if (reportFailures === 0) {\n\
                      matchFailed(\"\\\"\\\\\\\"\\\"\");\n\
                    }\n\
                  }\n\
                  if (result5 !== null) {\n\
                    result6 = parse___();\n\
                    if (result6 !== null) {\n\
                      result7 = [];\n\
                      result8 = parse_AnyChar();\n\
                      while (result8 !== null) {\n\
                        result7.push(result8);\n\
                        result8 = parse_AnyChar();\n\
                      }\n\
                      if (result7 !== null) {\n\
                        result0 = [result0, result1, result2, result3, result4, result5, result6, result7];\n\
                      } else {\n\
                        result0 = null;\n\
                        pos = pos1;\n\
                      }\n\
                    } else {\n\
                      result0 = null;\n\
                      pos = pos1;\n\
                    }\n\
                  } else {\n\
                    result0 = null;\n\
                    pos = pos1;\n\
                  }\n\
                } else {\n\
                  result0 = null;\n\
                  pos = pos1;\n\
                }\n\
              } else {\n\
                result0 = null;\n\
                pos = pos1;\n\
              }\n\
            } else {\n\
              result0 = null;\n\
              pos = pos1;\n\
            }\n\
          } else {\n\
            result0 = null;\n\
            pos = pos1;\n\
          }\n\
        } else {\n\
          result0 = null;\n\
          pos = pos1;\n\
        }\n\
        if (result0 !== null) {\n\
          result0 = (function(offset, d, line, stuff) {\n\
            var vfl, props;\n\
            vfl = \"@\"+ ['v','h'][d] +\" \"+ \n\
              line +\" \"+\n\
              \"in\"+\"(::)\" +\" \"+ \n\
              \"chain-\"+p.size[d]+\"(::[\"+p.size[d] +\"]) \"+       \n\
              \"chain-\"+p.size[1-d] +\" \"+\n\
              \"chain-\"+p.pos[d]+\"(::[\"+p.pos[d] +\"]) \"+\n\
              p.trim(stuff);\n\
            p.addVFL(vfl.trim());\n\
          })(pos0, result0[1], result0[4], result0[7]);\n\
        }\n\
        if (result0 === null) {\n\
          pos = pos0;\n\
        }\n\
        reportFailures--;\n\
        if (reportFailures === 0 && result0 === null) {\n\
          matchFailed(\"grid-rows / grid-cols\");\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_Template() {\n\
        var result0, result1, result2, result3, result4, result5;\n\
        var pos0, pos1;\n\
        \n\
        reportFailures++;\n\
        pos0 = pos;\n\
        pos1 = pos;\n\
        if (input.substr(pos, 5) === \"grid-\") {\n\
          result0 = \"grid-\";\n\
          pos += 5;\n\
        } else {\n\
          result0 = null;\n\
          if (reportFailures === 0) {\n\
            matchFailed(\"\\\"grid-\\\"\");\n\
          }\n\
        }\n\
        if (result0 === null) {\n\
          if (input.substr(pos, 10) === \"-gss-grid-\") {\n\
            result0 = \"-gss-grid-\";\n\
            pos += 10;\n\
          } else {\n\
            result0 = null;\n\
            if (reportFailures === 0) {\n\
              matchFailed(\"\\\"-gss-grid-\\\"\");\n\
            }\n\
          }\n\
        }\n\
        if (result0 !== null) {\n\
          if (input.substr(pos, 8) === \"template\") {\n\
            result1 = \"template\";\n\
            pos += 8;\n\
          } else {\n\
            result1 = null;\n\
            if (reportFailures === 0) {\n\
              matchFailed(\"\\\"template\\\"\");\n\
            }\n\
          }\n\
          if (result1 !== null) {\n\
            result2 = parse___();\n\
            if (result2 !== null) {\n\
              if (/^[0-9a-zA-Z\\-_]/.test(input.charAt(pos))) {\n\
                result4 = input.charAt(pos);\n\
                pos++;\n\
              } else {\n\
                result4 = null;\n\
                if (reportFailures === 0) {\n\
                  matchFailed(\"[0-9a-zA-Z\\\\-_]\");\n\
                }\n\
              }\n\
              if (result4 !== null) {\n\
                result3 = [];\n\
                while (result4 !== null) {\n\
                  result3.push(result4);\n\
                  if (/^[0-9a-zA-Z\\-_]/.test(input.charAt(pos))) {\n\
                    result4 = input.charAt(pos);\n\
                    pos++;\n\
                  } else {\n\
                    result4 = null;\n\
                    if (reportFailures === 0) {\n\
                      matchFailed(\"[0-9a-zA-Z\\\\-_]\");\n\
                    }\n\
                  }\n\
                }\n\
              } else {\n\
                result3 = null;\n\
              }\n\
              if (result3 !== null) {\n\
                result5 = parse_TemplateLine();\n\
                if (result5 !== null) {\n\
                  result4 = [];\n\
                  while (result5 !== null) {\n\
                    result4.push(result5);\n\
                    result5 = parse_TemplateLine();\n\
                  }\n\
                } else {\n\
                  result4 = null;\n\
                }\n\
                if (result4 !== null) {\n\
                  result5 = parse_TemplateOptions();\n\
                  if (result5 !== null) {\n\
                    result0 = [result0, result1, result2, result3, result4, result5];\n\
                  } else {\n\
                    result0 = null;\n\
                    pos = pos1;\n\
                  }\n\
                } else {\n\
                  result0 = null;\n\
                  pos = pos1;\n\
                }\n\
              } else {\n\
                result0 = null;\n\
                pos = pos1;\n\
              }\n\
            } else {\n\
              result0 = null;\n\
              pos = pos1;\n\
            }\n\
          } else {\n\
            result0 = null;\n\
            pos = pos1;\n\
          }\n\
        } else {\n\
          result0 = null;\n\
          pos = pos1;\n\
        }\n\
        if (result0 !== null) {\n\
          result0 = (function(offset, name, lines, options) {\n\
             p.addTemplate(lines,p.stringify(name),options);    \n\
          })(pos0, result0[3], result0[4], result0[5]);\n\
        }\n\
        if (result0 === null) {\n\
          pos = pos0;\n\
        }\n\
        reportFailures--;\n\
        if (reportFailures === 0 && result0 === null) {\n\
          matchFailed(\"grid-template\");\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_TemplateLine() {\n\
        var result0, result1, result2, result3, result4;\n\
        var pos0, pos1;\n\
        \n\
        reportFailures++;\n\
        pos0 = pos;\n\
        pos1 = pos;\n\
        result0 = parse___();\n\
        if (result0 !== null) {\n\
          if (input.charCodeAt(pos) === 34) {\n\
            result1 = \"\\\"\";\n\
            pos++;\n\
          } else {\n\
            result1 = null;\n\
            if (reportFailures === 0) {\n\
              matchFailed(\"\\\"\\\\\\\"\\\"\");\n\
            }\n\
          }\n\
          if (result1 !== null) {\n\
            result3 = parse_TemplateZone();\n\
            if (result3 !== null) {\n\
              result2 = [];\n\
              while (result3 !== null) {\n\
                result2.push(result3);\n\
                result3 = parse_TemplateZone();\n\
              }\n\
            } else {\n\
              result2 = null;\n\
            }\n\
            if (result2 !== null) {\n\
              if (input.charCodeAt(pos) === 34) {\n\
                result3 = \"\\\"\";\n\
                pos++;\n\
              } else {\n\
                result3 = null;\n\
                if (reportFailures === 0) {\n\
                  matchFailed(\"\\\"\\\\\\\"\\\"\");\n\
                }\n\
              }\n\
              if (result3 !== null) {\n\
                result4 = parse___();\n\
                if (result4 !== null) {\n\
                  result0 = [result0, result1, result2, result3, result4];\n\
                } else {\n\
                  result0 = null;\n\
                  pos = pos1;\n\
                }\n\
              } else {\n\
                result0 = null;\n\
                pos = pos1;\n\
              }\n\
            } else {\n\
              result0 = null;\n\
              pos = pos1;\n\
            }\n\
          } else {\n\
            result0 = null;\n\
            pos = pos1;\n\
          }\n\
        } else {\n\
          result0 = null;\n\
          pos = pos1;\n\
        }\n\
        if (result0 !== null) {\n\
          result0 = (function(offset, zones) {\n\
            return p.processHZones(zones);    \n\
          })(pos0, result0[2]);\n\
        }\n\
        if (result0 === null) {\n\
          pos = pos0;\n\
        }\n\
        reportFailures--;\n\
        if (reportFailures === 0 && result0 === null) {\n\
          matchFailed(\"template line\");\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_TemplateOptions() {\n\
        var result0, result1;\n\
        var pos0;\n\
        \n\
        reportFailures++;\n\
        pos0 = pos;\n\
        result0 = [];\n\
        result1 = parse_TemplateOption();\n\
        while (result1 !== null) {\n\
          result0.push(result1);\n\
          result1 = parse_TemplateOption();\n\
        }\n\
        if (result0 !== null) {\n\
          result0 = (function(offset, o) {\n\
            var result = {};\n\
            if (o) {\n\
              result = {}\n\
              o.forEach(function(obj){\n\
                result[obj.key] = obj.value;\n\
              })\n\
            } \n\
            return result;\n\
          })(pos0, result0);\n\
        }\n\
        if (result0 === null) {\n\
          pos = pos0;\n\
        }\n\
        reportFailures--;\n\
        if (reportFailures === 0 && result0 === null) {\n\
          matchFailed(\"Template Options\");\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_TemplateOption() {\n\
        var result0, result1, result2, result3, result4;\n\
        var pos0, pos1;\n\
        \n\
        reportFailures++;\n\
        pos0 = pos;\n\
        pos1 = pos;\n\
        result0 = parse___();\n\
        if (result0 !== null) {\n\
          result2 = parse_NameChars();\n\
          if (result2 !== null) {\n\
            result1 = [];\n\
            while (result2 !== null) {\n\
              result1.push(result2);\n\
              result2 = parse_NameChars();\n\
            }\n\
          } else {\n\
            result1 = null;\n\
          }\n\
          if (result1 !== null) {\n\
            if (input.charCodeAt(pos) === 40) {\n\
              result2 = \"(\";\n\
              pos++;\n\
            } else {\n\
              result2 = null;\n\
              if (reportFailures === 0) {\n\
                matchFailed(\"\\\"(\\\"\");\n\
              }\n\
            }\n\
            if (result2 !== null) {\n\
              result4 = parse_OpionValueChars();\n\
              if (result4 !== null) {\n\
                result3 = [];\n\
                while (result4 !== null) {\n\
                  result3.push(result4);\n\
                  result4 = parse_OpionValueChars();\n\
                }\n\
              } else {\n\
                result3 = null;\n\
              }\n\
              if (result3 !== null) {\n\
                if (input.charCodeAt(pos) === 41) {\n\
                  result4 = \")\";\n\
                  pos++;\n\
                } else {\n\
                  result4 = null;\n\
                  if (reportFailures === 0) {\n\
                    matchFailed(\"\\\")\\\"\");\n\
                  }\n\
                }\n\
                if (result4 !== null) {\n\
                  result0 = [result0, result1, result2, result3, result4];\n\
                } else {\n\
                  result0 = null;\n\
                  pos = pos1;\n\
                }\n\
              } else {\n\
                result0 = null;\n\
                pos = pos1;\n\
              }\n\
            } else {\n\
              result0 = null;\n\
              pos = pos1;\n\
            }\n\
          } else {\n\
            result0 = null;\n\
            pos = pos1;\n\
          }\n\
        } else {\n\
          result0 = null;\n\
          pos = pos1;\n\
        }\n\
        if (result0 !== null) {\n\
          result0 = (function(offset, key, value) {return {key:key.join(''), value:value.join('')};})(pos0, result0[1], result0[3]);\n\
        }\n\
        if (result0 === null) {\n\
          pos = pos0;\n\
        }\n\
        reportFailures--;\n\
        if (reportFailures === 0 && result0 === null) {\n\
          matchFailed(\"TemplateOption\");\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_OpionValueChars() {\n\
        var result0;\n\
        \n\
        if (/^[^>=<!)]/.test(input.charAt(pos))) {\n\
          result0 = input.charAt(pos);\n\
          pos++;\n\
        } else {\n\
          result0 = null;\n\
          if (reportFailures === 0) {\n\
            matchFailed(\"[^>=<!)]\");\n\
          }\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_TemplateZone() {\n\
        var result0, result1, result2;\n\
        var pos0, pos1;\n\
        \n\
        reportFailures++;\n\
        pos0 = pos;\n\
        if (input.charCodeAt(pos) === 48) {\n\
          result1 = \"0\";\n\
          pos++;\n\
        } else {\n\
          result1 = null;\n\
          if (reportFailures === 0) {\n\
            matchFailed(\"\\\"0\\\"\");\n\
          }\n\
        }\n\
        if (result1 !== null) {\n\
          result0 = [];\n\
          while (result1 !== null) {\n\
            result0.push(result1);\n\
            if (input.charCodeAt(pos) === 48) {\n\
              result1 = \"0\";\n\
              pos++;\n\
            } else {\n\
              result1 = null;\n\
              if (reportFailures === 0) {\n\
                matchFailed(\"\\\"0\\\"\");\n\
              }\n\
            }\n\
          }\n\
        } else {\n\
          result0 = null;\n\
        }\n\
        if (result0 === null) {\n\
          if (input.charCodeAt(pos) === 49) {\n\
            result1 = \"1\";\n\
            pos++;\n\
          } else {\n\
            result1 = null;\n\
            if (reportFailures === 0) {\n\
              matchFailed(\"\\\"1\\\"\");\n\
            }\n\
          }\n\
          if (result1 !== null) {\n\
            result0 = [];\n\
            while (result1 !== null) {\n\
              result0.push(result1);\n\
              if (input.charCodeAt(pos) === 49) {\n\
                result1 = \"1\";\n\
                pos++;\n\
              } else {\n\
                result1 = null;\n\
                if (reportFailures === 0) {\n\
                  matchFailed(\"\\\"1\\\"\");\n\
                }\n\
              }\n\
            }\n\
          } else {\n\
            result0 = null;\n\
          }\n\
          if (result0 === null) {\n\
            if (input.charCodeAt(pos) === 50) {\n\
              result1 = \"2\";\n\
              pos++;\n\
            } else {\n\
              result1 = null;\n\
              if (reportFailures === 0) {\n\
                matchFailed(\"\\\"2\\\"\");\n\
              }\n\
            }\n\
            if (result1 !== null) {\n\
              result0 = [];\n\
              while (result1 !== null) {\n\
                result0.push(result1);\n\
                if (input.charCodeAt(pos) === 50) {\n\
                  result1 = \"2\";\n\
                  pos++;\n\
                } else {\n\
                  result1 = null;\n\
                  if (reportFailures === 0) {\n\
                    matchFailed(\"\\\"2\\\"\");\n\
                  }\n\
                }\n\
              }\n\
            } else {\n\
              result0 = null;\n\
            }\n\
            if (result0 === null) {\n\
              if (input.charCodeAt(pos) === 51) {\n\
                result1 = \"3\";\n\
                pos++;\n\
              } else {\n\
                result1 = null;\n\
                if (reportFailures === 0) {\n\
                  matchFailed(\"\\\"3\\\"\");\n\
                }\n\
              }\n\
              if (result1 !== null) {\n\
                result0 = [];\n\
                while (result1 !== null) {\n\
                  result0.push(result1);\n\
                  if (input.charCodeAt(pos) === 51) {\n\
                    result1 = \"3\";\n\
                    pos++;\n\
                  } else {\n\
                    result1 = null;\n\
                    if (reportFailures === 0) {\n\
                      matchFailed(\"\\\"3\\\"\");\n\
                    }\n\
                  }\n\
                }\n\
              } else {\n\
                result0 = null;\n\
              }\n\
              if (result0 === null) {\n\
                if (input.charCodeAt(pos) === 52) {\n\
                  result1 = \"4\";\n\
                  pos++;\n\
                } else {\n\
                  result1 = null;\n\
                  if (reportFailures === 0) {\n\
                    matchFailed(\"\\\"4\\\"\");\n\
                  }\n\
                }\n\
                if (result1 !== null) {\n\
                  result0 = [];\n\
                  while (result1 !== null) {\n\
                    result0.push(result1);\n\
                    if (input.charCodeAt(pos) === 52) {\n\
                      result1 = \"4\";\n\
                      pos++;\n\
                    } else {\n\
                      result1 = null;\n\
                      if (reportFailures === 0) {\n\
                        matchFailed(\"\\\"4\\\"\");\n\
                      }\n\
                    }\n\
                  }\n\
                } else {\n\
                  result0 = null;\n\
                }\n\
                if (result0 === null) {\n\
                  if (input.charCodeAt(pos) === 53) {\n\
                    result1 = \"5\";\n\
                    pos++;\n\
                  } else {\n\
                    result1 = null;\n\
                    if (reportFailures === 0) {\n\
                      matchFailed(\"\\\"5\\\"\");\n\
                    }\n\
                  }\n\
                  if (result1 !== null) {\n\
                    result0 = [];\n\
                    while (result1 !== null) {\n\
                      result0.push(result1);\n\
                      if (input.charCodeAt(pos) === 53) {\n\
                        result1 = \"5\";\n\
                        pos++;\n\
                      } else {\n\
                        result1 = null;\n\
                        if (reportFailures === 0) {\n\
                          matchFailed(\"\\\"5\\\"\");\n\
                        }\n\
                      }\n\
                    }\n\
                  } else {\n\
                    result0 = null;\n\
                  }\n\
                  if (result0 === null) {\n\
                    if (input.charCodeAt(pos) === 54) {\n\
                      result1 = \"6\";\n\
                      pos++;\n\
                    } else {\n\
                      result1 = null;\n\
                      if (reportFailures === 0) {\n\
                        matchFailed(\"\\\"6\\\"\");\n\
                      }\n\
                    }\n\
                    if (result1 !== null) {\n\
                      result0 = [];\n\
                      while (result1 !== null) {\n\
                        result0.push(result1);\n\
                        if (input.charCodeAt(pos) === 54) {\n\
                          result1 = \"6\";\n\
                          pos++;\n\
                        } else {\n\
                          result1 = null;\n\
                          if (reportFailures === 0) {\n\
                            matchFailed(\"\\\"6\\\"\");\n\
                          }\n\
                        }\n\
                      }\n\
                    } else {\n\
                      result0 = null;\n\
                    }\n\
                    if (result0 === null) {\n\
                      if (input.charCodeAt(pos) === 55) {\n\
                        result1 = \"7\";\n\
                        pos++;\n\
                      } else {\n\
                        result1 = null;\n\
                        if (reportFailures === 0) {\n\
                          matchFailed(\"\\\"7\\\"\");\n\
                        }\n\
                      }\n\
                      if (result1 !== null) {\n\
                        result0 = [];\n\
                        while (result1 !== null) {\n\
                          result0.push(result1);\n\
                          if (input.charCodeAt(pos) === 55) {\n\
                            result1 = \"7\";\n\
                            pos++;\n\
                          } else {\n\
                            result1 = null;\n\
                            if (reportFailures === 0) {\n\
                              matchFailed(\"\\\"7\\\"\");\n\
                            }\n\
                          }\n\
                        }\n\
                      } else {\n\
                        result0 = null;\n\
                      }\n\
                      if (result0 === null) {\n\
                        if (input.charCodeAt(pos) === 56) {\n\
                          result1 = \"8\";\n\
                          pos++;\n\
                        } else {\n\
                          result1 = null;\n\
                          if (reportFailures === 0) {\n\
                            matchFailed(\"\\\"8\\\"\");\n\
                          }\n\
                        }\n\
                        if (result1 !== null) {\n\
                          result0 = [];\n\
                          while (result1 !== null) {\n\
                            result0.push(result1);\n\
                            if (input.charCodeAt(pos) === 56) {\n\
                              result1 = \"8\";\n\
                              pos++;\n\
                            } else {\n\
                              result1 = null;\n\
                              if (reportFailures === 0) {\n\
                                matchFailed(\"\\\"8\\\"\");\n\
                              }\n\
                            }\n\
                          }\n\
                        } else {\n\
                          result0 = null;\n\
                        }\n\
                        if (result0 === null) {\n\
                          if (input.charCodeAt(pos) === 57) {\n\
                            result1 = \"9\";\n\
                            pos++;\n\
                          } else {\n\
                            result1 = null;\n\
                            if (reportFailures === 0) {\n\
                              matchFailed(\"\\\"9\\\"\");\n\
                            }\n\
                          }\n\
                          if (result1 !== null) {\n\
                            result0 = [];\n\
                            while (result1 !== null) {\n\
                              result0.push(result1);\n\
                              if (input.charCodeAt(pos) === 57) {\n\
                                result1 = \"9\";\n\
                                pos++;\n\
                              } else {\n\
                                result1 = null;\n\
                                if (reportFailures === 0) {\n\
                                  matchFailed(\"\\\"9\\\"\");\n\
                                }\n\
                              }\n\
                            }\n\
                          } else {\n\
                            result0 = null;\n\
                          }\n\
                          if (result0 === null) {\n\
                            if (input.charCodeAt(pos) === 97) {\n\
                              result1 = \"a\";\n\
                              pos++;\n\
                            } else {\n\
                              result1 = null;\n\
                              if (reportFailures === 0) {\n\
                                matchFailed(\"\\\"a\\\"\");\n\
                              }\n\
                            }\n\
                            if (result1 !== null) {\n\
                              result0 = [];\n\
                              while (result1 !== null) {\n\
                                result0.push(result1);\n\
                                if (input.charCodeAt(pos) === 97) {\n\
                                  result1 = \"a\";\n\
                                  pos++;\n\
                                } else {\n\
                                  result1 = null;\n\
                                  if (reportFailures === 0) {\n\
                                    matchFailed(\"\\\"a\\\"\");\n\
                                  }\n\
                                }\n\
                              }\n\
                            } else {\n\
                              result0 = null;\n\
                            }\n\
                            if (result0 === null) {\n\
                              if (input.charCodeAt(pos) === 98) {\n\
                                result1 = \"b\";\n\
                                pos++;\n\
                              } else {\n\
                                result1 = null;\n\
                                if (reportFailures === 0) {\n\
                                  matchFailed(\"\\\"b\\\"\");\n\
                                }\n\
                              }\n\
                              if (result1 !== null) {\n\
                                result0 = [];\n\
                                while (result1 !== null) {\n\
                                  result0.push(result1);\n\
                                  if (input.charCodeAt(pos) === 98) {\n\
                                    result1 = \"b\";\n\
                                    pos++;\n\
                                  } else {\n\
                                    result1 = null;\n\
                                    if (reportFailures === 0) {\n\
                                      matchFailed(\"\\\"b\\\"\");\n\
                                    }\n\
                                  }\n\
                                }\n\
                              } else {\n\
                                result0 = null;\n\
                              }\n\
                              if (result0 === null) {\n\
                                if (input.charCodeAt(pos) === 99) {\n\
                                  result1 = \"c\";\n\
                                  pos++;\n\
                                } else {\n\
                                  result1 = null;\n\
                                  if (reportFailures === 0) {\n\
                                    matchFailed(\"\\\"c\\\"\");\n\
                                  }\n\
                                }\n\
                                if (result1 !== null) {\n\
                                  result0 = [];\n\
                                  while (result1 !== null) {\n\
                                    result0.push(result1);\n\
                                    if (input.charCodeAt(pos) === 99) {\n\
                                      result1 = \"c\";\n\
                                      pos++;\n\
                                    } else {\n\
                                      result1 = null;\n\
                                      if (reportFailures === 0) {\n\
                                        matchFailed(\"\\\"c\\\"\");\n\
                                      }\n\
                                    }\n\
                                  }\n\
                                } else {\n\
                                  result0 = null;\n\
                                }\n\
                                if (result0 === null) {\n\
                                  if (input.charCodeAt(pos) === 100) {\n\
                                    result1 = \"d\";\n\
                                    pos++;\n\
                                  } else {\n\
                                    result1 = null;\n\
                                    if (reportFailures === 0) {\n\
                                      matchFailed(\"\\\"d\\\"\");\n\
                                    }\n\
                                  }\n\
                                  if (result1 !== null) {\n\
                                    result0 = [];\n\
                                    while (result1 !== null) {\n\
                                      result0.push(result1);\n\
                                      if (input.charCodeAt(pos) === 100) {\n\
                                        result1 = \"d\";\n\
                                        pos++;\n\
                                      } else {\n\
                                        result1 = null;\n\
                                        if (reportFailures === 0) {\n\
                                          matchFailed(\"\\\"d\\\"\");\n\
                                        }\n\
                                      }\n\
                                    }\n\
                                  } else {\n\
                                    result0 = null;\n\
                                  }\n\
                                  if (result0 === null) {\n\
                                    if (input.charCodeAt(pos) === 101) {\n\
                                      result1 = \"e\";\n\
                                      pos++;\n\
                                    } else {\n\
                                      result1 = null;\n\
                                      if (reportFailures === 0) {\n\
                                        matchFailed(\"\\\"e\\\"\");\n\
                                      }\n\
                                    }\n\
                                    if (result1 !== null) {\n\
                                      result0 = [];\n\
                                      while (result1 !== null) {\n\
                                        result0.push(result1);\n\
                                        if (input.charCodeAt(pos) === 101) {\n\
                                          result1 = \"e\";\n\
                                          pos++;\n\
                                        } else {\n\
                                          result1 = null;\n\
                                          if (reportFailures === 0) {\n\
                                            matchFailed(\"\\\"e\\\"\");\n\
                                          }\n\
                                        }\n\
                                      }\n\
                                    } else {\n\
                                      result0 = null;\n\
                                    }\n\
                                    if (result0 === null) {\n\
                                      pos1 = pos;\n\
                                      if (input.charCodeAt(pos) === 102) {\n\
                                        result1 = \"f\";\n\
                                        pos++;\n\
                                      } else {\n\
                                        result1 = null;\n\
                                        if (reportFailures === 0) {\n\
                                          matchFailed(\"\\\"f\\\"\");\n\
                                        }\n\
                                      }\n\
                                      if (result1 !== null) {\n\
                                        result0 = [];\n\
                                        while (result1 !== null) {\n\
                                          result0.push(result1);\n\
                                          if (input.charCodeAt(pos) === 102) {\n\
                                            result1 = \"f\";\n\
                                            pos++;\n\
                                          } else {\n\
                                            result1 = null;\n\
                                            if (reportFailures === 0) {\n\
                                              matchFailed(\"\\\"f\\\"\");\n\
                                            }\n\
                                          }\n\
                                        }\n\
                                      } else {\n\
                                        result0 = null;\n\
                                      }\n\
                                      if (result0 !== null) {\n\
                                        if (input.charCodeAt(pos) === 103) {\n\
                                          result2 = \"g\";\n\
                                          pos++;\n\
                                        } else {\n\
                                          result2 = null;\n\
                                          if (reportFailures === 0) {\n\
                                            matchFailed(\"\\\"g\\\"\");\n\
                                          }\n\
                                        }\n\
                                        if (result2 !== null) {\n\
                                          result1 = [];\n\
                                          while (result2 !== null) {\n\
                                            result1.push(result2);\n\
                                            if (input.charCodeAt(pos) === 103) {\n\
                                              result2 = \"g\";\n\
                                              pos++;\n\
                                            } else {\n\
                                              result2 = null;\n\
                                              if (reportFailures === 0) {\n\
                                                matchFailed(\"\\\"g\\\"\");\n\
                                              }\n\
                                            }\n\
                                          }\n\
                                        } else {\n\
                                          result1 = null;\n\
                                        }\n\
                                        if (result1 !== null) {\n\
                                          result0 = [result0, result1];\n\
                                        } else {\n\
                                          result0 = null;\n\
                                          pos = pos1;\n\
                                        }\n\
                                      } else {\n\
                                        result0 = null;\n\
                                        pos = pos1;\n\
                                      }\n\
                                      if (result0 === null) {\n\
                                        if (input.charCodeAt(pos) === 104) {\n\
                                          result1 = \"h\";\n\
                                          pos++;\n\
                                        } else {\n\
                                          result1 = null;\n\
                                          if (reportFailures === 0) {\n\
                                            matchFailed(\"\\\"h\\\"\");\n\
                                          }\n\
                                        }\n\
                                        if (result1 !== null) {\n\
                                          result0 = [];\n\
                                          while (result1 !== null) {\n\
                                            result0.push(result1);\n\
                                            if (input.charCodeAt(pos) === 104) {\n\
                                              result1 = \"h\";\n\
                                              pos++;\n\
                                            } else {\n\
                                              result1 = null;\n\
                                              if (reportFailures === 0) {\n\
                                                matchFailed(\"\\\"h\\\"\");\n\
                                              }\n\
                                            }\n\
                                          }\n\
                                        } else {\n\
                                          result0 = null;\n\
                                        }\n\
                                        if (result0 === null) {\n\
                                          pos1 = pos;\n\
                                          if (input.charCodeAt(pos) === 105) {\n\
                                            result1 = \"i\";\n\
                                            pos++;\n\
                                          } else {\n\
                                            result1 = null;\n\
                                            if (reportFailures === 0) {\n\
                                              matchFailed(\"\\\"i\\\"\");\n\
                                            }\n\
                                          }\n\
                                          if (result1 !== null) {\n\
                                            result0 = [];\n\
                                            while (result1 !== null) {\n\
                                              result0.push(result1);\n\
                                              if (input.charCodeAt(pos) === 105) {\n\
                                                result1 = \"i\";\n\
                                                pos++;\n\
                                              } else {\n\
                                                result1 = null;\n\
                                                if (reportFailures === 0) {\n\
                                                  matchFailed(\"\\\"i\\\"\");\n\
                                                }\n\
                                              }\n\
                                            }\n\
                                          } else {\n\
                                            result0 = null;\n\
                                          }\n\
                                          if (result0 !== null) {\n\
                                            if (input.charCodeAt(pos) === 106) {\n\
                                              result2 = \"j\";\n\
                                              pos++;\n\
                                            } else {\n\
                                              result2 = null;\n\
                                              if (reportFailures === 0) {\n\
                                                matchFailed(\"\\\"j\\\"\");\n\
                                              }\n\
                                            }\n\
                                            if (result2 !== null) {\n\
                                              result1 = [];\n\
                                              while (result2 !== null) {\n\
                                                result1.push(result2);\n\
                                                if (input.charCodeAt(pos) === 106) {\n\
                                                  result2 = \"j\";\n\
                                                  pos++;\n\
                                                } else {\n\
                                                  result2 = null;\n\
                                                  if (reportFailures === 0) {\n\
                                                    matchFailed(\"\\\"j\\\"\");\n\
                                                  }\n\
                                                }\n\
                                              }\n\
                                            } else {\n\
                                              result1 = null;\n\
                                            }\n\
                                            if (result1 !== null) {\n\
                                              result0 = [result0, result1];\n\
                                            } else {\n\
                                              result0 = null;\n\
                                              pos = pos1;\n\
                                            }\n\
                                          } else {\n\
                                            result0 = null;\n\
                                            pos = pos1;\n\
                                          }\n\
                                          if (result0 === null) {\n\
                                            if (input.charCodeAt(pos) === 107) {\n\
                                              result1 = \"k\";\n\
                                              pos++;\n\
                                            } else {\n\
                                              result1 = null;\n\
                                              if (reportFailures === 0) {\n\
                                                matchFailed(\"\\\"k\\\"\");\n\
                                              }\n\
                                            }\n\
                                            if (result1 !== null) {\n\
                                              result0 = [];\n\
                                              while (result1 !== null) {\n\
                                                result0.push(result1);\n\
                                                if (input.charCodeAt(pos) === 107) {\n\
                                                  result1 = \"k\";\n\
                                                  pos++;\n\
                                                } else {\n\
                                                  result1 = null;\n\
                                                  if (reportFailures === 0) {\n\
                                                    matchFailed(\"\\\"k\\\"\");\n\
                                                  }\n\
                                                }\n\
                                              }\n\
                                            } else {\n\
                                              result0 = null;\n\
                                            }\n\
                                            if (result0 === null) {\n\
                                              pos1 = pos;\n\
                                              if (input.charCodeAt(pos) === 108) {\n\
                                                result1 = \"l\";\n\
                                                pos++;\n\
                                              } else {\n\
                                                result1 = null;\n\
                                                if (reportFailures === 0) {\n\
                                                  matchFailed(\"\\\"l\\\"\");\n\
                                                }\n\
                                              }\n\
                                              if (result1 !== null) {\n\
                                                result0 = [];\n\
                                                while (result1 !== null) {\n\
                                                  result0.push(result1);\n\
                                                  if (input.charCodeAt(pos) === 108) {\n\
                                                    result1 = \"l\";\n\
                                                    pos++;\n\
                                                  } else {\n\
                                                    result1 = null;\n\
                                                    if (reportFailures === 0) {\n\
                                                      matchFailed(\"\\\"l\\\"\");\n\
                                                    }\n\
                                                  }\n\
                                                }\n\
                                              } else {\n\
                                                result0 = null;\n\
                                              }\n\
                                              if (result0 !== null) {\n\
                                                if (input.charCodeAt(pos) === 109) {\n\
                                                  result2 = \"m\";\n\
                                                  pos++;\n\
                                                } else {\n\
                                                  result2 = null;\n\
                                                  if (reportFailures === 0) {\n\
                                                    matchFailed(\"\\\"m\\\"\");\n\
                                                  }\n\
                                                }\n\
                                                if (result2 !== null) {\n\
                                                  result1 = [];\n\
                                                  while (result2 !== null) {\n\
                                                    result1.push(result2);\n\
                                                    if (input.charCodeAt(pos) === 109) {\n\
                                                      result2 = \"m\";\n\
                                                      pos++;\n\
                                                    } else {\n\
                                                      result2 = null;\n\
                                                      if (reportFailures === 0) {\n\
                                                        matchFailed(\"\\\"m\\\"\");\n\
                                                      }\n\
                                                    }\n\
                                                  }\n\
                                                } else {\n\
                                                  result1 = null;\n\
                                                }\n\
                                                if (result1 !== null) {\n\
                                                  result0 = [result0, result1];\n\
                                                } else {\n\
                                                  result0 = null;\n\
                                                  pos = pos1;\n\
                                                }\n\
                                              } else {\n\
                                                result0 = null;\n\
                                                pos = pos1;\n\
                                              }\n\
                                              if (result0 === null) {\n\
                                                if (input.charCodeAt(pos) === 110) {\n\
                                                  result1 = \"n\";\n\
                                                  pos++;\n\
                                                } else {\n\
                                                  result1 = null;\n\
                                                  if (reportFailures === 0) {\n\
                                                    matchFailed(\"\\\"n\\\"\");\n\
                                                  }\n\
                                                }\n\
                                                if (result1 !== null) {\n\
                                                  result0 = [];\n\
                                                  while (result1 !== null) {\n\
                                                    result0.push(result1);\n\
                                                    if (input.charCodeAt(pos) === 110) {\n\
                                                      result1 = \"n\";\n\
                                                      pos++;\n\
                                                    } else {\n\
                                                      result1 = null;\n\
                                                      if (reportFailures === 0) {\n\
                                                        matchFailed(\"\\\"n\\\"\");\n\
                                                      }\n\
                                                    }\n\
                                                  }\n\
                                                } else {\n\
                                                  result0 = null;\n\
                                                }\n\
                                                if (result0 === null) {\n\
                                                  pos1 = pos;\n\
                                                  if (input.charCodeAt(pos) === 111) {\n\
                                                    result1 = \"o\";\n\
                                                    pos++;\n\
                                                  } else {\n\
                                                    result1 = null;\n\
                                                    if (reportFailures === 0) {\n\
                                                      matchFailed(\"\\\"o\\\"\");\n\
                                                    }\n\
                                                  }\n\
                                                  if (result1 !== null) {\n\
                                                    result0 = [];\n\
                                                    while (result1 !== null) {\n\
                                                      result0.push(result1);\n\
                                                      if (input.charCodeAt(pos) === 111) {\n\
                                                        result1 = \"o\";\n\
                                                        pos++;\n\
                                                      } else {\n\
                                                        result1 = null;\n\
                                                        if (reportFailures === 0) {\n\
                                                          matchFailed(\"\\\"o\\\"\");\n\
                                                        }\n\
                                                      }\n\
                                                    }\n\
                                                  } else {\n\
                                                    result0 = null;\n\
                                                  }\n\
                                                  if (result0 !== null) {\n\
                                                    if (input.charCodeAt(pos) === 112) {\n\
                                                      result2 = \"p\";\n\
                                                      pos++;\n\
                                                    } else {\n\
                                                      result2 = null;\n\
                                                      if (reportFailures === 0) {\n\
                                                        matchFailed(\"\\\"p\\\"\");\n\
                                                      }\n\
                                                    }\n\
                                                    if (result2 !== null) {\n\
                                                      result1 = [];\n\
                                                      while (result2 !== null) {\n\
                                                        result1.push(result2);\n\
                                                        if (input.charCodeAt(pos) === 112) {\n\
                                                          result2 = \"p\";\n\
                                                          pos++;\n\
                                                        } else {\n\
                                                          result2 = null;\n\
                                                          if (reportFailures === 0) {\n\
                                                            matchFailed(\"\\\"p\\\"\");\n\
                                                          }\n\
                                                        }\n\
                                                      }\n\
                                                    } else {\n\
                                                      result1 = null;\n\
                                                    }\n\
                                                    if (result1 !== null) {\n\
                                                      result0 = [result0, result1];\n\
                                                    } else {\n\
                                                      result0 = null;\n\
                                                      pos = pos1;\n\
                                                    }\n\
                                                  } else {\n\
                                                    result0 = null;\n\
                                                    pos = pos1;\n\
                                                  }\n\
                                                  if (result0 === null) {\n\
                                                    if (input.charCodeAt(pos) === 113) {\n\
                                                      result1 = \"q\";\n\
                                                      pos++;\n\
                                                    } else {\n\
                                                      result1 = null;\n\
                                                      if (reportFailures === 0) {\n\
                                                        matchFailed(\"\\\"q\\\"\");\n\
                                                      }\n\
                                                    }\n\
                                                    if (result1 !== null) {\n\
                                                      result0 = [];\n\
                                                      while (result1 !== null) {\n\
                                                        result0.push(result1);\n\
                                                        if (input.charCodeAt(pos) === 113) {\n\
                                                          result1 = \"q\";\n\
                                                          pos++;\n\
                                                        } else {\n\
                                                          result1 = null;\n\
                                                          if (reportFailures === 0) {\n\
                                                            matchFailed(\"\\\"q\\\"\");\n\
                                                          }\n\
                                                        }\n\
                                                      }\n\
                                                    } else {\n\
                                                      result0 = null;\n\
                                                    }\n\
                                                    if (result0 === null) {\n\
                                                      pos1 = pos;\n\
                                                      if (input.charCodeAt(pos) === 114) {\n\
                                                        result1 = \"r\";\n\
                                                        pos++;\n\
                                                      } else {\n\
                                                        result1 = null;\n\
                                                        if (reportFailures === 0) {\n\
                                                          matchFailed(\"\\\"r\\\"\");\n\
                                                        }\n\
                                                      }\n\
                                                      if (result1 !== null) {\n\
                                                        result0 = [];\n\
                                                        while (result1 !== null) {\n\
                                                          result0.push(result1);\n\
                                                          if (input.charCodeAt(pos) === 114) {\n\
                                                            result1 = \"r\";\n\
                                                            pos++;\n\
                                                          } else {\n\
                                                            result1 = null;\n\
                                                            if (reportFailures === 0) {\n\
                                                              matchFailed(\"\\\"r\\\"\");\n\
                                                            }\n\
                                                          }\n\
                                                        }\n\
                                                      } else {\n\
                                                        result0 = null;\n\
                                                      }\n\
                                                      if (result0 !== null) {\n\
                                                        if (input.charCodeAt(pos) === 115) {\n\
                                                          result2 = \"s\";\n\
                                                          pos++;\n\
                                                        } else {\n\
                                                          result2 = null;\n\
                                                          if (reportFailures === 0) {\n\
                                                            matchFailed(\"\\\"s\\\"\");\n\
                                                          }\n\
                                                        }\n\
                                                        if (result2 !== null) {\n\
                                                          result1 = [];\n\
                                                          while (result2 !== null) {\n\
                                                            result1.push(result2);\n\
                                                            if (input.charCodeAt(pos) === 115) {\n\
                                                              result2 = \"s\";\n\
                                                              pos++;\n\
                                                            } else {\n\
                                                              result2 = null;\n\
                                                              if (reportFailures === 0) {\n\
                                                                matchFailed(\"\\\"s\\\"\");\n\
                                                              }\n\
                                                            }\n\
                                                          }\n\
                                                        } else {\n\
                                                          result1 = null;\n\
                                                        }\n\
                                                        if (result1 !== null) {\n\
                                                          result0 = [result0, result1];\n\
                                                        } else {\n\
                                                          result0 = null;\n\
                                                          pos = pos1;\n\
                                                        }\n\
                                                      } else {\n\
                                                        result0 = null;\n\
                                                        pos = pos1;\n\
                                                      }\n\
                                                      if (result0 === null) {\n\
                                                        if (input.charCodeAt(pos) === 116) {\n\
                                                          result1 = \"t\";\n\
                                                          pos++;\n\
                                                        } else {\n\
                                                          result1 = null;\n\
                                                          if (reportFailures === 0) {\n\
                                                            matchFailed(\"\\\"t\\\"\");\n\
                                                          }\n\
                                                        }\n\
                                                        if (result1 !== null) {\n\
                                                          result0 = [];\n\
                                                          while (result1 !== null) {\n\
                                                            result0.push(result1);\n\
                                                            if (input.charCodeAt(pos) === 116) {\n\
                                                              result1 = \"t\";\n\
                                                              pos++;\n\
                                                            } else {\n\
                                                              result1 = null;\n\
                                                              if (reportFailures === 0) {\n\
                                                                matchFailed(\"\\\"t\\\"\");\n\
                                                              }\n\
                                                            }\n\
                                                          }\n\
                                                        } else {\n\
                                                          result0 = null;\n\
                                                        }\n\
                                                        if (result0 === null) {\n\
                                                          pos1 = pos;\n\
                                                          if (input.charCodeAt(pos) === 117) {\n\
                                                            result1 = \"u\";\n\
                                                            pos++;\n\
                                                          } else {\n\
                                                            result1 = null;\n\
                                                            if (reportFailures === 0) {\n\
                                                              matchFailed(\"\\\"u\\\"\");\n\
                                                            }\n\
                                                          }\n\
                                                          if (result1 !== null) {\n\
                                                            result0 = [];\n\
                                                            while (result1 !== null) {\n\
                                                              result0.push(result1);\n\
                                                              if (input.charCodeAt(pos) === 117) {\n\
                                                                result1 = \"u\";\n\
                                                                pos++;\n\
                                                              } else {\n\
                                                                result1 = null;\n\
                                                                if (reportFailures === 0) {\n\
                                                                  matchFailed(\"\\\"u\\\"\");\n\
                                                                }\n\
                                                              }\n\
                                                            }\n\
                                                          } else {\n\
                                                            result0 = null;\n\
                                                          }\n\
                                                          if (result0 !== null) {\n\
                                                            if (input.charCodeAt(pos) === 118) {\n\
                                                              result2 = \"v\";\n\
                                                              pos++;\n\
                                                            } else {\n\
                                                              result2 = null;\n\
                                                              if (reportFailures === 0) {\n\
                                                                matchFailed(\"\\\"v\\\"\");\n\
                                                              }\n\
                                                            }\n\
                                                            if (result2 !== null) {\n\
                                                              result1 = [];\n\
                                                              while (result2 !== null) {\n\
                                                                result1.push(result2);\n\
                                                                if (input.charCodeAt(pos) === 118) {\n\
                                                                  result2 = \"v\";\n\
                                                                  pos++;\n\
                                                                } else {\n\
                                                                  result2 = null;\n\
                                                                  if (reportFailures === 0) {\n\
                                                                    matchFailed(\"\\\"v\\\"\");\n\
                                                                  }\n\
                                                                }\n\
                                                              }\n\
                                                            } else {\n\
                                                              result1 = null;\n\
                                                            }\n\
                                                            if (result1 !== null) {\n\
                                                              result0 = [result0, result1];\n\
                                                            } else {\n\
                                                              result0 = null;\n\
                                                              pos = pos1;\n\
                                                            }\n\
                                                          } else {\n\
                                                            result0 = null;\n\
                                                            pos = pos1;\n\
                                                          }\n\
                                                          if (result0 === null) {\n\
                                                            if (input.charCodeAt(pos) === 119) {\n\
                                                              result1 = \"w\";\n\
                                                              pos++;\n\
                                                            } else {\n\
                                                              result1 = null;\n\
                                                              if (reportFailures === 0) {\n\
                                                                matchFailed(\"\\\"w\\\"\");\n\
                                                              }\n\
                                                            }\n\
                                                            if (result1 !== null) {\n\
                                                              result0 = [];\n\
                                                              while (result1 !== null) {\n\
                                                                result0.push(result1);\n\
                                                                if (input.charCodeAt(pos) === 119) {\n\
                                                                  result1 = \"w\";\n\
                                                                  pos++;\n\
                                                                } else {\n\
                                                                  result1 = null;\n\
                                                                  if (reportFailures === 0) {\n\
                                                                    matchFailed(\"\\\"w\\\"\");\n\
                                                                  }\n\
                                                                }\n\
                                                              }\n\
                                                            } else {\n\
                                                              result0 = null;\n\
                                                            }\n\
                                                            if (result0 === null) {\n\
                                                              pos1 = pos;\n\
                                                              if (input.charCodeAt(pos) === 120) {\n\
                                                                result1 = \"x\";\n\
                                                                pos++;\n\
                                                              } else {\n\
                                                                result1 = null;\n\
                                                                if (reportFailures === 0) {\n\
                                                                  matchFailed(\"\\\"x\\\"\");\n\
                                                                }\n\
                                                              }\n\
                                                              if (result1 !== null) {\n\
                                                                result0 = [];\n\
                                                                while (result1 !== null) {\n\
                                                                  result0.push(result1);\n\
                                                                  if (input.charCodeAt(pos) === 120) {\n\
                                                                    result1 = \"x\";\n\
                                                                    pos++;\n\
                                                                  } else {\n\
                                                                    result1 = null;\n\
                                                                    if (reportFailures === 0) {\n\
                                                                      matchFailed(\"\\\"x\\\"\");\n\
                                                                    }\n\
                                                                  }\n\
                                                                }\n\
                                                              } else {\n\
                                                                result0 = null;\n\
                                                              }\n\
                                                              if (result0 !== null) {\n\
                                                                if (input.charCodeAt(pos) === 121) {\n\
                                                                  result2 = \"y\";\n\
                                                                  pos++;\n\
                                                                } else {\n\
                                                                  result2 = null;\n\
                                                                  if (reportFailures === 0) {\n\
                                                                    matchFailed(\"\\\"y\\\"\");\n\
                                                                  }\n\
                                                                }\n\
                                                                if (result2 !== null) {\n\
                                                                  result1 = [];\n\
                                                                  while (result2 !== null) {\n\
                                                                    result1.push(result2);\n\
                                                                    if (input.charCodeAt(pos) === 121) {\n\
                                                                      result2 = \"y\";\n\
                                                                      pos++;\n\
                                                                    } else {\n\
                                                                      result2 = null;\n\
                                                                      if (reportFailures === 0) {\n\
                                                                        matchFailed(\"\\\"y\\\"\");\n\
                                                                      }\n\
                                                                    }\n\
                                                                  }\n\
                                                                } else {\n\
                                                                  result1 = null;\n\
                                                                }\n\
                                                                if (result1 !== null) {\n\
                                                                  result0 = [result0, result1];\n\
                                                                } else {\n\
                                                                  result0 = null;\n\
                                                                  pos = pos1;\n\
                                                                }\n\
                                                              } else {\n\
                                                                result0 = null;\n\
                                                                pos = pos1;\n\
                                                              }\n\
                                                              if (result0 === null) {\n\
                                                                if (input.charCodeAt(pos) === 122) {\n\
                                                                  result1 = \"z\";\n\
                                                                  pos++;\n\
                                                                } else {\n\
                                                                  result1 = null;\n\
                                                                  if (reportFailures === 0) {\n\
                                                                    matchFailed(\"\\\"z\\\"\");\n\
                                                                  }\n\
                                                                }\n\
                                                                if (result1 !== null) {\n\
                                                                  result0 = [];\n\
                                                                  while (result1 !== null) {\n\
                                                                    result0.push(result1);\n\
                                                                    if (input.charCodeAt(pos) === 122) {\n\
                                                                      result1 = \"z\";\n\
                                                                      pos++;\n\
                                                                    } else {\n\
                                                                      result1 = null;\n\
                                                                      if (reportFailures === 0) {\n\
                                                                        matchFailed(\"\\\"z\\\"\");\n\
                                                                      }\n\
                                                                    }\n\
                                                                  }\n\
                                                                } else {\n\
                                                                  result0 = null;\n\
                                                                }\n\
                                                                if (result0 === null) {\n\
                                                                  if (input.charCodeAt(pos) === 65) {\n\
                                                                    result1 = \"A\";\n\
                                                                    pos++;\n\
                                                                  } else {\n\
                                                                    result1 = null;\n\
                                                                    if (reportFailures === 0) {\n\
                                                                      matchFailed(\"\\\"A\\\"\");\n\
                                                                    }\n\
                                                                  }\n\
                                                                  if (result1 !== null) {\n\
                                                                    result0 = [];\n\
                                                                    while (result1 !== null) {\n\
                                                                      result0.push(result1);\n\
                                                                      if (input.charCodeAt(pos) === 65) {\n\
                                                                        result1 = \"A\";\n\
                                                                        pos++;\n\
                                                                      } else {\n\
                                                                        result1 = null;\n\
                                                                        if (reportFailures === 0) {\n\
                                                                          matchFailed(\"\\\"A\\\"\");\n\
                                                                        }\n\
                                                                      }\n\
                                                                    }\n\
                                                                  } else {\n\
                                                                    result0 = null;\n\
                                                                  }\n\
                                                                  if (result0 === null) {\n\
                                                                    if (input.charCodeAt(pos) === 66) {\n\
                                                                      result1 = \"B\";\n\
                                                                      pos++;\n\
                                                                    } else {\n\
                                                                      result1 = null;\n\
                                                                      if (reportFailures === 0) {\n\
                                                                        matchFailed(\"\\\"B\\\"\");\n\
                                                                      }\n\
                                                                    }\n\
                                                                    if (result1 !== null) {\n\
                                                                      result0 = [];\n\
                                                                      while (result1 !== null) {\n\
                                                                        result0.push(result1);\n\
                                                                        if (input.charCodeAt(pos) === 66) {\n\
                                                                          result1 = \"B\";\n\
                                                                          pos++;\n\
                                                                        } else {\n\
                                                                          result1 = null;\n\
                                                                          if (reportFailures === 0) {\n\
                                                                            matchFailed(\"\\\"B\\\"\");\n\
                                                                          }\n\
                                                                        }\n\
                                                                      }\n\
                                                                    } else {\n\
                                                                      result0 = null;\n\
                                                                    }\n\
                                                                    if (result0 === null) {\n\
                                                                      pos1 = pos;\n\
                                                                      if (input.charCodeAt(pos) === 67) {\n\
                                                                        result1 = \"C\";\n\
                                                                        pos++;\n\
                                                                      } else {\n\
                                                                        result1 = null;\n\
                                                                        if (reportFailures === 0) {\n\
                                                                          matchFailed(\"\\\"C\\\"\");\n\
                                                                        }\n\
                                                                      }\n\
                                                                      if (result1 !== null) {\n\
                                                                        result0 = [];\n\
                                                                        while (result1 !== null) {\n\
                                                                          result0.push(result1);\n\
                                                                          if (input.charCodeAt(pos) === 67) {\n\
                                                                            result1 = \"C\";\n\
                                                                            pos++;\n\
                                                                          } else {\n\
                                                                            result1 = null;\n\
                                                                            if (reportFailures === 0) {\n\
                                                                              matchFailed(\"\\\"C\\\"\");\n\
                                                                            }\n\
                                                                          }\n\
                                                                        }\n\
                                                                      } else {\n\
                                                                        result0 = null;\n\
                                                                      }\n\
                                                                      if (result0 !== null) {\n\
                                                                        if (input.charCodeAt(pos) === 68) {\n\
                                                                          result2 = \"D\";\n\
                                                                          pos++;\n\
                                                                        } else {\n\
                                                                          result2 = null;\n\
                                                                          if (reportFailures === 0) {\n\
                                                                            matchFailed(\"\\\"D\\\"\");\n\
                                                                          }\n\
                                                                        }\n\
                                                                        if (result2 !== null) {\n\
                                                                          result1 = [];\n\
                                                                          while (result2 !== null) {\n\
                                                                            result1.push(result2);\n\
                                                                            if (input.charCodeAt(pos) === 68) {\n\
                                                                              result2 = \"D\";\n\
                                                                              pos++;\n\
                                                                            } else {\n\
                                                                              result2 = null;\n\
                                                                              if (reportFailures === 0) {\n\
                                                                                matchFailed(\"\\\"D\\\"\");\n\
                                                                              }\n\
                                                                            }\n\
                                                                          }\n\
                                                                        } else {\n\
                                                                          result1 = null;\n\
                                                                        }\n\
                                                                        if (result1 !== null) {\n\
                                                                          result0 = [result0, result1];\n\
                                                                        } else {\n\
                                                                          result0 = null;\n\
                                                                          pos = pos1;\n\
                                                                        }\n\
                                                                      } else {\n\
                                                                        result0 = null;\n\
                                                                        pos = pos1;\n\
                                                                      }\n\
                                                                      if (result0 === null) {\n\
                                                                        if (input.charCodeAt(pos) === 69) {\n\
                                                                          result1 = \"E\";\n\
                                                                          pos++;\n\
                                                                        } else {\n\
                                                                          result1 = null;\n\
                                                                          if (reportFailures === 0) {\n\
                                                                            matchFailed(\"\\\"E\\\"\");\n\
                                                                          }\n\
                                                                        }\n\
                                                                        if (result1 !== null) {\n\
                                                                          result0 = [];\n\
                                                                          while (result1 !== null) {\n\
                                                                            result0.push(result1);\n\
                                                                            if (input.charCodeAt(pos) === 69) {\n\
                                                                              result1 = \"E\";\n\
                                                                              pos++;\n\
                                                                            } else {\n\
                                                                              result1 = null;\n\
                                                                              if (reportFailures === 0) {\n\
                                                                                matchFailed(\"\\\"E\\\"\");\n\
                                                                              }\n\
                                                                            }\n\
                                                                          }\n\
                                                                        } else {\n\
                                                                          result0 = null;\n\
                                                                        }\n\
                                                                        if (result0 === null) {\n\
                                                                          pos1 = pos;\n\
                                                                          if (input.charCodeAt(pos) === 70) {\n\
                                                                            result1 = \"F\";\n\
                                                                            pos++;\n\
                                                                          } else {\n\
                                                                            result1 = null;\n\
                                                                            if (reportFailures === 0) {\n\
                                                                              matchFailed(\"\\\"F\\\"\");\n\
                                                                            }\n\
                                                                          }\n\
                                                                          if (result1 !== null) {\n\
                                                                            result0 = [];\n\
                                                                            while (result1 !== null) {\n\
                                                                              result0.push(result1);\n\
                                                                              if (input.charCodeAt(pos) === 70) {\n\
                                                                                result1 = \"F\";\n\
                                                                                pos++;\n\
                                                                              } else {\n\
                                                                                result1 = null;\n\
                                                                                if (reportFailures === 0) {\n\
                                                                                  matchFailed(\"\\\"F\\\"\");\n\
                                                                                }\n\
                                                                              }\n\
                                                                            }\n\
                                                                          } else {\n\
                                                                            result0 = null;\n\
                                                                          }\n\
                                                                          if (result0 !== null) {\n\
                                                                            if (input.charCodeAt(pos) === 71) {\n\
                                                                              result2 = \"G\";\n\
                                                                              pos++;\n\
                                                                            } else {\n\
                                                                              result2 = null;\n\
                                                                              if (reportFailures === 0) {\n\
                                                                                matchFailed(\"\\\"G\\\"\");\n\
                                                                              }\n\
                                                                            }\n\
                                                                            if (result2 !== null) {\n\
                                                                              result1 = [];\n\
                                                                              while (result2 !== null) {\n\
                                                                                result1.push(result2);\n\
                                                                                if (input.charCodeAt(pos) === 71) {\n\
                                                                                  result2 = \"G\";\n\
                                                                                  pos++;\n\
                                                                                } else {\n\
                                                                                  result2 = null;\n\
                                                                                  if (reportFailures === 0) {\n\
                                                                                    matchFailed(\"\\\"G\\\"\");\n\
                                                                                  }\n\
                                                                                }\n\
                                                                              }\n\
                                                                            } else {\n\
                                                                              result1 = null;\n\
                                                                            }\n\
                                                                            if (result1 !== null) {\n\
                                                                              result0 = [result0, result1];\n\
                                                                            } else {\n\
                                                                              result0 = null;\n\
                                                                              pos = pos1;\n\
                                                                            }\n\
                                                                          } else {\n\
                                                                            result0 = null;\n\
                                                                            pos = pos1;\n\
                                                                          }\n\
                                                                          if (result0 === null) {\n\
                                                                            if (input.charCodeAt(pos) === 72) {\n\
                                                                              result1 = \"H\";\n\
                                                                              pos++;\n\
                                                                            } else {\n\
                                                                              result1 = null;\n\
                                                                              if (reportFailures === 0) {\n\
                                                                                matchFailed(\"\\\"H\\\"\");\n\
                                                                              }\n\
                                                                            }\n\
                                                                            if (result1 !== null) {\n\
                                                                              result0 = [];\n\
                                                                              while (result1 !== null) {\n\
                                                                                result0.push(result1);\n\
                                                                                if (input.charCodeAt(pos) === 72) {\n\
                                                                                  result1 = \"H\";\n\
                                                                                  pos++;\n\
                                                                                } else {\n\
                                                                                  result1 = null;\n\
                                                                                  if (reportFailures === 0) {\n\
                                                                                    matchFailed(\"\\\"H\\\"\");\n\
                                                                                  }\n\
                                                                                }\n\
                                                                              }\n\
                                                                            } else {\n\
                                                                              result0 = null;\n\
                                                                            }\n\
                                                                            if (result0 === null) {\n\
                                                                              pos1 = pos;\n\
                                                                              if (input.charCodeAt(pos) === 73) {\n\
                                                                                result1 = \"I\";\n\
                                                                                pos++;\n\
                                                                              } else {\n\
                                                                                result1 = null;\n\
                                                                                if (reportFailures === 0) {\n\
                                                                                  matchFailed(\"\\\"I\\\"\");\n\
                                                                                }\n\
                                                                              }\n\
                                                                              if (result1 !== null) {\n\
                                                                                result0 = [];\n\
                                                                                while (result1 !== null) {\n\
                                                                                  result0.push(result1);\n\
                                                                                  if (input.charCodeAt(pos) === 73) {\n\
                                                                                    result1 = \"I\";\n\
                                                                                    pos++;\n\
                                                                                  } else {\n\
                                                                                    result1 = null;\n\
                                                                                    if (reportFailures === 0) {\n\
                                                                                      matchFailed(\"\\\"I\\\"\");\n\
                                                                                    }\n\
                                                                                  }\n\
                                                                                }\n\
                                                                              } else {\n\
                                                                                result0 = null;\n\
                                                                              }\n\
                                                                              if (result0 !== null) {\n\
                                                                                if (input.charCodeAt(pos) === 74) {\n\
                                                                                  result2 = \"J\";\n\
                                                                                  pos++;\n\
                                                                                } else {\n\
                                                                                  result2 = null;\n\
                                                                                  if (reportFailures === 0) {\n\
                                                                                    matchFailed(\"\\\"J\\\"\");\n\
                                                                                  }\n\
                                                                                }\n\
                                                                                if (result2 !== null) {\n\
                                                                                  result1 = [];\n\
                                                                                  while (result2 !== null) {\n\
                                                                                    result1.push(result2);\n\
                                                                                    if (input.charCodeAt(pos) === 74) {\n\
                                                                                      result2 = \"J\";\n\
                                                                                      pos++;\n\
                                                                                    } else {\n\
                                                                                      result2 = null;\n\
                                                                                      if (reportFailures === 0) {\n\
                                                                                        matchFailed(\"\\\"J\\\"\");\n\
                                                                                      }\n\
                                                                                    }\n\
                                                                                  }\n\
                                                                                } else {\n\
                                                                                  result1 = null;\n\
                                                                                }\n\
                                                                                if (result1 !== null) {\n\
                                                                                  result0 = [result0, result1];\n\
                                                                                } else {\n\
                                                                                  result0 = null;\n\
                                                                                  pos = pos1;\n\
                                                                                }\n\
                                                                              } else {\n\
                                                                                result0 = null;\n\
                                                                                pos = pos1;\n\
                                                                              }\n\
                                                                              if (result0 === null) {\n\
                                                                                if (input.charCodeAt(pos) === 75) {\n\
                                                                                  result1 = \"K\";\n\
                                                                                  pos++;\n\
                                                                                } else {\n\
                                                                                  result1 = null;\n\
                                                                                  if (reportFailures === 0) {\n\
                                                                                    matchFailed(\"\\\"K\\\"\");\n\
                                                                                  }\n\
                                                                                }\n\
                                                                                if (result1 !== null) {\n\
                                                                                  result0 = [];\n\
                                                                                  while (result1 !== null) {\n\
                                                                                    result0.push(result1);\n\
                                                                                    if (input.charCodeAt(pos) === 75) {\n\
                                                                                      result1 = \"K\";\n\
                                                                                      pos++;\n\
                                                                                    } else {\n\
                                                                                      result1 = null;\n\
                                                                                      if (reportFailures === 0) {\n\
                                                                                        matchFailed(\"\\\"K\\\"\");\n\
                                                                                      }\n\
                                                                                    }\n\
                                                                                  }\n\
                                                                                } else {\n\
                                                                                  result0 = null;\n\
                                                                                }\n\
                                                                                if (result0 === null) {\n\
                                                                                  pos1 = pos;\n\
                                                                                  if (input.charCodeAt(pos) === 76) {\n\
                                                                                    result1 = \"L\";\n\
                                                                                    pos++;\n\
                                                                                  } else {\n\
                                                                                    result1 = null;\n\
                                                                                    if (reportFailures === 0) {\n\
                                                                                      matchFailed(\"\\\"L\\\"\");\n\
                                                                                    }\n\
                                                                                  }\n\
                                                                                  if (result1 !== null) {\n\
                                                                                    result0 = [];\n\
                                                                                    while (result1 !== null) {\n\
                                                                                      result0.push(result1);\n\
                                                                                      if (input.charCodeAt(pos) === 76) {\n\
                                                                                        result1 = \"L\";\n\
                                                                                        pos++;\n\
                                                                                      } else {\n\
                                                                                        result1 = null;\n\
                                                                                        if (reportFailures === 0) {\n\
                                                                                          matchFailed(\"\\\"L\\\"\");\n\
                                                                                        }\n\
                                                                                      }\n\
                                                                                    }\n\
                                                                                  } else {\n\
                                                                                    result0 = null;\n\
                                                                                  }\n\
                                                                                  if (result0 !== null) {\n\
                                                                                    if (input.charCodeAt(pos) === 77) {\n\
                                                                                      result2 = \"M\";\n\
                                                                                      pos++;\n\
                                                                                    } else {\n\
                                                                                      result2 = null;\n\
                                                                                      if (reportFailures === 0) {\n\
                                                                                        matchFailed(\"\\\"M\\\"\");\n\
                                                                                      }\n\
                                                                                    }\n\
                                                                                    if (result2 !== null) {\n\
                                                                                      result1 = [];\n\
                                                                                      while (result2 !== null) {\n\
                                                                                        result1.push(result2);\n\
                                                                                        if (input.charCodeAt(pos) === 77) {\n\
                                                                                          result2 = \"M\";\n\
                                                                                          pos++;\n\
                                                                                        } else {\n\
                                                                                          result2 = null;\n\
                                                                                          if (reportFailures === 0) {\n\
                                                                                            matchFailed(\"\\\"M\\\"\");\n\
                                                                                          }\n\
                                                                                        }\n\
                                                                                      }\n\
                                                                                    } else {\n\
                                                                                      result1 = null;\n\
                                                                                    }\n\
                                                                                    if (result1 !== null) {\n\
                                                                                      result0 = [result0, result1];\n\
                                                                                    } else {\n\
                                                                                      result0 = null;\n\
                                                                                      pos = pos1;\n\
                                                                                    }\n\
                                                                                  } else {\n\
                                                                                    result0 = null;\n\
                                                                                    pos = pos1;\n\
                                                                                  }\n\
                                                                                  if (result0 === null) {\n\
                                                                                    if (input.charCodeAt(pos) === 78) {\n\
                                                                                      result1 = \"N\";\n\
                                                                                      pos++;\n\
                                                                                    } else {\n\
                                                                                      result1 = null;\n\
                                                                                      if (reportFailures === 0) {\n\
                                                                                        matchFailed(\"\\\"N\\\"\");\n\
                                                                                      }\n\
                                                                                    }\n\
                                                                                    if (result1 !== null) {\n\
                                                                                      result0 = [];\n\
                                                                                      while (result1 !== null) {\n\
                                                                                        result0.push(result1);\n\
                                                                                        if (input.charCodeAt(pos) === 78) {\n\
                                                                                          result1 = \"N\";\n\
                                                                                          pos++;\n\
                                                                                        } else {\n\
                                                                                          result1 = null;\n\
                                                                                          if (reportFailures === 0) {\n\
                                                                                            matchFailed(\"\\\"N\\\"\");\n\
                                                                                          }\n\
                                                                                        }\n\
                                                                                      }\n\
                                                                                    } else {\n\
                                                                                      result0 = null;\n\
                                                                                    }\n\
                                                                                    if (result0 === null) {\n\
                                                                                      pos1 = pos;\n\
                                                                                      if (input.charCodeAt(pos) === 79) {\n\
                                                                                        result1 = \"O\";\n\
                                                                                        pos++;\n\
                                                                                      } else {\n\
                                                                                        result1 = null;\n\
                                                                                        if (reportFailures === 0) {\n\
                                                                                          matchFailed(\"\\\"O\\\"\");\n\
                                                                                        }\n\
                                                                                      }\n\
                                                                                      if (result1 !== null) {\n\
                                                                                        result0 = [];\n\
                                                                                        while (result1 !== null) {\n\
                                                                                          result0.push(result1);\n\
                                                                                          if (input.charCodeAt(pos) === 79) {\n\
                                                                                            result1 = \"O\";\n\
                                                                                            pos++;\n\
                                                                                          } else {\n\
                                                                                            result1 = null;\n\
                                                                                            if (reportFailures === 0) {\n\
                                                                                              matchFailed(\"\\\"O\\\"\");\n\
                                                                                            }\n\
                                                                                          }\n\
                                                                                        }\n\
                                                                                      } else {\n\
                                                                                        result0 = null;\n\
                                                                                      }\n\
                                                                                      if (result0 !== null) {\n\
                                                                                        if (input.charCodeAt(pos) === 80) {\n\
                                                                                          result2 = \"P\";\n\
                                                                                          pos++;\n\
                                                                                        } else {\n\
                                                                                          result2 = null;\n\
                                                                                          if (reportFailures === 0) {\n\
                                                                                            matchFailed(\"\\\"P\\\"\");\n\
                                                                                          }\n\
                                                                                        }\n\
                                                                                        if (result2 !== null) {\n\
                                                                                          result1 = [];\n\
                                                                                          while (result2 !== null) {\n\
                                                                                            result1.push(result2);\n\
                                                                                            if (input.charCodeAt(pos) === 80) {\n\
                                                                                              result2 = \"P\";\n\
                                                                                              pos++;\n\
                                                                                            } else {\n\
                                                                                              result2 = null;\n\
                                                                                              if (reportFailures === 0) {\n\
                                                                                                matchFailed(\"\\\"P\\\"\");\n\
                                                                                              }\n\
                                                                                            }\n\
                                                                                          }\n\
                                                                                        } else {\n\
                                                                                          result1 = null;\n\
                                                                                        }\n\
                                                                                        if (result1 !== null) {\n\
                                                                                          result0 = [result0, result1];\n\
                                                                                        } else {\n\
                                                                                          result0 = null;\n\
                                                                                          pos = pos1;\n\
                                                                                        }\n\
                                                                                      } else {\n\
                                                                                        result0 = null;\n\
                                                                                        pos = pos1;\n\
                                                                                      }\n\
                                                                                      if (result0 === null) {\n\
                                                                                        if (input.charCodeAt(pos) === 81) {\n\
                                                                                          result1 = \"Q\";\n\
                                                                                          pos++;\n\
                                                                                        } else {\n\
                                                                                          result1 = null;\n\
                                                                                          if (reportFailures === 0) {\n\
                                                                                            matchFailed(\"\\\"Q\\\"\");\n\
                                                                                          }\n\
                                                                                        }\n\
                                                                                        if (result1 !== null) {\n\
                                                                                          result0 = [];\n\
                                                                                          while (result1 !== null) {\n\
                                                                                            result0.push(result1);\n\
                                                                                            if (input.charCodeAt(pos) === 81) {\n\
                                                                                              result1 = \"Q\";\n\
                                                                                              pos++;\n\
                                                                                            } else {\n\
                                                                                              result1 = null;\n\
                                                                                              if (reportFailures === 0) {\n\
                                                                                                matchFailed(\"\\\"Q\\\"\");\n\
                                                                                              }\n\
                                                                                            }\n\
                                                                                          }\n\
                                                                                        } else {\n\
                                                                                          result0 = null;\n\
                                                                                        }\n\
                                                                                        if (result0 === null) {\n\
                                                                                          pos1 = pos;\n\
                                                                                          if (input.charCodeAt(pos) === 82) {\n\
                                                                                            result1 = \"R\";\n\
                                                                                            pos++;\n\
                                                                                          } else {\n\
                                                                                            result1 = null;\n\
                                                                                            if (reportFailures === 0) {\n\
                                                                                              matchFailed(\"\\\"R\\\"\");\n\
                                                                                            }\n\
                                                                                          }\n\
                                                                                          if (result1 !== null) {\n\
                                                                                            result0 = [];\n\
                                                                                            while (result1 !== null) {\n\
                                                                                              result0.push(result1);\n\
                                                                                              if (input.charCodeAt(pos) === 82) {\n\
                                                                                                result1 = \"R\";\n\
                                                                                                pos++;\n\
                                                                                              } else {\n\
                                                                                                result1 = null;\n\
                                                                                                if (reportFailures === 0) {\n\
                                                                                                  matchFailed(\"\\\"R\\\"\");\n\
                                                                                                }\n\
                                                                                              }\n\
                                                                                            }\n\
                                                                                          } else {\n\
                                                                                            result0 = null;\n\
                                                                                          }\n\
                                                                                          if (result0 !== null) {\n\
                                                                                            if (input.charCodeAt(pos) === 83) {\n\
                                                                                              result2 = \"S\";\n\
                                                                                              pos++;\n\
                                                                                            } else {\n\
                                                                                              result2 = null;\n\
                                                                                              if (reportFailures === 0) {\n\
                                                                                                matchFailed(\"\\\"S\\\"\");\n\
                                                                                              }\n\
                                                                                            }\n\
                                                                                            if (result2 !== null) {\n\
                                                                                              result1 = [];\n\
                                                                                              while (result2 !== null) {\n\
                                                                                                result1.push(result2);\n\
                                                                                                if (input.charCodeAt(pos) === 83) {\n\
                                                                                                  result2 = \"S\";\n\
                                                                                                  pos++;\n\
                                                                                                } else {\n\
                                                                                                  result2 = null;\n\
                                                                                                  if (reportFailures === 0) {\n\
                                                                                                    matchFailed(\"\\\"S\\\"\");\n\
                                                                                                  }\n\
                                                                                                }\n\
                                                                                              }\n\
                                                                                            } else {\n\
                                                                                              result1 = null;\n\
                                                                                            }\n\
                                                                                            if (result1 !== null) {\n\
                                                                                              result0 = [result0, result1];\n\
                                                                                            } else {\n\
                                                                                              result0 = null;\n\
                                                                                              pos = pos1;\n\
                                                                                            }\n\
                                                                                          } else {\n\
                                                                                            result0 = null;\n\
                                                                                            pos = pos1;\n\
                                                                                          }\n\
                                                                                          if (result0 === null) {\n\
                                                                                            if (input.charCodeAt(pos) === 84) {\n\
                                                                                              result1 = \"T\";\n\
                                                                                              pos++;\n\
                                                                                            } else {\n\
                                                                                              result1 = null;\n\
                                                                                              if (reportFailures === 0) {\n\
                                                                                                matchFailed(\"\\\"T\\\"\");\n\
                                                                                              }\n\
                                                                                            }\n\
                                                                                            if (result1 !== null) {\n\
                                                                                              result0 = [];\n\
                                                                                              while (result1 !== null) {\n\
                                                                                                result0.push(result1);\n\
                                                                                                if (input.charCodeAt(pos) === 84) {\n\
                                                                                                  result1 = \"T\";\n\
                                                                                                  pos++;\n\
                                                                                                } else {\n\
                                                                                                  result1 = null;\n\
                                                                                                  if (reportFailures === 0) {\n\
                                                                                                    matchFailed(\"\\\"T\\\"\");\n\
                                                                                                  }\n\
                                                                                                }\n\
                                                                                              }\n\
                                                                                            } else {\n\
                                                                                              result0 = null;\n\
                                                                                            }\n\
                                                                                            if (result0 === null) {\n\
                                                                                              pos1 = pos;\n\
                                                                                              if (input.charCodeAt(pos) === 85) {\n\
                                                                                                result1 = \"U\";\n\
                                                                                                pos++;\n\
                                                                                              } else {\n\
                                                                                                result1 = null;\n\
                                                                                                if (reportFailures === 0) {\n\
                                                                                                  matchFailed(\"\\\"U\\\"\");\n\
                                                                                                }\n\
                                                                                              }\n\
                                                                                              if (result1 !== null) {\n\
                                                                                                result0 = [];\n\
                                                                                                while (result1 !== null) {\n\
                                                                                                  result0.push(result1);\n\
                                                                                                  if (input.charCodeAt(pos) === 85) {\n\
                                                                                                    result1 = \"U\";\n\
                                                                                                    pos++;\n\
                                                                                                  } else {\n\
                                                                                                    result1 = null;\n\
                                                                                                    if (reportFailures === 0) {\n\
                                                                                                      matchFailed(\"\\\"U\\\"\");\n\
                                                                                                    }\n\
                                                                                                  }\n\
                                                                                                }\n\
                                                                                              } else {\n\
                                                                                                result0 = null;\n\
                                                                                              }\n\
                                                                                              if (result0 !== null) {\n\
                                                                                                if (input.charCodeAt(pos) === 86) {\n\
                                                                                                  result2 = \"V\";\n\
                                                                                                  pos++;\n\
                                                                                                } else {\n\
                                                                                                  result2 = null;\n\
                                                                                                  if (reportFailures === 0) {\n\
                                                                                                    matchFailed(\"\\\"V\\\"\");\n\
                                                                                                  }\n\
                                                                                                }\n\
                                                                                                if (result2 !== null) {\n\
                                                                                                  result1 = [];\n\
                                                                                                  while (result2 !== null) {\n\
                                                                                                    result1.push(result2);\n\
                                                                                                    if (input.charCodeAt(pos) === 86) {\n\
                                                                                                      result2 = \"V\";\n\
                                                                                                      pos++;\n\
                                                                                                    } else {\n\
                                                                                                      result2 = null;\n\
                                                                                                      if (reportFailures === 0) {\n\
                                                                                                        matchFailed(\"\\\"V\\\"\");\n\
                                                                                                      }\n\
                                                                                                    }\n\
                                                                                                  }\n\
                                                                                                } else {\n\
                                                                                                  result1 = null;\n\
                                                                                                }\n\
                                                                                                if (result1 !== null) {\n\
                                                                                                  result0 = [result0, result1];\n\
                                                                                                } else {\n\
                                                                                                  result0 = null;\n\
                                                                                                  pos = pos1;\n\
                                                                                                }\n\
                                                                                              } else {\n\
                                                                                                result0 = null;\n\
                                                                                                pos = pos1;\n\
                                                                                              }\n\
                                                                                              if (result0 === null) {\n\
                                                                                                if (input.charCodeAt(pos) === 87) {\n\
                                                                                                  result1 = \"W\";\n\
                                                                                                  pos++;\n\
                                                                                                } else {\n\
                                                                                                  result1 = null;\n\
                                                                                                  if (reportFailures === 0) {\n\
                                                                                                    matchFailed(\"\\\"W\\\"\");\n\
                                                                                                  }\n\
                                                                                                }\n\
                                                                                                if (result1 !== null) {\n\
                                                                                                  result0 = [];\n\
                                                                                                  while (result1 !== null) {\n\
                                                                                                    result0.push(result1);\n\
                                                                                                    if (input.charCodeAt(pos) === 87) {\n\
                                                                                                      result1 = \"W\";\n\
                                                                                                      pos++;\n\
                                                                                                    } else {\n\
                                                                                                      result1 = null;\n\
                                                                                                      if (reportFailures === 0) {\n\
                                                                                                        matchFailed(\"\\\"W\\\"\");\n\
                                                                                                      }\n\
                                                                                                    }\n\
                                                                                                  }\n\
                                                                                                } else {\n\
                                                                                                  result0 = null;\n\
                                                                                                }\n\
                                                                                                if (result0 === null) {\n\
                                                                                                  pos1 = pos;\n\
                                                                                                  if (input.charCodeAt(pos) === 88) {\n\
                                                                                                    result1 = \"X\";\n\
                                                                                                    pos++;\n\
                                                                                                  } else {\n\
                                                                                                    result1 = null;\n\
                                                                                                    if (reportFailures === 0) {\n\
                                                                                                      matchFailed(\"\\\"X\\\"\");\n\
                                                                                                    }\n\
                                                                                                  }\n\
                                                                                                  if (result1 !== null) {\n\
                                                                                                    result0 = [];\n\
                                                                                                    while (result1 !== null) {\n\
                                                                                                      result0.push(result1);\n\
                                                                                                      if (input.charCodeAt(pos) === 88) {\n\
                                                                                                        result1 = \"X\";\n\
                                                                                                        pos++;\n\
                                                                                                      } else {\n\
                                                                                                        result1 = null;\n\
                                                                                                        if (reportFailures === 0) {\n\
                                                                                                          matchFailed(\"\\\"X\\\"\");\n\
                                                                                                        }\n\
                                                                                                      }\n\
                                                                                                    }\n\
                                                                                                  } else {\n\
                                                                                                    result0 = null;\n\
                                                                                                  }\n\
                                                                                                  if (result0 !== null) {\n\
                                                                                                    if (input.charCodeAt(pos) === 89) {\n\
                                                                                                      result2 = \"Y\";\n\
                                                                                                      pos++;\n\
                                                                                                    } else {\n\
                                                                                                      result2 = null;\n\
                                                                                                      if (reportFailures === 0) {\n\
                                                                                                        matchFailed(\"\\\"Y\\\"\");\n\
                                                                                                      }\n\
                                                                                                    }\n\
                                                                                                    if (result2 !== null) {\n\
                                                                                                      result1 = [];\n\
                                                                                                      while (result2 !== null) {\n\
                                                                                                        result1.push(result2);\n\
                                                                                                        if (input.charCodeAt(pos) === 89) {\n\
                                                                                                          result2 = \"Y\";\n\
                                                                                                          pos++;\n\
                                                                                                        } else {\n\
                                                                                                          result2 = null;\n\
                                                                                                          if (reportFailures === 0) {\n\
                                                                                                            matchFailed(\"\\\"Y\\\"\");\n\
                                                                                                          }\n\
                                                                                                        }\n\
                                                                                                      }\n\
                                                                                                    } else {\n\
                                                                                                      result1 = null;\n\
                                                                                                    }\n\
                                                                                                    if (result1 !== null) {\n\
                                                                                                      result0 = [result0, result1];\n\
                                                                                                    } else {\n\
                                                                                                      result0 = null;\n\
                                                                                                      pos = pos1;\n\
                                                                                                    }\n\
                                                                                                  } else {\n\
                                                                                                    result0 = null;\n\
                                                                                                    pos = pos1;\n\
                                                                                                  }\n\
                                                                                                  if (result0 === null) {\n\
                                                                                                    if (input.charCodeAt(pos) === 90) {\n\
                                                                                                      result0 = \"Z\";\n\
                                                                                                      pos++;\n\
                                                                                                    } else {\n\
                                                                                                      result0 = null;\n\
                                                                                                      if (reportFailures === 0) {\n\
                                                                                                        matchFailed(\"\\\"Z\\\"\");\n\
                                                                                                      }\n\
                                                                                                    }\n\
                                                                                                  }\n\
                                                                                                }\n\
                                                                                              }\n\
                                                                                            }\n\
                                                                                          }\n\
                                                                                        }\n\
                                                                                      }\n\
                                                                                    }\n\
                                                                                  }\n\
                                                                                }\n\
                                                                              }\n\
                                                                            }\n\
                                                                          }\n\
                                                                        }\n\
                                                                      }\n\
                                                                    }\n\
                                                                  }\n\
                                                                }\n\
                                                              }\n\
                                                            }\n\
                                                          }\n\
                                                        }\n\
                                                      }\n\
                                                    }\n\
                                                  }\n\
                                                }\n\
                                              }\n\
                                            }\n\
                                          }\n\
                                        }\n\
                                      }\n\
                                    }\n\
                                  }\n\
                                }\n\
                              }\n\
                            }\n\
                          }\n\
                        }\n\
                      }\n\
                    }\n\
                  }\n\
                }\n\
              }\n\
            }\n\
          }\n\
        }\n\
        if (result0 !== null) {\n\
          result0 = (function(offset, zone) {\n\
            return {xspan:zone.length,name:zone[0],x:zone};\n\
          })(pos0, result0);\n\
        }\n\
        if (result0 === null) {\n\
          pos = pos0;\n\
        }\n\
        reportFailures--;\n\
        if (reportFailures === 0 && result0 === null) {\n\
          matchFailed(\"Template Zone\");\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_RowColDimension() {\n\
        var result0;\n\
        var pos0;\n\
        \n\
        reportFailures++;\n\
        pos0 = pos;\n\
        if (input.substr(pos, 4) === \"rows\") {\n\
          result0 = \"rows\";\n\
          pos += 4;\n\
        } else {\n\
          result0 = null;\n\
          if (reportFailures === 0) {\n\
            matchFailed(\"\\\"rows\\\"\");\n\
          }\n\
        }\n\
        if (result0 !== null) {\n\
          result0 = (function(offset) {return 0;})(pos0);\n\
        }\n\
        if (result0 === null) {\n\
          pos = pos0;\n\
        }\n\
        if (result0 === null) {\n\
          pos0 = pos;\n\
          if (input.substr(pos, 4) === \"cols\") {\n\
            result0 = \"cols\";\n\
            pos += 4;\n\
          } else {\n\
            result0 = null;\n\
            if (reportFailures === 0) {\n\
              matchFailed(\"\\\"cols\\\"\");\n\
            }\n\
          }\n\
          if (result0 !== null) {\n\
            result0 = (function(offset) {return 1;})(pos0);\n\
          }\n\
          if (result0 === null) {\n\
            pos = pos0;\n\
          }\n\
        }\n\
        reportFailures--;\n\
        if (reportFailures === 0 && result0 === null) {\n\
          matchFailed(\"Row or Col Dimension\");\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_Line() {\n\
        var result0, result1, result2, result3;\n\
        var pos0, pos1;\n\
        \n\
        reportFailures++;\n\
        pos0 = pos;\n\
        pos1 = pos;\n\
        result0 = parse_Connection();\n\
        result0 = result0 !== null ? result0 : \"\";\n\
        if (result0 !== null) {\n\
          result1 = parse_LineChunk();\n\
          if (result1 !== null) {\n\
            result2 = [];\n\
            result3 = parse_LineChunk();\n\
            while (result3 !== null) {\n\
              result2.push(result3);\n\
              result3 = parse_LineChunk();\n\
            }\n\
            if (result2 !== null) {\n\
              result0 = [result0, result1, result2];\n\
            } else {\n\
              result0 = null;\n\
              pos = pos1;\n\
            }\n\
          } else {\n\
            result0 = null;\n\
            pos = pos1;\n\
          }\n\
        } else {\n\
          result0 = null;\n\
          pos = pos1;\n\
        }\n\
        if (result0 !== null) {\n\
          result0 = (function(offset, headcon, head, tails) {\n\
            var result; \n\
            result = \"|\";\n\
            if (headcon) {result += headcon;}\n\
            result += head;\n\
            tails.forEach(function (tail){\n\
              result += tail;\n\
            });\n\
            result += \"|\";\n\
            return result;\n\
          })(pos0, result0[0], result0[1], result0[2]);\n\
        }\n\
        if (result0 === null) {\n\
          pos = pos0;\n\
        }\n\
        reportFailures--;\n\
        if (reportFailures === 0 && result0 === null) {\n\
          matchFailed(\"1D Line\");\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_LineChunk() {\n\
        var result0, result1, result2, result3, result4;\n\
        var pos0, pos1;\n\
        \n\
        reportFailures++;\n\
        pos0 = pos;\n\
        pos1 = pos;\n\
        result0 = parse___();\n\
        if (result0 !== null) {\n\
          result2 = parse_VirtualNameChars();\n\
          if (result2 !== null) {\n\
            result1 = [];\n\
            while (result2 !== null) {\n\
              result1.push(result2);\n\
              result2 = parse_VirtualNameChars();\n\
            }\n\
          } else {\n\
            result1 = null;\n\
          }\n\
          if (result1 !== null) {\n\
            result2 = parse___();\n\
            if (result2 !== null) {\n\
              result3 = parse_Connection();\n\
              result3 = result3 !== null ? result3 : \"\";\n\
              if (result3 !== null) {\n\
                result4 = parse___();\n\
                if (result4 !== null) {\n\
                  result0 = [result0, result1, result2, result3, result4];\n\
                } else {\n\
                  result0 = null;\n\
                  pos = pos1;\n\
                }\n\
              } else {\n\
                result0 = null;\n\
                pos = pos1;\n\
              }\n\
            } else {\n\
              result0 = null;\n\
              pos = pos1;\n\
            }\n\
          } else {\n\
            result0 = null;\n\
            pos = pos1;\n\
          }\n\
        } else {\n\
          result0 = null;\n\
          pos = pos1;\n\
        }\n\
        if (result0 !== null) {\n\
          result0 = (function(offset, name, connect) {\n\
            \n\
            var result;\n\
            name = p.trim(name);\n\
            result = '[\"'+name+'\"]';    \n\
            p.addVirtual(name);\n\
            if (connect) {\n\
              result = result + connect;\n\
            }\n\
            return result;\n\
          })(pos0, result0[1], result0[3]);\n\
        }\n\
        if (result0 === null) {\n\
          pos = pos0;\n\
        }\n\
        reportFailures--;\n\
        if (reportFailures === 0 && result0 === null) {\n\
          matchFailed(\"!D LineChunk\");\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_Connection() {\n\
        var result0, result1, result2;\n\
        var pos0, pos1;\n\
        \n\
        reportFailures++;\n\
        pos0 = pos;\n\
        pos1 = pos;\n\
        if (input.charCodeAt(pos) === 45) {\n\
          result0 = \"-\";\n\
          pos++;\n\
        } else {\n\
          result0 = null;\n\
          if (reportFailures === 0) {\n\
            matchFailed(\"\\\"-\\\"\");\n\
          }\n\
        }\n\
        if (result0 === null) {\n\
          if (input.charCodeAt(pos) === 126) {\n\
            result0 = \"~\";\n\
            pos++;\n\
          } else {\n\
            result0 = null;\n\
            if (reportFailures === 0) {\n\
              matchFailed(\"\\\"~\\\"\");\n\
            }\n\
          }\n\
        }\n\
        if (result0 !== null) {\n\
          if (/^[0-9]/.test(input.charAt(pos))) {\n\
            result2 = input.charAt(pos);\n\
            pos++;\n\
          } else {\n\
            result2 = null;\n\
            if (reportFailures === 0) {\n\
              matchFailed(\"[0-9]\");\n\
            }\n\
          }\n\
          if (result2 !== null) {\n\
            result1 = [];\n\
            while (result2 !== null) {\n\
              result1.push(result2);\n\
              if (/^[0-9]/.test(input.charAt(pos))) {\n\
                result2 = input.charAt(pos);\n\
                pos++;\n\
              } else {\n\
                result2 = null;\n\
                if (reportFailures === 0) {\n\
                  matchFailed(\"[0-9]\");\n\
                }\n\
              }\n\
            }\n\
          } else {\n\
            result1 = null;\n\
          }\n\
          if (result1 === null) {\n\
            if (input.charCodeAt(pos) === 45) {\n\
              result1 = \"-\";\n\
              pos++;\n\
            } else {\n\
              result1 = null;\n\
              if (reportFailures === 0) {\n\
                matchFailed(\"\\\"-\\\"\");\n\
              }\n\
            }\n\
          }\n\
          result1 = result1 !== null ? result1 : \"\";\n\
          if (result1 !== null) {\n\
            if (input.charCodeAt(pos) === 45) {\n\
              result2 = \"-\";\n\
              pos++;\n\
            } else {\n\
              result2 = null;\n\
              if (reportFailures === 0) {\n\
                matchFailed(\"\\\"-\\\"\");\n\
              }\n\
            }\n\
            if (result2 === null) {\n\
              if (input.charCodeAt(pos) === 126) {\n\
                result2 = \"~\";\n\
                pos++;\n\
              } else {\n\
                result2 = null;\n\
                if (reportFailures === 0) {\n\
                  matchFailed(\"\\\"~\\\"\");\n\
                }\n\
              }\n\
            }\n\
            result2 = result2 !== null ? result2 : \"\";\n\
            if (result2 !== null) {\n\
              result0 = [result0, result1, result2];\n\
            } else {\n\
              result0 = null;\n\
              pos = pos1;\n\
            }\n\
          } else {\n\
            result0 = null;\n\
            pos = pos1;\n\
          }\n\
        } else {\n\
          result0 = null;\n\
          pos = pos1;\n\
        }\n\
        if (result0 !== null) {\n\
          result0 = (function(offset, connect) {return p.stringify(connect);})(pos0, result0);\n\
        }\n\
        if (result0 === null) {\n\
          pos = pos0;\n\
        }\n\
        reportFailures--;\n\
        if (reportFailures === 0 && result0 === null) {\n\
          matchFailed(\"1D Connection\");\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_ConnectionTypes() {\n\
        var result0, result1, result2;\n\
        var pos0;\n\
        \n\
        reportFailures++;\n\
        if (input.charCodeAt(pos) === 45) {\n\
          result0 = \"-\";\n\
          pos++;\n\
        } else {\n\
          result0 = null;\n\
          if (reportFailures === 0) {\n\
            matchFailed(\"\\\"-\\\"\");\n\
          }\n\
        }\n\
        if (result0 === null) {\n\
          if (input.charCodeAt(pos) === 126) {\n\
            result0 = \"~\";\n\
            pos++;\n\
          } else {\n\
            result0 = null;\n\
            if (reportFailures === 0) {\n\
              matchFailed(\"\\\"~\\\"\");\n\
            }\n\
          }\n\
          if (result0 === null) {\n\
            pos0 = pos;\n\
            if (input.charCodeAt(pos) === 45) {\n\
              result0 = \"-\";\n\
              pos++;\n\
            } else {\n\
              result0 = null;\n\
              if (reportFailures === 0) {\n\
                matchFailed(\"\\\"-\\\"\");\n\
              }\n\
            }\n\
            if (result0 !== null) {\n\
              if (/^[0-9]/.test(input.charAt(pos))) {\n\
                result2 = input.charAt(pos);\n\
                pos++;\n\
              } else {\n\
                result2 = null;\n\
                if (reportFailures === 0) {\n\
                  matchFailed(\"[0-9]\");\n\
                }\n\
              }\n\
              if (result2 !== null) {\n\
                result1 = [];\n\
                while (result2 !== null) {\n\
                  result1.push(result2);\n\
                  if (/^[0-9]/.test(input.charAt(pos))) {\n\
                    result2 = input.charAt(pos);\n\
                    pos++;\n\
                  } else {\n\
                    result2 = null;\n\
                    if (reportFailures === 0) {\n\
                      matchFailed(\"[0-9]\");\n\
                    }\n\
                  }\n\
                }\n\
              } else {\n\
                result1 = null;\n\
              }\n\
              if (result1 !== null) {\n\
                if (input.charCodeAt(pos) === 45) {\n\
                  result2 = \"-\";\n\
                  pos++;\n\
                } else {\n\
                  result2 = null;\n\
                  if (reportFailures === 0) {\n\
                    matchFailed(\"\\\"-\\\"\");\n\
                  }\n\
                }\n\
                if (result2 !== null) {\n\
                  result0 = [result0, result1, result2];\n\
                } else {\n\
                  result0 = null;\n\
                  pos = pos0;\n\
                }\n\
              } else {\n\
                result0 = null;\n\
                pos = pos0;\n\
              }\n\
            } else {\n\
              result0 = null;\n\
              pos = pos0;\n\
            }\n\
            if (result0 === null) {\n\
              pos0 = pos;\n\
              if (input.charCodeAt(pos) === 126) {\n\
                result0 = \"~\";\n\
                pos++;\n\
              } else {\n\
                result0 = null;\n\
                if (reportFailures === 0) {\n\
                  matchFailed(\"\\\"~\\\"\");\n\
                }\n\
              }\n\
              if (result0 !== null) {\n\
                if (/^[0-9]/.test(input.charAt(pos))) {\n\
                  result2 = input.charAt(pos);\n\
                  pos++;\n\
                } else {\n\
                  result2 = null;\n\
                  if (reportFailures === 0) {\n\
                    matchFailed(\"[0-9]\");\n\
                  }\n\
                }\n\
                if (result2 !== null) {\n\
                  result1 = [];\n\
                  while (result2 !== null) {\n\
                    result1.push(result2);\n\
                    if (/^[0-9]/.test(input.charAt(pos))) {\n\
                      result2 = input.charAt(pos);\n\
                      pos++;\n\
                    } else {\n\
                      result2 = null;\n\
                      if (reportFailures === 0) {\n\
                        matchFailed(\"[0-9]\");\n\
                      }\n\
                    }\n\
                  }\n\
                } else {\n\
                  result1 = null;\n\
                }\n\
                if (result1 === null) {\n\
                  if (input.charCodeAt(pos) === 45) {\n\
                    result1 = \"-\";\n\
                    pos++;\n\
                  } else {\n\
                    result1 = null;\n\
                    if (reportFailures === 0) {\n\
                      matchFailed(\"\\\"-\\\"\");\n\
                    }\n\
                  }\n\
                }\n\
                if (result1 !== null) {\n\
                  if (input.charCodeAt(pos) === 126) {\n\
                    result2 = \"~\";\n\
                    pos++;\n\
                  } else {\n\
                    result2 = null;\n\
                    if (reportFailures === 0) {\n\
                      matchFailed(\"\\\"~\\\"\");\n\
                    }\n\
                  }\n\
                  if (result2 !== null) {\n\
                    result0 = [result0, result1, result2];\n\
                  } else {\n\
                    result0 = null;\n\
                    pos = pos0;\n\
                  }\n\
                } else {\n\
                  result0 = null;\n\
                  pos = pos0;\n\
                }\n\
              } else {\n\
                result0 = null;\n\
                pos = pos0;\n\
              }\n\
            }\n\
          }\n\
        }\n\
        reportFailures--;\n\
        if (reportFailures === 0 && result0 === null) {\n\
          matchFailed(\"!D Connection Type\");\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_VirtualNameChars() {\n\
        var result0;\n\
        \n\
        if (/^[a-zA-Z0-9#_$:]/.test(input.charAt(pos))) {\n\
          result0 = input.charAt(pos);\n\
          pos++;\n\
        } else {\n\
          result0 = null;\n\
          if (reportFailures === 0) {\n\
            matchFailed(\"[a-zA-Z0-9#_$:]\");\n\
          }\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_NameChars() {\n\
        var result0;\n\
        \n\
        if (/^[a-zA-Z0-9#.\\-_$:]/.test(input.charAt(pos))) {\n\
          result0 = input.charAt(pos);\n\
          pos++;\n\
        } else {\n\
          result0 = null;\n\
          if (reportFailures === 0) {\n\
            matchFailed(\"[a-zA-Z0-9#.\\\\-_$:]\");\n\
          }\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_NameCharsWithSpace() {\n\
        var result0;\n\
        \n\
        result0 = parse_NameChars();\n\
        if (result0 === null) {\n\
          if (input.charCodeAt(pos) === 32) {\n\
            result0 = \" \";\n\
            pos++;\n\
          } else {\n\
            result0 = null;\n\
            if (reportFailures === 0) {\n\
              matchFailed(\"\\\" \\\"\");\n\
            }\n\
          }\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_Literal() {\n\
        var result0;\n\
        var pos0;\n\
        \n\
        pos0 = pos;\n\
        result0 = parse_Number();\n\
        if (result0 !== null) {\n\
          result0 = (function(offset, val) {\n\
            return [ \"number\",\n\
              val\n\
            ];\n\
          })(pos0, result0);\n\
        }\n\
        if (result0 === null) {\n\
          pos = pos0;\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_Number() {\n\
        var result0;\n\
        \n\
        result0 = parse_Real();\n\
        if (result0 === null) {\n\
          result0 = parse_Integer();\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_Integer() {\n\
        var result0, result1;\n\
        var pos0;\n\
        \n\
        pos0 = pos;\n\
        if (/^[0-9]/.test(input.charAt(pos))) {\n\
          result1 = input.charAt(pos);\n\
          pos++;\n\
        } else {\n\
          result1 = null;\n\
          if (reportFailures === 0) {\n\
            matchFailed(\"[0-9]\");\n\
          }\n\
        }\n\
        if (result1 !== null) {\n\
          result0 = [];\n\
          while (result1 !== null) {\n\
            result0.push(result1);\n\
            if (/^[0-9]/.test(input.charAt(pos))) {\n\
              result1 = input.charAt(pos);\n\
              pos++;\n\
            } else {\n\
              result1 = null;\n\
              if (reportFailures === 0) {\n\
                matchFailed(\"[0-9]\");\n\
              }\n\
            }\n\
          }\n\
        } else {\n\
          result0 = null;\n\
        }\n\
        if (result0 !== null) {\n\
          result0 = (function(offset, digits) {\n\
            return parseInt(digits.join(\"\"), 10);\n\
          })(pos0, result0);\n\
        }\n\
        if (result0 === null) {\n\
          pos = pos0;\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_Real() {\n\
        var result0, result1, result2;\n\
        var pos0, pos1;\n\
        \n\
        pos0 = pos;\n\
        pos1 = pos;\n\
        result0 = parse_Integer();\n\
        if (result0 !== null) {\n\
          if (input.charCodeAt(pos) === 46) {\n\
            result1 = \".\";\n\
            pos++;\n\
          } else {\n\
            result1 = null;\n\
            if (reportFailures === 0) {\n\
              matchFailed(\"\\\".\\\"\");\n\
            }\n\
          }\n\
          if (result1 !== null) {\n\
            result2 = parse_Integer();\n\
            if (result2 !== null) {\n\
              result0 = [result0, result1, result2];\n\
            } else {\n\
              result0 = null;\n\
              pos = pos1;\n\
            }\n\
          } else {\n\
            result0 = null;\n\
            pos = pos1;\n\
          }\n\
        } else {\n\
          result0 = null;\n\
          pos = pos1;\n\
        }\n\
        if (result0 !== null) {\n\
          result0 = (function(offset, digits) {\n\
            return parseFloat(digits.join(\"\"));\n\
          })(pos0, result0);\n\
        }\n\
        if (result0 === null) {\n\
          pos = pos0;\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_SignedInteger() {\n\
        var result0, result1, result2;\n\
        var pos0;\n\
        \n\
        pos0 = pos;\n\
        if (/^[\\-+]/.test(input.charAt(pos))) {\n\
          result0 = input.charAt(pos);\n\
          pos++;\n\
        } else {\n\
          result0 = null;\n\
          if (reportFailures === 0) {\n\
            matchFailed(\"[\\\\-+]\");\n\
          }\n\
        }\n\
        result0 = result0 !== null ? result0 : \"\";\n\
        if (result0 !== null) {\n\
          if (/^[0-9]/.test(input.charAt(pos))) {\n\
            result2 = input.charAt(pos);\n\
            pos++;\n\
          } else {\n\
            result2 = null;\n\
            if (reportFailures === 0) {\n\
              matchFailed(\"[0-9]\");\n\
            }\n\
          }\n\
          if (result2 !== null) {\n\
            result1 = [];\n\
            while (result2 !== null) {\n\
              result1.push(result2);\n\
              if (/^[0-9]/.test(input.charAt(pos))) {\n\
                result2 = input.charAt(pos);\n\
                pos++;\n\
              } else {\n\
                result2 = null;\n\
                if (reportFailures === 0) {\n\
                  matchFailed(\"[0-9]\");\n\
                }\n\
              }\n\
            }\n\
          } else {\n\
            result1 = null;\n\
          }\n\
          if (result1 !== null) {\n\
            result0 = [result0, result1];\n\
          } else {\n\
            result0 = null;\n\
            pos = pos0;\n\
          }\n\
        } else {\n\
          result0 = null;\n\
          pos = pos0;\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_SourceCharacter() {\n\
        var result0;\n\
        \n\
        if (input.length > pos) {\n\
          result0 = input.charAt(pos);\n\
          pos++;\n\
        } else {\n\
          result0 = null;\n\
          if (reportFailures === 0) {\n\
            matchFailed(\"any character\");\n\
          }\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_WhiteSpace() {\n\
        var result0;\n\
        \n\
        reportFailures++;\n\
        if (/^[\\t\\x0B\\f \\xA0\\uFEFF]/.test(input.charAt(pos))) {\n\
          result0 = input.charAt(pos);\n\
          pos++;\n\
        } else {\n\
          result0 = null;\n\
          if (reportFailures === 0) {\n\
            matchFailed(\"[\\\\t\\\\x0B\\\\f \\\\xA0\\\\uFEFF]\");\n\
          }\n\
        }\n\
        reportFailures--;\n\
        if (reportFailures === 0 && result0 === null) {\n\
          matchFailed(\"whitespace\");\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_LineTerminator() {\n\
        var result0;\n\
        \n\
        if (/^[\\n\
\\r\\u2028\\u2029]/.test(input.charAt(pos))) {\n\
          result0 = input.charAt(pos);\n\
          pos++;\n\
        } else {\n\
          result0 = null;\n\
          if (reportFailures === 0) {\n\
            matchFailed(\"[\\\\n\
\\\\r\\\\u2028\\\\u2029]\");\n\
          }\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_LineTerminatorSequence() {\n\
        var result0;\n\
        \n\
        reportFailures++;\n\
        if (input.charCodeAt(pos) === 10) {\n\
          result0 = \"\\n\
\";\n\
          pos++;\n\
        } else {\n\
          result0 = null;\n\
          if (reportFailures === 0) {\n\
            matchFailed(\"\\\"\\\\n\
\\\"\");\n\
          }\n\
        }\n\
        if (result0 === null) {\n\
          if (input.substr(pos, 2) === \"\\r\\n\
\") {\n\
            result0 = \"\\r\\n\
\";\n\
            pos += 2;\n\
          } else {\n\
            result0 = null;\n\
            if (reportFailures === 0) {\n\
              matchFailed(\"\\\"\\\\r\\\\n\
\\\"\");\n\
            }\n\
          }\n\
          if (result0 === null) {\n\
            if (input.charCodeAt(pos) === 13) {\n\
              result0 = \"\\r\";\n\
              pos++;\n\
            } else {\n\
              result0 = null;\n\
              if (reportFailures === 0) {\n\
                matchFailed(\"\\\"\\\\r\\\"\");\n\
              }\n\
            }\n\
            if (result0 === null) {\n\
              if (input.charCodeAt(pos) === 8232) {\n\
                result0 = \"\\u2028\";\n\
                pos++;\n\
              } else {\n\
                result0 = null;\n\
                if (reportFailures === 0) {\n\
                  matchFailed(\"\\\"\\\\u2028\\\"\");\n\
                }\n\
              }\n\
              if (result0 === null) {\n\
                if (input.charCodeAt(pos) === 8233) {\n\
                  result0 = \"\\u2029\";\n\
                  pos++;\n\
                } else {\n\
                  result0 = null;\n\
                  if (reportFailures === 0) {\n\
                    matchFailed(\"\\\"\\\\u2029\\\"\");\n\
                  }\n\
                }\n\
              }\n\
            }\n\
          }\n\
        }\n\
        reportFailures--;\n\
        if (reportFailures === 0 && result0 === null) {\n\
          matchFailed(\"end of line\");\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_AnyChar() {\n\
        var result0;\n\
        \n\
        if (/^[a-zA-Z0-9 .,#:+?!^=()_\\-$*\\/\\\\\"\"'[\\]]/.test(input.charAt(pos))) {\n\
          result0 = input.charAt(pos);\n\
          pos++;\n\
        } else {\n\
          result0 = null;\n\
          if (reportFailures === 0) {\n\
            matchFailed(\"[a-zA-Z0-9 .,#:+?!^=()_\\\\-$*\\\\/\\\\\\\\\\\"\\\"'[\\\\]]\");\n\
          }\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_EOS() {\n\
        var result0, result1;\n\
        var pos0;\n\
        \n\
        reportFailures++;\n\
        pos0 = pos;\n\
        result0 = parse___();\n\
        if (result0 !== null) {\n\
          if (input.charCodeAt(pos) === 59) {\n\
            result1 = \";\";\n\
            pos++;\n\
          } else {\n\
            result1 = null;\n\
            if (reportFailures === 0) {\n\
              matchFailed(\"\\\";\\\"\");\n\
            }\n\
          }\n\
          if (result1 !== null) {\n\
            result0 = [result0, result1];\n\
          } else {\n\
            result0 = null;\n\
            pos = pos0;\n\
          }\n\
        } else {\n\
          result0 = null;\n\
          pos = pos0;\n\
        }\n\
        if (result0 === null) {\n\
          pos0 = pos;\n\
          result0 = parse__();\n\
          if (result0 !== null) {\n\
            result1 = parse_LineTerminatorSequence();\n\
            if (result1 !== null) {\n\
              result0 = [result0, result1];\n\
            } else {\n\
              result0 = null;\n\
              pos = pos0;\n\
            }\n\
          } else {\n\
            result0 = null;\n\
            pos = pos0;\n\
          }\n\
          if (result0 === null) {\n\
            pos0 = pos;\n\
            result0 = parse___();\n\
            if (result0 !== null) {\n\
              result1 = parse_EOF();\n\
              if (result1 !== null) {\n\
                result0 = [result0, result1];\n\
              } else {\n\
                result0 = null;\n\
                pos = pos0;\n\
              }\n\
            } else {\n\
              result0 = null;\n\
              pos = pos0;\n\
            }\n\
          }\n\
        }\n\
        reportFailures--;\n\
        if (reportFailures === 0 && result0 === null) {\n\
          matchFailed(\"End of Statement\");\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_EOF() {\n\
        var result0;\n\
        var pos0;\n\
        \n\
        pos0 = pos;\n\
        reportFailures++;\n\
        if (input.length > pos) {\n\
          result0 = input.charAt(pos);\n\
          pos++;\n\
        } else {\n\
          result0 = null;\n\
          if (reportFailures === 0) {\n\
            matchFailed(\"any character\");\n\
          }\n\
        }\n\
        reportFailures--;\n\
        if (result0 === null) {\n\
          result0 = \"\";\n\
        } else {\n\
          result0 = null;\n\
          pos = pos0;\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_Comment() {\n\
        var result0;\n\
        \n\
        reportFailures++;\n\
        result0 = parse_MultiLineComment();\n\
        if (result0 === null) {\n\
          result0 = parse_SingleLineComment();\n\
        }\n\
        reportFailures--;\n\
        if (reportFailures === 0 && result0 === null) {\n\
          matchFailed(\"Comment\");\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_MultiLineComment() {\n\
        var result0, result1, result2, result3;\n\
        var pos0, pos1, pos2;\n\
        \n\
        reportFailures++;\n\
        pos0 = pos;\n\
        if (input.substr(pos, 2) === \"/*\") {\n\
          result0 = \"/*\";\n\
          pos += 2;\n\
        } else {\n\
          result0 = null;\n\
          if (reportFailures === 0) {\n\
            matchFailed(\"\\\"/*\\\"\");\n\
          }\n\
        }\n\
        if (result0 !== null) {\n\
          result1 = [];\n\
          pos1 = pos;\n\
          pos2 = pos;\n\
          reportFailures++;\n\
          if (input.substr(pos, 2) === \"*/\") {\n\
            result2 = \"*/\";\n\
            pos += 2;\n\
          } else {\n\
            result2 = null;\n\
            if (reportFailures === 0) {\n\
              matchFailed(\"\\\"*/\\\"\");\n\
            }\n\
          }\n\
          reportFailures--;\n\
          if (result2 === null) {\n\
            result2 = \"\";\n\
          } else {\n\
            result2 = null;\n\
            pos = pos2;\n\
          }\n\
          if (result2 !== null) {\n\
            result3 = parse_SourceCharacter();\n\
            if (result3 !== null) {\n\
              result2 = [result2, result3];\n\
            } else {\n\
              result2 = null;\n\
              pos = pos1;\n\
            }\n\
          } else {\n\
            result2 = null;\n\
            pos = pos1;\n\
          }\n\
          while (result2 !== null) {\n\
            result1.push(result2);\n\
            pos1 = pos;\n\
            pos2 = pos;\n\
            reportFailures++;\n\
            if (input.substr(pos, 2) === \"*/\") {\n\
              result2 = \"*/\";\n\
              pos += 2;\n\
            } else {\n\
              result2 = null;\n\
              if (reportFailures === 0) {\n\
                matchFailed(\"\\\"*/\\\"\");\n\
              }\n\
            }\n\
            reportFailures--;\n\
            if (result2 === null) {\n\
              result2 = \"\";\n\
            } else {\n\
              result2 = null;\n\
              pos = pos2;\n\
            }\n\
            if (result2 !== null) {\n\
              result3 = parse_SourceCharacter();\n\
              if (result3 !== null) {\n\
                result2 = [result2, result3];\n\
              } else {\n\
                result2 = null;\n\
                pos = pos1;\n\
              }\n\
            } else {\n\
              result2 = null;\n\
              pos = pos1;\n\
            }\n\
          }\n\
          if (result1 !== null) {\n\
            if (input.substr(pos, 2) === \"*/\") {\n\
              result2 = \"*/\";\n\
              pos += 2;\n\
            } else {\n\
              result2 = null;\n\
              if (reportFailures === 0) {\n\
                matchFailed(\"\\\"*/\\\"\");\n\
              }\n\
            }\n\
            if (result2 !== null) {\n\
              result0 = [result0, result1, result2];\n\
            } else {\n\
              result0 = null;\n\
              pos = pos0;\n\
            }\n\
          } else {\n\
            result0 = null;\n\
            pos = pos0;\n\
          }\n\
        } else {\n\
          result0 = null;\n\
          pos = pos0;\n\
        }\n\
        reportFailures--;\n\
        if (reportFailures === 0 && result0 === null) {\n\
          matchFailed(\"MultiLineComment\");\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_MultiLineCommentNoLineTerminator() {\n\
        var result0, result1, result2, result3;\n\
        var pos0, pos1, pos2;\n\
        \n\
        reportFailures++;\n\
        pos0 = pos;\n\
        if (input.substr(pos, 2) === \"/*\") {\n\
          result0 = \"/*\";\n\
          pos += 2;\n\
        } else {\n\
          result0 = null;\n\
          if (reportFailures === 0) {\n\
            matchFailed(\"\\\"/*\\\"\");\n\
          }\n\
        }\n\
        if (result0 !== null) {\n\
          result1 = [];\n\
          pos1 = pos;\n\
          pos2 = pos;\n\
          reportFailures++;\n\
          if (input.substr(pos, 2) === \"*/\") {\n\
            result2 = \"*/\";\n\
            pos += 2;\n\
          } else {\n\
            result2 = null;\n\
            if (reportFailures === 0) {\n\
              matchFailed(\"\\\"*/\\\"\");\n\
            }\n\
          }\n\
          if (result2 === null) {\n\
            result2 = parse_LineTerminator();\n\
          }\n\
          reportFailures--;\n\
          if (result2 === null) {\n\
            result2 = \"\";\n\
          } else {\n\
            result2 = null;\n\
            pos = pos2;\n\
          }\n\
          if (result2 !== null) {\n\
            result3 = parse_SourceCharacter();\n\
            if (result3 !== null) {\n\
              result2 = [result2, result3];\n\
            } else {\n\
              result2 = null;\n\
              pos = pos1;\n\
            }\n\
          } else {\n\
            result2 = null;\n\
            pos = pos1;\n\
          }\n\
          while (result2 !== null) {\n\
            result1.push(result2);\n\
            pos1 = pos;\n\
            pos2 = pos;\n\
            reportFailures++;\n\
            if (input.substr(pos, 2) === \"*/\") {\n\
              result2 = \"*/\";\n\
              pos += 2;\n\
            } else {\n\
              result2 = null;\n\
              if (reportFailures === 0) {\n\
                matchFailed(\"\\\"*/\\\"\");\n\
              }\n\
            }\n\
            if (result2 === null) {\n\
              result2 = parse_LineTerminator();\n\
            }\n\
            reportFailures--;\n\
            if (result2 === null) {\n\
              result2 = \"\";\n\
            } else {\n\
              result2 = null;\n\
              pos = pos2;\n\
            }\n\
            if (result2 !== null) {\n\
              result3 = parse_SourceCharacter();\n\
              if (result3 !== null) {\n\
                result2 = [result2, result3];\n\
              } else {\n\
                result2 = null;\n\
                pos = pos1;\n\
              }\n\
            } else {\n\
              result2 = null;\n\
              pos = pos1;\n\
            }\n\
          }\n\
          if (result1 !== null) {\n\
            if (input.substr(pos, 2) === \"*/\") {\n\
              result2 = \"*/\";\n\
              pos += 2;\n\
            } else {\n\
              result2 = null;\n\
              if (reportFailures === 0) {\n\
                matchFailed(\"\\\"*/\\\"\");\n\
              }\n\
            }\n\
            if (result2 !== null) {\n\
              result0 = [result0, result1, result2];\n\
            } else {\n\
              result0 = null;\n\
              pos = pos0;\n\
            }\n\
          } else {\n\
            result0 = null;\n\
            pos = pos0;\n\
          }\n\
        } else {\n\
          result0 = null;\n\
          pos = pos0;\n\
        }\n\
        reportFailures--;\n\
        if (reportFailures === 0 && result0 === null) {\n\
          matchFailed(\"MultiLineCommentNoLineTerminator\");\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_SingleLineComment() {\n\
        var result0, result1, result2, result3;\n\
        var pos0, pos1, pos2;\n\
        \n\
        reportFailures++;\n\
        pos0 = pos;\n\
        if (input.substr(pos, 2) === \"//\") {\n\
          result0 = \"//\";\n\
          pos += 2;\n\
        } else {\n\
          result0 = null;\n\
          if (reportFailures === 0) {\n\
            matchFailed(\"\\\"//\\\"\");\n\
          }\n\
        }\n\
        if (result0 !== null) {\n\
          result1 = [];\n\
          pos1 = pos;\n\
          pos2 = pos;\n\
          reportFailures++;\n\
          result2 = parse_LineTerminator();\n\
          reportFailures--;\n\
          if (result2 === null) {\n\
            result2 = \"\";\n\
          } else {\n\
            result2 = null;\n\
            pos = pos2;\n\
          }\n\
          if (result2 !== null) {\n\
            result3 = parse_SourceCharacter();\n\
            if (result3 !== null) {\n\
              result2 = [result2, result3];\n\
            } else {\n\
              result2 = null;\n\
              pos = pos1;\n\
            }\n\
          } else {\n\
            result2 = null;\n\
            pos = pos1;\n\
          }\n\
          while (result2 !== null) {\n\
            result1.push(result2);\n\
            pos1 = pos;\n\
            pos2 = pos;\n\
            reportFailures++;\n\
            result2 = parse_LineTerminator();\n\
            reportFailures--;\n\
            if (result2 === null) {\n\
              result2 = \"\";\n\
            } else {\n\
              result2 = null;\n\
              pos = pos2;\n\
            }\n\
            if (result2 !== null) {\n\
              result3 = parse_SourceCharacter();\n\
              if (result3 !== null) {\n\
                result2 = [result2, result3];\n\
              } else {\n\
                result2 = null;\n\
                pos = pos1;\n\
              }\n\
            } else {\n\
              result2 = null;\n\
              pos = pos1;\n\
            }\n\
          }\n\
          if (result1 !== null) {\n\
            result2 = parse_LineTerminator();\n\
            if (result2 === null) {\n\
              result2 = parse_EOF();\n\
            }\n\
            if (result2 !== null) {\n\
              result0 = [result0, result1, result2];\n\
            } else {\n\
              result0 = null;\n\
              pos = pos0;\n\
            }\n\
          } else {\n\
            result0 = null;\n\
            pos = pos0;\n\
          }\n\
        } else {\n\
          result0 = null;\n\
          pos = pos0;\n\
        }\n\
        reportFailures--;\n\
        if (reportFailures === 0 && result0 === null) {\n\
          matchFailed(\"Single Line Comment\");\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse__() {\n\
        var result0, result1;\n\
        \n\
        reportFailures++;\n\
        result0 = [];\n\
        result1 = parse_WhiteSpace();\n\
        if (result1 === null) {\n\
          result1 = parse_MultiLineCommentNoLineTerminator();\n\
          if (result1 === null) {\n\
            result1 = parse_SingleLineComment();\n\
          }\n\
        }\n\
        while (result1 !== null) {\n\
          result0.push(result1);\n\
          result1 = parse_WhiteSpace();\n\
          if (result1 === null) {\n\
            result1 = parse_MultiLineCommentNoLineTerminator();\n\
            if (result1 === null) {\n\
              result1 = parse_SingleLineComment();\n\
            }\n\
          }\n\
        }\n\
        reportFailures--;\n\
        if (reportFailures === 0 && result0 === null) {\n\
          matchFailed(\"Whitespace / Comment\");\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse___() {\n\
        var result0, result1;\n\
        \n\
        reportFailures++;\n\
        result0 = [];\n\
        result1 = parse_WhiteSpace();\n\
        if (result1 === null) {\n\
          result1 = parse_LineTerminatorSequence();\n\
          if (result1 === null) {\n\
            result1 = parse_Comment();\n\
          }\n\
        }\n\
        while (result1 !== null) {\n\
          result0.push(result1);\n\
          result1 = parse_WhiteSpace();\n\
          if (result1 === null) {\n\
            result1 = parse_LineTerminatorSequence();\n\
            if (result1 === null) {\n\
              result1 = parse_Comment();\n\
            }\n\
          }\n\
        }\n\
        reportFailures--;\n\
        if (reportFailures === 0 && result0 === null) {\n\
          matchFailed(\"Whitespace / Comment / Newline\");\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      \n\
      function cleanupExpected(expected) {\n\
        expected.sort();\n\
        \n\
        var lastExpected = null;\n\
        var cleanExpected = [];\n\
        for (var i = 0; i < expected.length; i++) {\n\
          if (expected[i] !== lastExpected) {\n\
            cleanExpected.push(expected[i]);\n\
            lastExpected = expected[i];\n\
          }\n\
        }\n\
        return cleanExpected;\n\
      }\n\
      \n\
      function computeErrorPosition() {\n\
        /*\n\
         * The first idea was to use |String.split| to break the input up to the\n\
         * error position along newlines and derive the line and column from\n\
         * there. However IE's |split| implementation is so broken that it was\n\
         * enough to prevent it.\n\
         */\n\
        \n\
        var line = 1;\n\
        var column = 1;\n\
        var seenCR = false;\n\
        \n\
        for (var i = 0; i < Math.max(pos, rightmostFailuresPos); i++) {\n\
          var ch = input.charAt(i);\n\
          if (ch === \"\\n\
\") {\n\
            if (!seenCR) { line++; }\n\
            column = 1;\n\
            seenCR = false;\n\
          } else if (ch === \"\\r\" || ch === \"\\u2028\" || ch === \"\\u2029\") {\n\
            line++;\n\
            column = 1;\n\
            seenCR = true;\n\
          } else {\n\
            column++;\n\
            seenCR = false;\n\
          }\n\
        }\n\
        \n\
        return { line: line, column: column };\n\
      }\n\
      \n\
      \n\
        var p, parser, vfls, virtuals, ccss, asts; \n\
      \n\
        p = parser = this;\n\
        \n\
        p.size = ['width','height'];\n\
        p.pos = ['x','y'];\n\
      \n\
        p.getResults = function () {\n\
          var _ccss = virtuals.sort().join(\" \");\n\
          if (_ccss.length == 0) {\n\
            _ccss = ccss;\n\
          }\n\
          else {\n\
            _ccss = [\"@virtual \"+_ccss].concat(ccss);\n\
          }\n\
          return {\n\
              //asts: asts, // DEBUG\n\
              ccss: _ccss,\n\
              vfl: vfls\n\
            }\n\
        }\n\
      \n\
        asts = [];\n\
        \n\
        p.addAST = function (stuff) {\n\
          asts.push(stuff);\n\
        }\n\
      \n\
        ccss = [];\n\
        \n\
        p.addCCSS = function (statement) {\n\
          ccss.push(statement)\n\
        }\n\
      \n\
        virtuals = [];\n\
        \n\
        p.addVirtual = function (virtual) {\n\
          if (virtuals.indexOf(virtual) === -1) {\n\
            virtuals.push('\"'+virtual+'\"');\n\
          }\n\
        }\n\
      \n\
        vfls = [];\n\
      \n\
        p.addVFL = function (vfl) {\n\
          vfls.push(vfl);\n\
        }\n\
      \n\
      \n\
         p.addTemplate = function (lines,name,options) {\n\
          var ast, prefix;\n\
          prefix = name+'-';\n\
          ast = p.processHLines(lines);\n\
          ast.name = name;\n\
             \n\
      \n\
          var md, mdOp, outergap;\n\
          \n\
          if (options.gap || options['outer-gap']) {\n\
            if (options['outer-gap']) {\n\
              outergap = options['outer-gap'];\n\
            } else {\n\
              outergap = options.gap;\n\
            }\n\
            mdOp = \"<=\";\n\
          } else {\n\
            mdOp = \"==\";\n\
          }\n\
           \n\
          md = '::['+name+'-md-width] '+mdOp+' ::[width]';\n\
          if (ast.yspan > 1){md += ' / '+ast.yspan;}\n\
          md += \" !require\";\n\
          p.addCCSS(md);\n\
        \n\
          md = '::['+name+'-md-height] '+mdOp+' ::[height]';\n\
          if (ast.xspan > 1){md += ' / '+ast.xspan;}\n\
          md += \" !require\";\n\
          p.addCCSS(md);\n\
            \n\
          var xspan, wccss;\n\
          for (var el in ast.widths) {\n\
             p.addVirtual(prefix+el);\n\
             xspan = ast.widths[el];\n\
             wccss = '\"'+prefix+el+'\"[width] == ';\n\
             wccss +='::['+ast.name+'-md-width]';\n\
             if (xspan > 1) {wccss += ' * '+xspan;}\n\
             p.addCCSS(wccss)\n\
          }\n\
          var yspan, hccss;\n\
          for (var el in ast.heights) {\n\
             yspan = ast.heights[el];\n\
             hccss = '\"'+prefix+el+'\"[height] == ';\n\
             hccss +='::['+ast.name+'-md-height]';\n\
             if (yspan > 1) {hccss += ' * '+yspan;}\n\
             p.addCCSS(hccss);\n\
          }\n\
      \n\
          var vfl, vflFooter;\n\
          ast.v.forEach(function(brij){\n\
            brij = brij.split(\"%-v-%\");\n\
            vfl = '@v [\"'+prefix+brij[0]+'\"]';\n\
            if (options.gap) {vfl += '-';}\n\
            vfl += '[\"'+prefix+brij[1]+'\"]';\n\
            if (options.gap) {vfl += ' gap('+options.gap+')';}\n\
            p.addVFL(vfl);\n\
          });\n\
         \n\
          ast.h.forEach(function(brij){\n\
            brij = brij.split(\"%-h-%\");\n\
            vfl = '@h [\"'+prefix+brij[0]+'\"]';\n\
            if (options.gap) {vfl += '-';}\n\
            vfl += '[\"'+prefix+brij[1]+'\"]';\n\
            if (options.gap) {vfl += ' gap('+options.gap+')';}\n\
            p.addVFL(vfl);\n\
          });\n\
          \n\
          var edgeEls;\n\
          \n\
          edgeEls = [];\n\
          ast.cols[0].y.forEach(function(el){\n\
            if (edgeEls.indexOf(el) > -1) {return null;}\n\
            edgeEls.push(el);\n\
            vfl = '@h |';\n\
            if (outergap) {vfl += '-';}\n\
            vfl += '[\"'+prefix+el+'\"]'+' in(::)';   \n\
            if (outergap) {vfl += ' gap('+outergap+')';}\n\
            p.addVFL(vfl);\n\
          });\n\
      \n\
          edgeEls = [];\n\
          ast.rows[0].x.forEach(function(el){\n\
            if (edgeEls.indexOf(el) > -1) {return null;}\n\
            edgeEls.push(el);\n\
            vfl = '@v |';\n\
            if (outergap) {vfl += '-';}\n\
            vfl += '[\"'+prefix+el+'\"]'+' in(::)';\n\
            if (outergap) {vfl += ' gap('+outergap+')';}\n\
            p.addVFL(vfl);\n\
          });\n\
      \n\
          edgeEls = [];\n\
          ast.cols[ast.cols.length-1].y.forEach(function(el){\n\
            if (edgeEls.indexOf(el) > -1) {return null;}\n\
            edgeEls.push(el);\n\
            vfl = '@h [\"'+prefix+el+'\"]';\n\
            if (outergap) {vfl += '-';}\n\
            vfl +='|'+' in(::)';\n\
            if (outergap) {vfl += ' gap('+outergap+')';}\n\
            p.addVFL(vfl);\n\
          });\n\
      \n\
          edgeEls = [];\n\
          ast.rows[ast.rows.length-1].x.forEach(function(el){\n\
            if (edgeEls.indexOf(el) > -1) {return null;}\n\
            edgeEls.push(el);\n\
            vfl = '@v [\"'+prefix+el+'\"]';\n\
            if (outergap) {vfl += '-';}\n\
            vfl += '|'+' in(::)';\n\
            if (outergap) {vfl += ' gap('+outergap+')';}\n\
            p.addVFL(vfl);\n\
          });\n\
      \n\
          \n\
      \n\
          //p.addVFL(ast);\n\
          p.addAST(ast);\n\
          \n\
          return ast;\n\
        }\n\
      \n\
        p.processHZones = function (zones) {\n\
          var xspan, curr, prev, h, x, widths;\n\
          xspan = 0;\n\
          h = [];\n\
          widths = {};\n\
          x = [];\n\
          zones.forEach(function(zone){\n\
            curr = zone.name;\n\
            x = x.concat(zone.x);\n\
            delete zone.x;\n\
            if (prev && prev !== curr) {   \n\
              h.push([prev,curr].join(\"%-h-%\"));\n\
            }\n\
            widths[zone.name] = zone.xspan;\n\
            xspan += zone.xspan;\n\
            prev = curr;\n\
          });\n\
          return {xspan:xspan,x:x,h:h,widths:widths};\n\
        }\n\
        \n\
        p.processHLines = function (lines) {\n\
          var cols,i,j,col,results;\n\
          results = {heights:{},widths:{},v:[],h:[]};\n\
          cols = [];\n\
          i = 0;\n\
      \n\
      \n\
          lines.forEach(function(row){\n\
            j = 0;\n\
            for (var nam in row.widths) {        \n\
              results.widths[nam] = row.widths[nam];\n\
            }\n\
            row.h.forEach(function(hh){\n\
              if (results.h.indexOf(hh) === -1) {results.h.push(hh);}\n\
            })\n\
            row.x.forEach(function(xx){\n\
              var col;\n\
              if (!cols[j]) {cols[j] = {y:[]};}\n\
              col = cols[j];\n\
              col.y.push(xx);\n\
              j++;\n\
            })\n\
            i++;\n\
          });    \n\
      \n\
          cols.forEach(function(col){\n\
            var curr, currspan, prev, vStr, heights, i, v;\n\
            v = [];            \n\
            currspan = 0;\n\
            prev = null;\n\
            i = 0;\n\
            col.y.forEach(function(name){        \n\
              curr = name;\n\
              currspan++;\n\
              if (col.y[i+1]!==curr) {\n\
                results.heights[name] = currspan;\n\
                currspan = 0;\n\
              }\n\
              if (prev && prev !== curr) {\n\
                vStr = [prev,curr].join(\"%-v-%\")\n\
                if (results.v.indexOf(vStr) === -1) {results.v.push(vStr);}\n\
              }\n\
              prev = curr;\n\
              i++;\n\
            })\n\
          })\n\
      \n\
          results.yspan = cols.length;\n\
          results.xspan = lines.length;\n\
          results.cols = cols;\n\
          results.rows = lines;           \n\
      \n\
          return results;\n\
        }  \n\
      \n\
      \n\
        p.error = function (m,l,c) {\n\
          if (!!l && !!c) {\n\
            m = m + \" {line:\" + l + \", col:\" + c + \"}\";\n\
          }\n\
          console.error(m);\n\
          return m;\n\
        };\n\
      \n\
        p.trim = function (x) {\n\
          if (typeof x === \"string\") {return x.trim();}\n\
          if (x instanceof Array) {return x.join(\"\").trim();}\n\
          return \"\"\n\
        };\n\
      \n\
        p.flatten = function (array, isShallow) {\n\
          var index = -1,\n\
            length = array ? array.length : 0,\n\
            result = [];\n\
      \n\
          while (++index < length) {\n\
            var value = array[index];\n\
      \n\
            if (value instanceof Array) {\n\
              Array.prototype.push.apply(result, isShallow ? value : p.flatten(value));\n\
            }\n\
            else {\n\
              result.push(value);\n\
            }\n\
          }\n\
          return result;\n\
        }\n\
      \n\
        p.stringify = function (array) {\n\
          return p.trim(p.flatten(array));\n\
        };\n\
        \n\
      \n\
      \n\
      var result = parseFunctions[startRule]();\n\
      \n\
      /*\n\
       * The parser is now in one of the following three states:\n\
       *\n\
       * 1. The parser successfully parsed the whole input.\n\
       *\n\
       *    - |result !== null|\n\
       *    - |pos === input.length|\n\
       *    - |rightmostFailuresExpected| may or may not contain something\n\
       *\n\
       * 2. The parser successfully parsed only a part of the input.\n\
       *\n\
       *    - |result !== null|\n\
       *    - |pos < input.length|\n\
       *    - |rightmostFailuresExpected| may or may not contain something\n\
       *\n\
       * 3. The parser did not successfully parse any part of the input.\n\
       *\n\
       *   - |result === null|\n\
       *   - |pos === 0|\n\
       *   - |rightmostFailuresExpected| contains at least one failure\n\
       *\n\
       * All code following this comment (including called functions) must\n\
       * handle these states.\n\
       */\n\
      if (result === null || pos !== input.length) {\n\
        var offset = Math.max(pos, rightmostFailuresPos);\n\
        var found = offset < input.length ? input.charAt(offset) : null;\n\
        var errorPosition = computeErrorPosition();\n\
        \n\
        throw new this.SyntaxError(\n\
          cleanupExpected(rightmostFailuresExpected),\n\
          found,\n\
          offset,\n\
          errorPosition.line,\n\
          errorPosition.column\n\
        );\n\
      }\n\
      \n\
      return result;\n\
    },\n\
    \n\
    /* Returns the parser source code. */\n\
    toSource: function() { return this._source; }\n\
  };\n\
  \n\
  /* Thrown when a parser encounters a syntax error. */\n\
  \n\
  result.SyntaxError = function(expected, found, offset, line, column) {\n\
    function buildMessage(expected, found) {\n\
      var expectedHumanized, foundHumanized;\n\
      \n\
      switch (expected.length) {\n\
        case 0:\n\
          expectedHumanized = \"end of input\";\n\
          break;\n\
        case 1:\n\
          expectedHumanized = expected[0];\n\
          break;\n\
        default:\n\
          expectedHumanized = expected.slice(0, expected.length - 1).join(\", \")\n\
            + \" or \"\n\
            + expected[expected.length - 1];\n\
      }\n\
      \n\
      foundHumanized = found ? quote(found) : \"end of input\";\n\
      \n\
      return \"Expected \" + expectedHumanized + \" but \" + foundHumanized + \" found.\";\n\
    }\n\
    \n\
    this.name = \"SyntaxError\";\n\
    this.expected = expected;\n\
    this.found = found;\n\
    this.message = buildMessage(expected, found);\n\
    this.offset = offset;\n\
    this.line = line;\n\
    this.column = column;\n\
  };\n\
  \n\
  result.SyntaxError.prototype = Error.prototype;\n\
  \n\
  return result;\n\
})();//@ sourceURL=the-gss-vgl-compiler/lib/vgl-compiler.js"
));
require.register("the-gss-vgl-compiler/lib/compiler.js", Function("exports, require, module",
"var vgl = require('./vgl-compiler');\n\
\n\
exports.parse = function (rules) {\n\
  return vgl.parse(rules);\n\
};//@ sourceURL=the-gss-vgl-compiler/lib/compiler.js"
));
require.register("the-gss-compiler/lib/gss-compiler.js", Function("exports, require, module",
"var ccss, compile, inject, parseRules, preparser, uuid, vfl, vgl;\n\
\n\
preparser = require('gss-preparser');\n\
\n\
ccss = require('ccss-compiler');\n\
\n\
vfl = require('vfl-compiler');\n\
\n\
vgl = require('vgl-compiler');\n\
\n\
uuid = function() {\n\
  return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function(c) {\n\
    var r, v;\n\
    r = Math.random() * 16 | 0;\n\
    v = (c === \"x\" ? r : r & 0x3 | 0x8);\n\
    return v.toString(16);\n\
  });\n\
};\n\
\n\
compile = function(gss) {\n\
  var e, rules;\n\
  try {\n\
    rules = preparser.parse(gss.trim());\n\
  } catch (_error) {\n\
    e = _error;\n\
    console.log(\"Preparse Error\", e);\n\
  }\n\
  rules = parseRules(rules);\n\
  return rules;\n\
};\n\
\n\
parseRules = function(rules) {\n\
  var ccssRule, ccssRules, chunk, css, e, key, parsed, subParsed, subrules, val, vflRule, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1;\n\
  css = \"\";\n\
  for (_i = 0, _len = rules.length; _i < _len; _i++) {\n\
    chunk = rules[_i];\n\
    parsed = {};\n\
    switch (chunk.type) {\n\
      case 'directive':\n\
        switch (chunk.name) {\n\
          case 'grid-template':\n\
          case '-gss-grid-template':\n\
          case 'grid-rows':\n\
          case '-gss-rows':\n\
          case 'grid-cols':\n\
          case '-gss-grid-cols':\n\
            try {\n\
              subrules = vgl.parse(\"@\" + chunk.name + \" \" + chunk.terms);\n\
            } catch (_error) {\n\
              e = _error;\n\
              console.log(\"VGL Parse Error: @\" + chunk.name + \" \" + chunk.terms, e);\n\
            }\n\
            parsed = {\n\
              selectors: [],\n\
              commands: []\n\
            };\n\
            _ref = subrules.ccss;\n\
            for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {\n\
              ccssRule = _ref[_j];\n\
              try {\n\
                subParsed = ccss.parse(ccssRule);\n\
              } catch (_error) {\n\
                e = _error;\n\
                console.log(\"VGL generated CCSS parse Error\", e);\n\
              }\n\
              parsed.selectors = parsed.selectors.concat(subParsed.selectors);\n\
              parsed.commands = parsed.commands.concat(subParsed.commands);\n\
            }\n\
            _ref1 = subrules.vfl;\n\
            for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {\n\
              vflRule = _ref1[_k];\n\
              try {\n\
                subParsed = ccss.parse(vfl.parse(vflRule).join(\"; \"));\n\
              } catch (_error) {\n\
                e = _error;\n\
                console.log(\"VGL generated VFL parse Error\", e);\n\
              }\n\
              parsed.selectors = parsed.selectors.concat(subParsed.selectors);\n\
              parsed.commands = parsed.commands.concat(subParsed.commands);\n\
            }\n\
            break;\n\
          case 'horizontal':\n\
          case 'vertical':\n\
          case '-gss-horizontal':\n\
          case '-gss-vertical':\n\
          case 'h':\n\
          case 'v':\n\
          case '-gss-h':\n\
          case '-gss-v':\n\
            try {\n\
              ccssRules = vfl.parse(\"@\" + chunk.name + \" \" + chunk.terms);\n\
            } catch (_error) {\n\
              e = _error;\n\
              console.log(\"VFL Parse Error: @\" + chunk.name + \" \" + chunk.terms, e);\n\
            }\n\
            parsed = {\n\
              selectors: [],\n\
              commands: []\n\
            };\n\
            for (_l = 0, _len3 = ccssRules.length; _l < _len3; _l++) {\n\
              ccssRule = ccssRules[_l];\n\
              try {\n\
                subParsed = ccss.parse(ccssRule);\n\
              } catch (_error) {\n\
                e = _error;\n\
                console.log(\"VFL generated CCSS parse Error\", e);\n\
              }\n\
              parsed.selectors = parsed.selectors.concat(subParsed.selectors);\n\
              parsed.commands = parsed.commands.concat(subParsed.commands);\n\
            }\n\
            break;\n\
          case 'if':\n\
          case 'elseif':\n\
          case 'else':\n\
            if (chunk.terms.length > 0) {\n\
              try {\n\
                parsed = ccss.parse(\"?(\" + chunk.terms + \");\");\n\
              } catch (_error) {\n\
                e = _error;\n\
                console.log(\"CCSS conditional parse Error\", e);\n\
              }\n\
              parsed.clause = parsed.commands[0];\n\
              delete parsed.commands;\n\
            } else {\n\
              parsed.clause = null;\n\
            }\n\
        }\n\
        break;\n\
      case 'constraint':\n\
        try {\n\
          parsed = ccss.parse(chunk.cssText);\n\
        } catch (_error) {\n\
          e = _error;\n\
          console.log(\"Constraint Parse Error\", e);\n\
        }\n\
    }\n\
    for (key in parsed) {\n\
      val = parsed[key];\n\
      chunk[key] = val;\n\
    }\n\
    if (chunk.rules) {\n\
      parseRules(chunk.rules);\n\
    }\n\
  }\n\
  return rules;\n\
};\n\
\n\
inject = function(chunks) {\n\
  var _inject;\n\
  _inject = function(_rules, parent) {\n\
    var rule, _i, _len, _ref, _results;\n\
    _results = [];\n\
    for (_i = 0, _len = _rules.length; _i < _len; _i++) {\n\
      rule = _rules[_i];\n\
      rule._uuid = uuid();\n\
      if (parent) {\n\
        rule._parent_uuid = parent._uuid;\n\
      }\n\
      if (((_ref = rule.rules) != null ? _ref.length : void 0) > 0) {\n\
        _results.push(_inject(rule.rules, rule));\n\
      } else {\n\
        _results.push(void 0);\n\
      }\n\
    }\n\
    return _results;\n\
  };\n\
  _inject(chunks);\n\
  return chunks;\n\
};\n\
\n\
exports.compile = compile;\n\
//@ sourceURL=the-gss-compiler/lib/gss-compiler.js"
));
require.register("d4tocchini-customevent-polyfill/CustomEvent.js", Function("exports, require, module",
"var CustomEvent;\n\
\n\
CustomEvent = function(event, params) {\n\
  var evt;\n\
  params = params || {\n\
    bubbles: false,\n\
    cancelable: false,\n\
    detail: undefined\n\
  };\n\
  evt = document.createEvent(\"CustomEvent\");\n\
  evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);\n\
  return evt;\n\
};\n\
\n\
CustomEvent.prototype = window.Event.prototype;\n\
\n\
window.CustomEvent = CustomEvent;\n\
//@ sourceURL=d4tocchini-customevent-polyfill/CustomEvent.js"
));
require.register("slightlyoff-cassowary.js/index.js", Function("exports, require, module",
"module.exports = require(\"./src/c.js\");\n\
require(\"./src/HashTable.js\");\n\
require(\"./src/HashSet.js\");\n\
require(\"./src/Error.js\");\n\
require(\"./src/SymbolicWeight.js\");\n\
require(\"./src/Strength.js\");\n\
require(\"./src/Variable.js\");\n\
require(\"./src/Point.js\");\n\
require(\"./src/Expression.js\");\n\
require(\"./src/Constraint.js\");\n\
require(\"./src/Constraint.js\");\n\
require(\"./src/EditInfo.js\");\n\
require(\"./src/Tableau.js\");\n\
require(\"./src/SimplexSolver.js\");\n\
require(\"./src/Timer.js\");\n\
require(\"./src/parser/parser.js\");\n\
require(\"./src/parser/api.js\");\n\
//@ sourceURL=slightlyoff-cassowary.js/index.js"
));
require.register("slightlyoff-cassowary.js/src/c.js", Function("exports, require, module",
"// Copyright (C) 1998-2000 Greg J. Badros\n\
// Use of this source code is governed by\n\
//\n\
//    http://www.apache.org/licenses/LICENSE-2.0\n\
//\n\
// Parts Copyright (C) 2011-2012, Alex Russell (slightlyoff@chromium.org)\n\
\n\
(function(scope){\n\
\"use strict\";\n\
\n\
// For Safari 5.x. Go-go-gadget ridiculously long release cycle!\n\
try {\n\
  (function(){}).bind(scope);\n\
} catch (e) {\n\
  Object.defineProperty(Function.prototype, \"bind\", {\n\
    value: function(scope) {\n\
      var f = this;\n\
      return function() { return f.apply(scope, arguments); }\n\
    },\n\
    enumerable: false,\n\
    configurable: true,\n\
    writable: true,\n\
  });\n\
}\n\
\n\
var inBrowser = (typeof scope[\"HTMLElement\"] != \"undefined\");\n\
\n\
var getTagName = function(proto) {\n\
  var tn = null;\n\
  while (proto && proto != Object.prototype) {\n\
      if (proto.tagName) {\n\
        tn = proto.tagName;\n\
        break;\n\
      }\n\
    proto = proto.prototype;\n\
  }\n\
  return tn || \"div\";\n\
};\n\
var epsilon = 1e-8;\n\
\n\
var  _t_map = {};\n\
var walkForMethod = function(ctor, name) {\n\
  if (!ctor || !name) return;\n\
\n\
  // Check the class-side first, the look at the prototype, then walk up\n\
  if (typeof ctor[name] == \"function\") {\n\
    return ctor[name];\n\
  }\n\
  var p = ctor.prototype;\n\
  if (p && typeof p[name] == \"function\") {\n\
    return p[name];\n\
  }\n\
  if (p === Object.prototype ||\n\
      p === Function.prototype) {\n\
    return;\n\
  }\n\
\n\
  if (typeof ctor.__super__ == \"function\") {\n\
    return walkForMethod(ctor.__super__, name);\n\
  }\n\
};\n\
\n\
// Global\n\
var c = scope.c = function() {\n\
  if(c._api) {\n\
    return c._api.apply(this, arguments);\n\
  }\n\
};\n\
\n\
//\n\
// Configuration\n\
//\n\
c.debug = false;\n\
c.trace = false;\n\
c.verbose = false;\n\
c.traceAdded = false;\n\
c.GC = false;\n\
\n\
//\n\
// Constants\n\
//\n\
c.GEQ = 1;\n\
c.LEQ = 2;\n\
\n\
\n\
//\n\
// Utility methods\n\
//\n\
c.inherit = function(props) {\n\
  var ctor = null;\n\
  var parent = null;\n\
\n\
  if (props[\"extends\"]) {\n\
    parent = props[\"extends\"];\n\
    delete props[\"extends\"];\n\
  }\n\
\n\
  if (props[\"initialize\"]) {\n\
    ctor = props[\"initialize\"];\n\
    delete props[\"initialize\"];\n\
  }\n\
\n\
  var realCtor = ctor || function() { };\n\
\n\
  Object.defineProperty(realCtor, \"__super__\", {\n\
    value: (parent) ? parent : Object,\n\
    enumerable: false,\n\
    configurable: true,\n\
    writable: false,\n\
  });\n\
\n\
  if (props[\"_t\"]) {\n\
    _t_map[props[\"_t\"]] = realCtor;\n\
  }\n\
\n\
  // FIXME(slightlyoff): would like to have class-side inheritance!\n\
  // It's easy enough to do when we have __proto__, but we don't in IE 9/10.\n\
  //   = (\n\
\n\
  /*\n\
  // NOTE: would happily do this except it's 2x slower. Boo!\n\
  props.__proto__ = parent ? parent.prototype : Object.prototype;\n\
  realCtor.prototype = props;\n\
  */\n\
\n\
  var rp = realCtor.prototype = Object.create(\n\
    ((parent) ? parent.prototype : Object.prototype)\n\
  );\n\
\n\
  c.extend(rp, props);\n\
\n\
  // If we're in a browser, we want to support \"subclassing\" HTML elements.\n\
  // This needs some magic and we rely on a wrapped constructor hack to make\n\
  // it happen.\n\
  if (inBrowser) {\n\
    if (parent && parent.prototype instanceof scope.HTMLElement) {\n\
      var intermediateCtor = realCtor;\n\
      var tn = getTagName(rp);\n\
      var upgrade = function(el) {\n\
        el.__proto__ = rp;\n\
        intermediateCtor.apply(el, arguments);\n\
        if (rp[\"created\"]) { el.created(); }\n\
        if (rp[\"decorate\"]) { el.decorate(); }\n\
        return el;\n\
      };\n\
      this.extend(rp, { upgrade: upgrade, });\n\
\n\
      realCtor = function() {\n\
        // We hack the constructor to always return an element with it's\n\
        // prototype wired to ours. Boo.\n\
        return upgrade(\n\
          scope.document.createElement(tn)\n\
        );\n\
      }\n\
      realCtor.prototype = rp;\n\
      this.extend(realCtor, { ctor: intermediateCtor, }); // HACK!!!\n\
    }\n\
  }\n\
\n\
  return realCtor;\n\
};\n\
\n\
c.own = function(obj, cb, context) {\n\
  Object.getOwnPropertyNames(obj).forEach(cb, context||scope);\n\
  return obj;\n\
};\n\
\n\
c.extend = function(obj, props) {\n\
  c.own(props, function(x) {\n\
    var pd = Object.getOwnPropertyDescriptor(props, x);\n\
    try {\n\
      if ( (typeof pd[\"get\"] == \"function\") ||\n\
           (typeof pd[\"set\"] == \"function\") ) {\n\
        Object.defineProperty(obj, x, pd);\n\
      } else if (typeof pd[\"value\"] == \"function\" ||x.charAt(0) === \"_\") {\n\
        pd.writable = true;\n\
        pd.configurable = true;\n\
        pd.enumerable = false;\n\
        Object.defineProperty(obj, x, pd);\n\
      } else {\n\
          obj[x] = props[x];\n\
      }\n\
    } catch(e) {\n\
      // console.warn(\"c.extend assignment failed on property\", x);\n\
    }\n\
  });\n\
  return obj;\n\
};\n\
\n\
// FIXME: legacy API to be removed\n\
c.traceprint = function(s /*String*/) { if (c.verbose) { console.log(s); } };\n\
c.fnenterprint = function(s /*String*/) { console.log(\"* \" + s); };\n\
c.fnexitprint = function(s /*String*/) { console.log(\"- \" + s); };\n\
\n\
c.assert = function(f /*boolean*/, description /*String*/) {\n\
  if (!f) {\n\
    throw new c.InternalError(\"Assertion failed: \" + description);\n\
  }\n\
};\n\
\n\
var exprFromVarOrValue = function(v) {\n\
  if (typeof v == \"number\" ) {\n\
    return c.Expression.fromConstant(v);\n\
  } else if(v instanceof c.Variable) {\n\
    return c.Expression.fromVariable(v);\n\
  }\n\
  return v;\n\
};\n\
\n\
c.plus = function(e1, e2) {\n\
  e1 = exprFromVarOrValue(e1);\n\
  e2 = exprFromVarOrValue(e2);\n\
  return e1.plus(e2);\n\
};\n\
\n\
c.minus = function(e1, e2) {\n\
  e1 = exprFromVarOrValue(e1);\n\
  e2 = exprFromVarOrValue(e2);\n\
  return e1.minus(e2);\n\
};\n\
\n\
c.times = function(e1, e2) {\n\
  e1 = exprFromVarOrValue(e1);\n\
  e2 = exprFromVarOrValue(e2);\n\
  return e1.times(e2);\n\
};\n\
\n\
c.divide = function(e1, e2) {\n\
  e1 = exprFromVarOrValue(e1);\n\
  e2 = exprFromVarOrValue(e2);\n\
  return e1.divide(e2);\n\
};\n\
\n\
c.approx = function(a, b) {\n\
  if (a === b) { return true; }\n\
  a = +(a);\n\
  b = +(b);\n\
  if (a == 0) {\n\
    return (Math.abs(b) < epsilon);\n\
  }\n\
  if (b == 0) {\n\
    return (Math.abs(a) < epsilon);\n\
  }\n\
  return (Math.abs(a - b) < Math.abs(a) * epsilon);\n\
};\n\
\n\
var count = 0;\n\
c._inc = function() { return count++; };\n\
\n\
c.parseJSON = function(str) {\n\
  return JSON.parse(str, function(k, v) {\n\
    if (typeof v != \"object\" || typeof v[\"_t\"] != \"string\") {\n\
      return v;\n\
    }\n\
    var type = v[\"_t\"];\n\
    var ctor = _t_map[type];\n\
    if (type && ctor) {\n\
      var fromJSON = walkForMethod(ctor, \"fromJSON\");\n\
      if (fromJSON) {\n\
        return fromJSON(v, ctor);\n\
      }\n\
    }\n\
    return v;\n\
  });\n\
};\n\
\n\
// For Node...not that I'm bitter. No no, not at all. Not me. Never...\n\
if (typeof require == \"function\" &&\n\
    typeof module != \"undefined\" &&\n\
    typeof load == \"undefined\") {\n\
  scope.exports = c;\n\
}\n\
// ...well, hardly ever.\n\
\n\
})(this);\n\
//@ sourceURL=slightlyoff-cassowary.js/src/c.js"
));
require.register("slightlyoff-cassowary.js/src/HashTable.js", Function("exports, require, module",
"/**\n\
 * Copyright 2012 Alex Russell <slightlyoff@google.com>.\n\
 *\n\
 * Use of this source code is governed by http://www.apache.org/licenses/LICENSE-2.0\n\
 *\n\
 * This is an API compatible re-implementation of the subset of jshashtable\n\
 * which Cassowary actually uses.\n\
 *\n\
 * Features removed:\n\
 *\n\
 *     - multiple values per key\n\
 *     - error tollerent hashing of any variety\n\
 *     - overly careful (or lazy) size counting, etc.\n\
 *     - Crockford's \"class\" pattern. We use the system from c.js.\n\
 *     - any attempt at back-compat with broken runtimes.\n\
 *\n\
 * APIs removed, mostly for lack of use in Cassowary:\n\
 *\n\
 *     - support for custom hashing and equality functions as keys to ctor\n\
 *     - isEmpty() -> check for !ht.size()\n\
 *     - putAll()\n\
 *     - entries()\n\
 *     - containsKey()\n\
 *     - containsValue()\n\
 *     - keys()\n\
 *     - values()\n\
 *\n\
 * Additions:\n\
 *\n\
 *     - new \"scope\" parameter to each() and escapingEach()\n\
 */\n\
\n\
(function(c) {\n\
\"use strict\";\n\
\n\
var keyCode = function(key) {\n\
  var kc = (!!key.hashCode) ? key.hashCode : key.toString();\n\
  return kc;\n\
};\n\
\n\
var copyOwn = function(src, dest) {\n\
  Object.keys(src).forEach(function(x) {\n\
    dest[x] = src[x];\n\
  });\n\
};\n\
\n\
if (false && typeof Map != \"undefined\") {\n\
\n\
  c.HashTable = c.inherit({\n\
\n\
    initialize: function() {\n\
      this.size = 0;\n\
      this._store = new Map();\n\
      this._keys = [];\n\
      // this.get = this._store.get.bind(this._store);\n\
    },\n\
\n\
    set: function(key, value) {\n\
      this._store.set(key, value);\n\
      if (this._keys.indexOf(key) == -1) {\n\
        this.size++;\n\
        // delete this._keys[this._keys.indexOf(key)];\n\
        this._keys.push(key);\n\
      } /* else {\n\
        delete this._keys[this._keys.indexOf(key)];\n\
        this._keys.push(key);\n\
      }\n\
      */\n\
    },\n\
\n\
    get: function(key) {\n\
      return this._store.get(key);\n\
    },\n\
\n\
    clear: function() {\n\
      this.size = 0;\n\
      this._store = new Map();\n\
      this._keys = [];\n\
    },\n\
\n\
    delete: function(key) {\n\
      if (this._store.delete(key) && this.size > 0) {\n\
        delete this._keys[this._keys.indexOf(key)];\n\
        this.size--;\n\
      }\n\
    },\n\
\n\
    each: function(callback, scope) {\n\
      if (!this.size) { return; }\n\
      this._keys.forEach(function(k){\n\
        if (typeof k == \"undefined\") { return; }\n\
        var v = this._store.get(k);\n\
        if (typeof v != \"undefined\") {\n\
          callback.call(scope||null, k, v);\n\
        }\n\
      }, this);\n\
    },\n\
\n\
    escapingEach: function(callback, scope) {\n\
      if (!this.size) { return; }\n\
\n\
      var that = this;\n\
      var kl = this._keys.length;\n\
      var context;\n\
      for (var x = 0; x < kl; x++) {\n\
        if (typeof this._keys[x] != \"undefined\") {\n\
          (function(k) {\n\
            var v = that._store.get(k);\n\
            if (typeof v != \"undefined\") {\n\
              context = callback.call(scope||null, k, v);\n\
            }\n\
          })(this._keys[x]);\n\
\n\
          if (context) {\n\
            if (context.retval !== undefined) {\n\
              return context;\n\
            }\n\
            if (context.brk) {\n\
              break;\n\
            }\n\
          }\n\
        }\n\
      }\n\
    },\n\
\n\
    clone: function() {\n\
      var n = new c.HashTable();\n\
      if (this.size) {\n\
        this.each(function(k, v) {\n\
          n.set(k, v);\n\
        });\n\
      }\n\
      return n;\n\
    }\n\
  });\n\
} else {\n\
  // For escapingEach\n\
  var defaultContext = {};\n\
\n\
  c.HashTable = c.inherit({\n\
\n\
    initialize: function() {\n\
      this.size = 0;\n\
      this._store = {};\n\
      this._keyStrMap = {};\n\
      this._deleted = 0;\n\
    },\n\
\n\
    set: function(key, value) {\n\
      var hash = keyCode(key);\n\
\n\
      if (!this._store.hasOwnProperty(hash)) {\n\
        // FIXME(slightlyoff): if size gooes above the V8 property limit,\n\
        // compact or go to a tree.\n\
        this.size++;\n\
      }\n\
      this._store[hash] = value;\n\
      this._keyStrMap[hash] = key;\n\
    },\n\
\n\
    get: function(key) {\n\
      if(!this.size) { return null; }\n\
\n\
      key = keyCode(key);\n\
\n\
      var v = this._store[key];\n\
      if (typeof v != \"undefined\") {\n\
        return this._store[key];\n\
      }\n\
      return null;\n\
    },\n\
\n\
    clear: function() {\n\
      this.size = 0;\n\
      this._store = {};\n\
      this._keyStrMap = {};\n\
    },\n\
\n\
    _compact: function() {\n\
      // console.time(\"HashTable::_compact()\");\n\
      var ns = {};\n\
      copyOwn(this._store, ns);\n\
      this._store = ns;\n\
      // console.timeEnd(\"HashTable::_compact()\");\n\
    },\n\
\n\
    _compactThreshold: 100,\n\
    _perhapsCompact: function() {\n\
      // If we have more properties than V8's fast property lookup limit, don't\n\
      // bother\n\
      if (this._size > 64) return;\n\
      if (this._deleted > this._compactThreshold) {\n\
        this._compact();\n\
        this._deleted = 0;\n\
      }\n\
    },\n\
\n\
    delete: function(key) {\n\
      key = keyCode(key);\n\
      if (!this._store.hasOwnProperty(key)) {\n\
        return;\n\
      }\n\
      this._deleted++;\n\
\n\
      // FIXME(slightlyoff):\n\
      //    I hate this because it causes these objects to go megamorphic = (\n\
      //    Sadly, Cassowary is hugely sensitive to iteration order changes, and\n\
      //    \"delete\" preserves order when Object.keys() is called later.\n\
      delete this._store[key];\n\
      // Note: we don't delete from _keyStrMap because we only get the\n\
      // Object.keys() from _store, so it's the only one we need to keep up-to-\n\
      // date.\n\
\n\
      if (this.size > 0) {\n\
        this.size--;\n\
      }\n\
    },\n\
\n\
    each: function(callback, scope) {\n\
      if (!this.size) { return; }\n\
\n\
      this._perhapsCompact();\n\
\n\
      var store = this._store;\n\
      var keyMap = this._keyStrMap;\n\
      for (var x in this._store) {\n\
        if (this._store.hasOwnProperty(x)) {\n\
          callback.call(scope||null, keyMap[x], store[x]);\n\
        }\n\
      }\n\
    },\n\
\n\
    escapingEach: function(callback, scope) {\n\
      if (!this.size) { return; }\n\
\n\
      this._perhapsCompact();\n\
\n\
      var that = this;\n\
      var store = this._store;\n\
      var keyMap = this._keyStrMap;\n\
      var context = defaultContext;\n\
      var kl = Object.keys(store);\n\
      for (var x = 0; x < kl.length; x++) {\n\
        (function(v) {\n\
          if (that._store.hasOwnProperty(v)) {\n\
            context = callback.call(scope||null, keyMap[v], store[v]);\n\
          }\n\
        })(kl[x]);\n\
\n\
        if (context) {\n\
          if (context.retval !== undefined) {\n\
            return context;\n\
          }\n\
          if (context.brk) {\n\
            break;\n\
          }\n\
        }\n\
      }\n\
    },\n\
\n\
    clone: function() {\n\
      var n = new c.HashTable();\n\
      if (this.size) {\n\
        n.size = this.size;\n\
        copyOwn(this._store, n._store);\n\
        copyOwn(this._keyStrMap, n._keyStrMap);\n\
      }\n\
      return n;\n\
    },\n\
\n\
    equals: function(other) {\n\
      if (other === this) {\n\
        return true;\n\
      }\n\
\n\
      if (!(other instanceof c.HashTable) || other._size !== this._size) {\n\
        return false;\n\
      }\n\
\n\
      var codes = Object.keys(this._store);\n\
      for (var i = 0; i < codes.length; i++) {\n\
        var code = codes[i];\n\
        if (this._keyStrMap[code] !== other._keyStrMap[code] ||\n\
            this._store[code] !== other._store[code]) {\n\
          return false;\n\
        }\n\
      }\n\
\n\
      return true;\n\
    },\n\
\n\
    toString: function(h) {\n\
      var answer = \"\";\n\
      this.each(function(k, v) { answer += k + \" => \" + v + \"\\n\
\"; });\n\
      return answer;\n\
    },\n\
  });\n\
}\n\
\n\
})(this[\"c\"]||module.parent.exports||{});\n\
//@ sourceURL=slightlyoff-cassowary.js/src/HashTable.js"
));
require.register("slightlyoff-cassowary.js/src/HashSet.js", Function("exports, require, module",
"/**\n\
 * Copyright 2011, Alex Russell <slightlyoff@google.com>\n\
 *\n\
 * Use of this source code is governed by http://www.apache.org/licenses/LICENSE-2.0\n\
 *\n\
 * API compatible re-implementation of jshashset.js, including only what\n\
 * Cassowary needs. Built for speed, not comfort.\n\
 */\n\
(function(c) {\n\
\"use strict\";\n\
\n\
c.HashSet = c.inherit({\n\
  _t: \"c.HashSet\",\n\
\n\
  initialize: function() {\n\
    this.storage = [];\n\
    this.size = 0;\n\
  },\n\
\n\
  add: function(item) {\n\
    var s = this.storage, io = s.indexOf(item);\n\
    if (s.indexOf(item) == -1) { s.push(item); }\n\
    this.size = this.storage.length;\n\
  },\n\
\n\
  values: function() {\n\
    // FIXME(slightlyoff): is it safe to assume we won't be mutated by our caller?\n\
    //                     if not, return this.storage.slice(0);\n\
    return this.storage;\n\
  },\n\
\n\
  has: function(item) {\n\
    var s = this.storage;\n\
    return (s.indexOf(item) != -1);\n\
  },\n\
\n\
  delete: function(item) {\n\
    var io = this.storage.indexOf(item);\n\
    if (io == -1) { return null; }\n\
    this.storage.splice(io, 1)[0];\n\
    this.size = this.storage.length;\n\
  },\n\
\n\
  clear: function() {\n\
    this.storage.length = 0;\n\
  },\n\
\n\
  each: function(func, scope) {\n\
    if(this.size)\n\
      this.storage.forEach(func, scope);\n\
  },\n\
\n\
  escapingEach: function(func, scope) {\n\
    // FIXME(slightlyoff): actually escape!\n\
    if (this.size)\n\
      this.storage.forEach(func, scope);\n\
  },\n\
\n\
  toString: function() {\n\
    var answer = this.size + \" {\";\n\
    var first = true;\n\
    this.each(function(e) {\n\
      if (!first) {\n\
        answer += \", \";\n\
      } else {\n\
        first = false;\n\
      }\n\
      answer += e;\n\
    });\n\
    answer += \"}\\n\
\";\n\
    return answer;\n\
  },\n\
\n\
  toJSON: function() {\n\
    var d = [];\n\
    this.each(function(e) {\n\
      d.push(e.toJSON());\n\
    });\n\
    return {\n\
      _t: \"c.HashSet\",\n\
      data: d\n\
    };\n\
  },\n\
\n\
  fromJSON: function(o) {\n\
    var r = new c.HashSet();\n\
    if (o.data) {\n\
      r.size = o.data.length;\n\
      r.storage = o.data;\n\
    }\n\
    return r;\n\
  },\n\
});\n\
\n\
})(this[\"c\"]||module.parent.exports||{});\n\
//@ sourceURL=slightlyoff-cassowary.js/src/HashSet.js"
));
require.register("slightlyoff-cassowary.js/src/Error.js", Function("exports, require, module",
"// Copyright (C) 1998-2000 Greg J. Badros\n\
// Use of this source code is governed by http://www.apache.org/licenses/LICENSE-2.0\n\
//\n\
// Parts Copyright (C) 2011-2012, Alex Russell (slightlyoff@chromium.org)\n\
\n\
(function(c){\n\
  \"use strict\";\n\
\n\
  c.Error = c.inherit({\n\
    // extends: Error,\n\
    initialize: function(s /*String*/) { if (s) { this._description = s; } },\n\
    _name: \"c.Error\",\n\
    _description: \"An error has occured in Cassowary\",\n\
    set description(v)   { this._description = v; },\n\
    get description()    { return \"(\" + this._name + \") \" + this._description; },\n\
    get message()        { return this.description; },\n\
    toString: function() { return this.description; },\n\
  });\n\
\n\
  var errorType = function(name, error) {\n\
    return c.inherit({\n\
      extends: c.Error,\n\
      initialize: function() { c.Error.apply(this, arguments); },\n\
      _name: name||\"\", _description: error||\"\"\n\
    });\n\
  };\n\
\n\
  c.ConstraintNotFound =\n\
    errorType(\"c.ConstraintNotFound\",\n\
        \"Tried to remove a constraint never added to the tableu\");\n\
\n\
  c.InternalError =\n\
    errorType(\"c.InternalError\");\n\
\n\
  c.NonExpression =\n\
    errorType(\"c.NonExpression\",\n\
        \"The resulting expression would be non\");\n\
\n\
  c.NotEnoughStays =\n\
    errorType(\"c.NotEnoughStays\",\n\
        \"There are not enough stays to give specific values to every variable\");\n\
\n\
  c.RequiredFailure =\n\
    errorType(\"c.RequiredFailure\", \"A required constraint cannot be satisfied\");\n\
\n\
  c.TooDifficult =\n\
    errorType(\"c.TooDifficult\", \"The constraints are too difficult to solve\");\n\
\n\
})(this[\"c\"]||module.parent.exports||{});\n\
//@ sourceURL=slightlyoff-cassowary.js/src/Error.js"
));
require.register("slightlyoff-cassowary.js/src/SymbolicWeight.js", Function("exports, require, module",
"// Copyright (C) 1998-2000 Greg J. Badros\n\
// Use of this source code is governed by http://www.apache.org/licenses/LICENSE-2.0\n\
//\n\
// Parts Copyright (C) 2011-2012, Alex Russell (slightlyoff@chromium.org)\n\
\n\
(function(c) {\n\
\"use strict\";\n\
\n\
var multiplier = 1000;\n\
\n\
c.SymbolicWeight = c.inherit({\n\
  _t: \"c.SymbolicWeight\",\n\
  initialize: function(/*w1, w2, w3*/) {\n\
    this.value = 0;\n\
    var factor = 1;\n\
    for (var i = arguments.length - 1; i >= 0; --i) {\n\
      this.value += arguments[i] * factor;\n\
      factor *= multiplier;\n\
    }\n\
  },\n\
\n\
  toJSON: function() {\n\
    return {\n\
      _t: this._t,\n\
      value: this.value\n\
    };\n\
  },\n\
});\n\
\n\
})(this[\"c\"]||module.parent.exports||{});\n\
//@ sourceURL=slightlyoff-cassowary.js/src/SymbolicWeight.js"
));
require.register("slightlyoff-cassowary.js/src/Strength.js", Function("exports, require, module",
"// Copyright (C) 1998-2000 Greg J. Badros\n\
// Use of this source code is governed by http://www.apache.org/licenses/LICENSE-2.0\n\
//\n\
// Parts Copyright (C) 2011, Alex Russell (slightlyoff@chromium.org)\n\
\n\
// FILE: EDU.Washington.grad.gjb.cassowary\n\
// package EDU.Washington.grad.gjb.cassowary;\n\
\n\
(function(c) {\n\
\n\
c.Strength = c.inherit({\n\
  initialize: function(name /*String*/, symbolicWeight, w2, w3) {\n\
    this.name = name;\n\
    if (symbolicWeight instanceof c.SymbolicWeight) {\n\
      this.symbolicWeight = symbolicWeight;\n\
    } else {\n\
      this.symbolicWeight = new c.SymbolicWeight(symbolicWeight, w2, w3);\n\
    }\n\
  },\n\
\n\
  get required() {\n\
    return (this === c.Strength.required);\n\
  },\n\
\n\
  toString: function() {\n\
    return this.name + (!this.isRequired ? (\":\" + this.symbolicWeight) : \"\");\n\
  },\n\
});\n\
\n\
/* public static final */\n\
c.Strength.required = new c.Strength(\"<Required>\", 1000, 1000, 1000);\n\
/* public static final  */\n\
c.Strength.strong = new c.Strength(\"strong\", 1, 0, 0);\n\
/* public static final  */\n\
c.Strength.medium = new c.Strength(\"medium\", 0, 1, 0);\n\
/* public static final  */\n\
c.Strength.weak = new c.Strength(\"weak\", 0, 0, 1);\n\
\n\
})(this[\"c\"]||((typeof module != \"undefined\") ? module.parent.exports.c : {}));\n\
//@ sourceURL=slightlyoff-cassowary.js/src/Strength.js"
));
require.register("slightlyoff-cassowary.js/src/Variable.js", Function("exports, require, module",
"// Copyright (C) 1998-2000 Greg J. Badros\n\
// Use of this source code is governed by http://www.apache.org/licenses/LICENSE-2.0\n\
//\n\
// Parts Copyright (C) 2011-2012, Alex Russell (slightlyoff@chromium.org)\n\
\n\
(function(c) {\n\
\"use strict\";\n\
\n\
c.AbstractVariable = c.inherit({\n\
  isDummy:      false,\n\
  isExternal:   false,\n\
  isPivotable:  false,\n\
  isRestricted: false,\n\
\n\
  _init: function(args, varNamePrefix) {\n\
    // Common mixin initialization.\n\
    this.hashCode = c._inc();\n\
    this.name = (varNamePrefix||\"\") + this.hashCode;\n\
    if (args) {\n\
      if (typeof args.name != \"undefined\") {\n\
        this.name = args.name;\n\
      }\n\
      if (typeof args.value != \"undefined\") {\n\
        this.value = args.value;\n\
      }\n\
      if (typeof args.prefix != \"undefined\") {\n\
        this._prefix = args.prefix;\n\
      }\n\
    }\n\
  },\n\
\n\
  _prefix: \"\",\n\
  name: \"\",\n\
  value: 0,\n\
\n\
  valueOf: function() { return this.value; },\n\
\n\
  toJSON: function() {\n\
    var o = {};\n\
    if (this._t) {\n\
      o._t = this._t;\n\
    }\n\
    if (this.name) {\n\
      o.name = this.name;\n\
    }\n\
    if (typeof this.value != \"undefined\") {\n\
      o.value = this.value;\n\
    }\n\
    if (this._prefix) {\n\
      o._prefix = this._prefix;\n\
    }\n\
    if (this._t) {\n\
      o._t = this._t;\n\
    }\n\
    return o;\n\
  },\n\
\n\
  fromJSON: function(o, Ctor) {\n\
    var r = new Ctor();\n\
    c.extend(r, o);\n\
    return r;\n\
  },\n\
\n\
  toString: function() {\n\
    return this._prefix + \"[\" + this.name + \":\" + this.value + \"]\";\n\
  },\n\
\n\
});\n\
\n\
c.Variable = c.inherit({\n\
  _t: \"c.Variable\",\n\
  extends: c.AbstractVariable,\n\
  initialize: function(args) {\n\
    this._init(args, \"v\");\n\
    var vm = c.Variable._map;\n\
    if (vm) { vm[this.name] = this; }\n\
  },\n\
  isExternal:     true,\n\
});\n\
\n\
/* static */\n\
// c.Variable._map = [];\n\
\n\
c.DummyVariable = c.inherit({\n\
  _t: \"c.DummyVariable\",\n\
  extends: c.AbstractVariable,\n\
  initialize: function(args) {\n\
    this._init(args, \"d\");\n\
  },\n\
  isDummy:        true,\n\
  isRestricted:   true,\n\
  value:         \"dummy\",\n\
});\n\
\n\
c.ObjectiveVariable = c.inherit({\n\
  _t: \"c.ObjectiveVariable\",\n\
  extends: c.AbstractVariable,\n\
  initialize: function(args) {\n\
    this._init(args, \"o\");\n\
  },\n\
  value:         \"obj\",\n\
});\n\
\n\
c.SlackVariable = c.inherit({\n\
  _t: \"c.SlackVariable\",\n\
  extends: c.AbstractVariable,\n\
  initialize: function(args) {\n\
    this._init(args, \"s\");\n\
  },\n\
  isPivotable:    true,\n\
  isRestricted:   true,\n\
  value:         \"slack\",\n\
});\n\
\n\
})(this[\"c\"]||module.parent.exports||{});\n\
//@ sourceURL=slightlyoff-cassowary.js/src/Variable.js"
));
require.register("slightlyoff-cassowary.js/src/Point.js", Function("exports, require, module",
"// Copyright (C) 1998-2000 Greg J. Badros\n\
// Use of this source code is governed by http://www.apache.org/licenses/LICENSE-2.0\n\
//\n\
// Parts Copyright (C) 2011, Alex Russell (slightlyoff@chromium.org)\n\
\n\
(function(c) {\n\
\"use strict\";\n\
\n\
c.Point = c.inherit({\n\
  initialize: function(x, y, suffix) {\n\
    if (x instanceof c.Variable) {\n\
      this._x = x;\n\
    } else {\n\
      var xArgs = { value: x };\n\
      if (suffix) {\n\
        xArgs.name = \"x\" + suffix;\n\
      }\n\
      this._x = new c.Variable(xArgs);\n\
    }\n\
    if (y instanceof c.Variable) {\n\
      this._y = y;\n\
    } else {\n\
      var yArgs = { value: y };\n\
      if (suffix) {\n\
        yArgs.name = \"y\" + suffix;\n\
      }\n\
      this._y = new c.Variable(yArgs);\n\
    }\n\
  },\n\
\n\
  get x() { return this._x; },\n\
  set x(x) {\n\
    if (x instanceof c.Variable) {\n\
      this._x = x;\n\
    } else {\n\
      this._x.value = x;\n\
    }\n\
  },\n\
\n\
  get y() { return this._y; },\n\
  set y(y) {\n\
    if (y instanceof c.Variable) {\n\
      this._y = y;\n\
    } else {\n\
      this._y.value = y;\n\
    }\n\
  },\n\
\n\
  toString: function() {\n\
    return \"(\" + this.x + \", \" + this.y + \")\";\n\
  },\n\
});\n\
\n\
})(this[\"c\"]||module.parent.exports||{});\n\
//@ sourceURL=slightlyoff-cassowary.js/src/Point.js"
));
require.register("slightlyoff-cassowary.js/src/Expression.js", Function("exports, require, module",
"// Copyright (C) 1998-2000 Greg J. Badros\n\
// Use of this source code is governed by http://www.apache.org/licenses/LICENSE-2.0\n\
//\n\
// Parts Copyright (C) 2011, Alex Russell (slightlyoff@chromium.org)\n\
\n\
// FILE: EDU.Washington.grad.gjb.cassowary\n\
// package EDU.Washington.grad.gjb.cassowary;\n\
\n\
(function(c) {\n\
\"use strict\";\n\
\n\
var checkNumber = function(value, otherwise){\n\
  // if(isNaN(value)) { debugger; }\n\
  return (typeof value === \"number\") ? value : otherwise;\n\
};\n\
\n\
c.Expression = c.inherit({\n\
\n\
  initialize: function(cvar /*c.AbstractVariable*/,\n\
                       value /*double*/,\n\
                       constant /*double*/) {\n\
    this.constant = checkNumber(constant, 0);\n\
    this.terms = new c.HashTable();\n\
    if (cvar instanceof c.AbstractVariable) {\n\
      value = checkNumber(value, 1);\n\
      this.setVariable(cvar, value);\n\
    } else if (typeof cvar == \"number\") {\n\
      if (!isNaN(cvar)) {\n\
        this.constant = cvar;\n\
      } else {\n\
        console.trace();\n\
      }\n\
    }\n\
  },\n\
\n\
  initializeFromHash: function(constant /*ClDouble*/, terms /*c.Hashtable*/) {\n\
    if (c.verbose) {\n\
      console.log(\"*******************************\");\n\
      console.log(\"clone c.initializeFromHash\");\n\
      console.log(\"*******************************\");\n\
    }\n\
\n\
    if (c.GC) console.log(\"clone c.Expression\");\n\
    this.constant = constant;\n\
    this.terms = terms.clone();\n\
    return this;\n\
  },\n\
\n\
  multiplyMe: function(x /*double*/) {\n\
    this.constant *= x;\n\
    var t = this.terms;\n\
    t.each(function(clv, coeff) { t.set(clv, coeff * x); });\n\
    return this;\n\
  },\n\
\n\
  clone: function() {\n\
    if (c.verbose) {\n\
      console.log(\"*******************************\");\n\
      console.log(\"clone c.Expression\");\n\
      console.log(\"*******************************\");\n\
    }\n\
\n\
    var e = c.Expression.empty();\n\
    e.initializeFromHash(this.constant, this.terms);\n\
    return e;\n\
  },\n\
\n\
  times: function(x) {\n\
    if (typeof x == 'number') {\n\
      return (this.clone()).multiplyMe(x);\n\
    } else {\n\
      if (this.isConstant) {\n\
        return x.times(this.constant);\n\
      } else if (x.isConstant) {\n\
        return this.times(x.constant);\n\
      } else {\n\
        throw new c.NonExpression();\n\
      }\n\
    }\n\
  },\n\
\n\
  plus: function(expr /*c.Expression*/) {\n\
    if (expr instanceof c.Expression) {\n\
      return this.clone().addExpression(expr, 1);\n\
    } else if (expr instanceof c.Variable) {\n\
      return this.clone().addVariable(expr, 1);\n\
    }\n\
  },\n\
\n\
  minus: function(expr /*c.Expression*/) {\n\
    if (expr instanceof c.Expression) {\n\
      return this.clone().addExpression(expr, -1);\n\
    } else if (expr instanceof c.Variable) {\n\
      return this.clone().addVariable(expr, -1);\n\
    }\n\
  },\n\
\n\
  divide: function(x) {\n\
    if (typeof x == 'number') {\n\
      if (c.approx(x, 0)) {\n\
        throw new c.NonExpression();\n\
      }\n\
      return this.times(1 / x);\n\
    } else if (x instanceof c.Expression) {\n\
      if (!x.isConstant) {\n\
        throw new c.NonExpression();\n\
      }\n\
      return this.times(1 / x.constant);\n\
    }\n\
  },\n\
\n\
  addExpression: function(expr /*c.Expression*/,\n\
                          n /*double*/,\n\
                          subject /*c.AbstractVariable*/,\n\
                          solver /*c.Tableau*/) {\n\
\n\
    // console.log(\"c.Expression::addExpression()\", expr, n);\n\
    // console.trace();\n\
    if (expr instanceof c.AbstractVariable) {\n\
      expr = c.Expression.fromVariable(expr);\n\
      // if(c.trace) console.log(\"addExpression: Had to cast a var to an expression\");\n\
    }\n\
    n = checkNumber(n, 1);\n\
    this.constant += (n * expr.constant);\n\
    expr.terms.each(function(clv, coeff) {\n\
      // console.log(\"clv:\", clv, \"coeff:\", coeff, \"subject:\", subject);\n\
      this.addVariable(clv, coeff * n, subject, solver);\n\
    }, this);\n\
    return this;\n\
  },\n\
\n\
  addVariable: function(v /*c.AbstractVariable*/, cd /*double*/, subject, solver) {\n\
    if (cd == null) {\n\
      cd = 1;\n\
    }\n\
\n\
    if (c.trace) console.log(\"c.Expression::addVariable():\", v , cd);\n\
    var coeff = this.terms.get(v);\n\
    if (coeff) {\n\
      var newCoefficient = coeff + cd;\n\
      if (newCoefficient == 0 || c.approx(newCoefficient, 0)) {\n\
        if (solver) {\n\
          solver.noteRemovedVariable(v, subject);\n\
        }\n\
        this.terms.delete(v);\n\
      } else {\n\
        this.setVariable(v, newCoefficient);\n\
      }\n\
    } else {\n\
      if (!c.approx(cd, 0)) {\n\
        this.setVariable(v, cd);\n\
        if (solver) {\n\
          solver.noteAddedVariable(v, subject);\n\
        }\n\
      }\n\
    }\n\
    return this;\n\
  },\n\
\n\
  setVariable: function(v /*c.AbstractVariable*/, c /*double*/) {\n\
    // console.log(\"terms.set(\", v, c, \")\");\n\
    this.terms.set(v, c);\n\
    return this;\n\
  },\n\
\n\
  anyPivotableVariable: function() {\n\
    if (this.isConstant) {\n\
      throw new c.InternalError(\"anyPivotableVariable called on a constant\");\n\
    }\n\
\n\
    var rv = this.terms.escapingEach(function(clv, c) {\n\
      if (clv.isPivotable) return { retval: clv };\n\
    });\n\
\n\
    if (rv && rv.retval !== undefined) {\n\
      return rv.retval;\n\
    }\n\
\n\
    return null;\n\
  },\n\
\n\
  substituteOut: function(outvar  /*c.AbstractVariable*/,\n\
                          expr    /*c.Expression*/,\n\
                          subject /*c.AbstractVariable*/,\n\
                          solver  /*ClTableau*/) {\n\
\n\
    if (c.trace) {\n\
      c.fnenterprint(\"CLE:substituteOut: \" + outvar + \", \" + expr + \", \" + subject + \", ...\");\n\
      c.traceprint(\"this = \" + this);\n\
    }\n\
    var setVariable = this.setVariable.bind(this);\n\
    var terms = this.terms;\n\
    var multiplier = terms.get(outvar);\n\
    terms.delete(outvar);\n\
    this.constant += (multiplier * expr.constant);\n\
    /*\n\
    console.log(\"substituteOut:\",\n\
                \"\\n\
\\toutvar:\", outvar,\n\
                \"\\n\
\\texpr:\", expr.toString(),\n\
                \"\\n\
\\tmultiplier:\", multiplier,\n\
                \"\\n\
\\tterms:\", terms);\n\
    */\n\
    expr.terms.each(function(clv, coeff) {\n\
      var oldCoefficient = terms.get(clv);\n\
      if (oldCoefficient) {\n\
        var newCoefficient = oldCoefficient + multiplier * coeff;\n\
        if (c.approx(newCoefficient, 0)) {\n\
          solver.noteRemovedVariable(clv, subject);\n\
          terms.delete(clv);\n\
        } else {\n\
          terms.set(clv, newCoefficient);\n\
        }\n\
      } else {\n\
        terms.set(clv, multiplier * coeff);\n\
        if (solver) {\n\
          solver.noteAddedVariable(clv, subject);\n\
        }\n\
      }\n\
    });\n\
    if (c.trace) c.traceprint(\"Now this is \" + this);\n\
  },\n\
\n\
  changeSubject: function(old_subject /*c.AbstractVariable*/,\n\
                          new_subject /*c.AbstractVariable*/) {\n\
    this.setVariable(old_subject, this.newSubject(new_subject));\n\
  },\n\
\n\
  newSubject: function(subject /*c.AbstractVariable*/) {\n\
    if (c.trace) c.fnenterprint(\"newSubject:\" + subject);\n\
\n\
    var reciprocal = 1 / this.terms.get(subject);\n\
    this.terms.delete(subject);\n\
    this.multiplyMe(-reciprocal);\n\
    return reciprocal;\n\
  },\n\
\n\
  // Return the coefficient corresponding to variable var, i.e.,\n\
  // the 'ci' corresponding to the 'vi' that var is:\n\
  //     v1*c1 + v2*c2 + .. + vn*cn + c\n\
  coefficientFor: function(clv /*c.AbstractVariable*/) {\n\
    return this.terms.get(clv) || 0;\n\
  },\n\
\n\
  get isConstant() {\n\
    return this.terms.size == 0;\n\
  },\n\
\n\
  toString: function() {\n\
    var bstr = ''; // answer\n\
    var needsplus = false;\n\
    if (!c.approx(this.constant, 0) || this.isConstant) {\n\
      bstr += this.constant;\n\
      if (this.isConstant) {\n\
        return bstr;\n\
      } else {\n\
        needsplus = true;\n\
      }\n\
    }\n\
    this.terms.each( function(clv, coeff) {\n\
      if (needsplus) {\n\
        bstr += \" + \";\n\
      }\n\
      bstr += coeff + \"*\" + clv;\n\
      needsplus = true;\n\
    });\n\
    return bstr;\n\
  },\n\
\n\
  equals: function(other) {\n\
    if (other === this) {\n\
      return true;\n\
    }\n\
\n\
    return other instanceof c.Expression &&\n\
           other.constant === this.constant &&\n\
           other.terms.equals(this.terms);\n\
  },\n\
\n\
  Plus: function(e1 /*c.Expression*/, e2 /*c.Expression*/) {\n\
    return e1.plus(e2);\n\
  },\n\
\n\
  Minus: function(e1 /*c.Expression*/, e2 /*c.Expression*/) {\n\
    return e1.minus(e2);\n\
  },\n\
\n\
  Times: function(e1 /*c.Expression*/, e2 /*c.Expression*/) {\n\
    return e1.times(e2);\n\
  },\n\
\n\
  Divide: function(e1 /*c.Expression*/, e2 /*c.Expression*/) {\n\
    return e1.divide(e2);\n\
  },\n\
});\n\
\n\
c.Expression.empty = function() {\n\
  return new c.Expression(undefined, 1, 0);\n\
};\n\
\n\
c.Expression.fromConstant = function(cons) {\n\
  return new c.Expression(cons);\n\
};\n\
\n\
c.Expression.fromValue = function(v) {\n\
  v = +(v);\n\
  return new c.Expression(undefined, v, 0);\n\
};\n\
\n\
c.Expression.fromVariable = function(v) {\n\
  return new c.Expression(v, 1, 0);\n\
}\n\
\n\
})(this[\"c\"]||module.parent.exports||{});\n\
//@ sourceURL=slightlyoff-cassowary.js/src/Expression.js"
));
require.register("slightlyoff-cassowary.js/src/Constraint.js", Function("exports, require, module",
"// Copyright (C) 1998-2000 Greg J. Badros\n\
// Use of this source code is governed by http://www.apache.org/licenses/LICENSE-2.0\n\
//\n\
// Parts Copyright (C) 2011-2012, Alex Russell (slightlyoff@chromium.org)\n\
\n\
(function(c) {\n\
\"use strict\";\n\
\n\
c.AbstractConstraint = c.inherit({\n\
  initialize: function(strength /*c.Strength*/, weight /*double*/) {\n\
    this.hashCode = c._inc();\n\
    this.strength = strength || c.Strength.required;\n\
    this.weight = weight || 1;\n\
  },\n\
\n\
  isEditConstraint: false,\n\
  isInequality:     false,\n\
  isStayConstraint: false,\n\
  get required() { return (this.strength === c.Strength.required); },\n\
\n\
  toString: function() {\n\
    // this is abstract -- it intentionally leaves the parens unbalanced for\n\
    // the subclasses to complete (e.g., with ' = 0', etc.\n\
    return this.strength + \" {\" + this.weight + \"} (\" + this.expression +\")\";\n\
  },\n\
});\n\
\n\
var ts = c.AbstractConstraint.prototype.toString;\n\
\n\
var EditOrStayCtor = function(cv /*c.Variable*/, strength /*c.Strength*/, weight /*double*/) {\n\
  c.AbstractConstraint.call(this, strength || c.Strength.strong, weight);\n\
  this.variable = cv;\n\
  this.expression = new c.Expression(cv, -1, cv.value);\n\
};\n\
\n\
c.EditConstraint = c.inherit({\n\
  extends: c.AbstractConstraint,\n\
  initialize: function() { EditOrStayCtor.apply(this, arguments); },\n\
  isEditConstraint: true,\n\
  toString: function() { return \"edit:\" + ts.call(this); },\n\
});\n\
\n\
c.StayConstraint = c.inherit({\n\
  extends: c.AbstractConstraint,\n\
  initialize: function() { EditOrStayCtor.apply(this, arguments); },\n\
  isStayConstraint: true,\n\
  toString: function() { return \"stay:\" + ts.call(this); },\n\
});\n\
\n\
var lc =\n\
c.Constraint = c.inherit({\n\
  extends: c.AbstractConstraint,\n\
  initialize: function(cle /*c.Expression*/,\n\
                       strength /*c.Strength*/,\n\
                       weight /*double*/) {\n\
    c.AbstractConstraint.call(this, strength, weight);\n\
    this.expression = cle;\n\
  },\n\
});\n\
\n\
c.Inequality = c.inherit({\n\
  extends: c.Constraint,\n\
\n\
  _cloneOrNewCle: function(cle) {\n\
    // FIXME(D4): move somewhere else?\n\
    if (cle.clone)  {\n\
      return cle.clone();\n\
    } else {\n\
      return new c.Expression(cle);\n\
    }\n\
  },\n\
\n\
  initialize: function(a1, a2, a3, a4, a5) {\n\
    // FIXME(slightlyoff): what a disgusting mess. Should at least add docs.\n\
    // console.log(\"c.Inequality.initialize(\", a1, a2, a3, a4, a5, \")\");\n\
\n\
    var a1IsExp = a1 instanceof c.Expression,\n\
        a3IsExp = a3 instanceof c.Expression,\n\
        a1IsVar = a1 instanceof c.AbstractVariable,\n\
        a3IsVar = a3 instanceof c.AbstractVariable,\n\
        a1IsNum = typeof(a1) == 'number',\n\
        a3IsNum = typeof(a3) == 'number';\n\
\n\
    // (cle || number), op, cv\n\
    if ((a1IsExp || a1IsNum) && a3IsVar) {\n\
      var cle = a1, op = a2, cv = a3, strength = a4, weight = a5;\n\
      lc.call(this, this._cloneOrNewCle(cle), strength, weight);\n\
      if (op == c.LEQ) {\n\
        this.expression.multiplyMe(-1);\n\
        this.expression.addVariable(cv);\n\
      } else if (op == c.GEQ) {\n\
        this.expression.addVariable(cv, -1);\n\
      } else {\n\
        throw new c.InternalError(\"Invalid operator in c.Inequality constructor\");\n\
      }\n\
    // cv, op, (cle || number)\n\
    } else if (a1IsVar && (a3IsExp || a3IsNum)) {\n\
      var cle = a3, op = a2, cv = a1, strength = a4, weight = a5;\n\
      lc.call(this, this._cloneOrNewCle(cle), strength, weight);\n\
      if (op == c.GEQ) {\n\
        this.expression.multiplyMe(-1);\n\
        this.expression.addVariable(cv);\n\
      } else if (op == c.LEQ) {\n\
        this.expression.addVariable(cv, -1);\n\
      } else {\n\
        throw new c.InternalError(\"Invalid operator in c.Inequality constructor\");\n\
      }\n\
    // cle, op, num\n\
    } else if (a1IsExp && a3IsNum) {\n\
      var cle1 = a1, op = a2, cle2 = a3, strength = a4, weight = a5;\n\
      lc.call(this, this._cloneOrNewCle(cle1), strength, weight);\n\
      if (op == c.LEQ) {\n\
        this.expression.multiplyMe(-1);\n\
        this.expression.addExpression(this._cloneOrNewCle(cle2));\n\
      } else if (op == c.GEQ) {\n\
        this.expression.addExpression(this._cloneOrNewCle(cle2), -1);\n\
      } else {\n\
        throw new c.InternalError(\"Invalid operator in c.Inequality constructor\");\n\
      }\n\
      return this\n\
    // num, op, cle\n\
    } else if (a1IsNum && a3IsExp) {\n\
      var cle1 = a3, op = a2, cle2 = a1, strength = a4, weight = a5;\n\
      lc.call(this, this._cloneOrNewCle(cle1), strength, weight);\n\
      if (op == c.GEQ) {\n\
        this.expression.multiplyMe(-1);\n\
        this.expression.addExpression(this._cloneOrNewCle(cle2));\n\
      } else if (op == c.LEQ) {\n\
        this.expression.addExpression(this._cloneOrNewCle(cle2), -1);\n\
      } else {\n\
        throw new c.InternalError(\"Invalid operator in c.Inequality constructor\");\n\
      }\n\
      return this\n\
    // cle op cle\n\
    } else if (a1IsExp && a3IsExp) {\n\
      var cle1 = a1, op = a2, cle2 = a3, strength = a4, weight = a5;\n\
      lc.call(this, this._cloneOrNewCle(cle2), strength, weight);\n\
      if (op == c.GEQ) {\n\
        this.expression.multiplyMe(-1);\n\
        this.expression.addExpression(this._cloneOrNewCle(cle1));\n\
      } else if (op == c.LEQ) {\n\
        this.expression.addExpression(this._cloneOrNewCle(cle1), -1);\n\
      } else {\n\
        throw new c.InternalError(\"Invalid operator in c.Inequality constructor\");\n\
      }\n\
    // cle\n\
    } else if (a1IsExp) {\n\
      return lc.call(this, a1, a2, a3);\n\
    // >=\n\
    } else if (a2 == c.GEQ) {\n\
      lc.call(this, new c.Expression(a3), a4, a5);\n\
      this.expression.multiplyMe(-1);\n\
      this.expression.addVariable(a1);\n\
    // <=\n\
    } else if (a2 == c.LEQ) {\n\
      lc.call(this, new c.Expression(a3), a4, a5);\n\
      this.expression.addVariable(a1,-1);\n\
    // error\n\
    } else {\n\
      throw new c.InternalError(\"Invalid operator in c.Inequality constructor\");\n\
    }\n\
  },\n\
\n\
  isInequality: true,\n\
\n\
  toString: function() {\n\
    // return \"c.Inequality: \" + this.hashCode;\n\
    return lc.prototype.toString.call(this) + \" >= 0) id: \" + this.hashCode;\n\
  },\n\
});\n\
\n\
c.Equation = c.inherit({\n\
  extends: c.Constraint,\n\
  initialize: function(a1, a2, a3, a4) {\n\
    // FIXME(slightlyoff): this is just a huge mess.\n\
    if (a1 instanceof c.Expression && !a2 || a2 instanceof c.Strength) {\n\
      lc.call(this, a1, a2, a3);\n\
    } else if ((a1 instanceof c.AbstractVariable) &&\n\
               (a2 instanceof c.Expression)) {\n\
\n\
      var cv = a1, cle = a2, strength = a3, weight = a4;\n\
      lc.call(this, cle.clone(), strength, weight);\n\
      this.expression.addVariable(cv, -1);\n\
\n\
    } else if ((a1 instanceof c.AbstractVariable) &&\n\
               (typeof(a2) == 'number')) {\n\
\n\
      var cv = a1, val = a2, strength = a3, weight = a4;\n\
      lc.call(this, new c.Expression(val), strength, weight);\n\
      this.expression.addVariable(cv, -1);\n\
\n\
    } else if ((a1 instanceof c.Expression) &&\n\
               (a2 instanceof c.AbstractVariable)) {\n\
\n\
      var cle = a1, cv = a2, strength = a3, weight = a4;\n\
      lc.call(this, cle.clone(), strength, weight);\n\
      this.expression.addVariable(cv, -1);\n\
\n\
    } else if (((a1 instanceof c.Expression) || (a1 instanceof c.AbstractVariable) ||\n\
                (typeof(a1) == 'number')) &&\n\
               ((a2 instanceof c.Expression) || (a2 instanceof c.AbstractVariable) ||\n\
                (typeof(a2) == 'number'))) {\n\
\n\
      if (a1 instanceof c.Expression) {\n\
        a1 = a1.clone();\n\
      } else {\n\
        a1 = new c.Expression(a1);\n\
      }\n\
\n\
      if (a2 instanceof c.Expression) {\n\
        a2 = a2.clone();\n\
      } else {\n\
        a2 = new c.Expression(a2);\n\
      }\n\
\n\
      lc.call(this, a1, a3, a4);\n\
      this.expression.addExpression(a2, -1);\n\
\n\
    } else {\n\
      throw \"Bad initializer to c.Equation\";\n\
    }\n\
    c.assert(this.strength instanceof c.Strength, \"_strength not set\");\n\
  },\n\
\n\
  toString: function() {\n\
    return lc.prototype.toString.call(this) + \" = 0)\";\n\
  },\n\
});\n\
\n\
})(this[\"c\"]||module.parent.exports||{});\n\
//@ sourceURL=slightlyoff-cassowary.js/src/Constraint.js"
));
require.register("slightlyoff-cassowary.js/src/EditInfo.js", Function("exports, require, module",
"// Copyright (C) 1998-2000 Greg J. Badros\n\
// Use of this source code is governed by http://www.apache.org/licenses/LICENSE-2.0\n\
//\n\
// Parts Copyright (C) 2011, Alex Russell (slightlyoff@chromium.org)\n\
\n\
(function(c) {\n\
\"use strict\";\n\
\n\
c.EditInfo = c.inherit({\n\
  initialize: function(cn      /*c.Constraint*/,\n\
                       eplus   /*c.SlackVariable*/,\n\
                       eminus  /*c.SlackVariable*/,\n\
                       prevEditConstant /*double*/,\n\
                       i /*int*/) {\n\
    this.constraint = cn;\n\
    this.editPlus = eplus;\n\
    this.editMinus = eminus;\n\
    this.prevEditConstant = prevEditConstant;\n\
    this.index = i;\n\
  },\n\
  toString: function() {\n\
    return \"<cn=\" + this.constraint +\n\
           \", ep=\" + this.editPlus +\n\
           \", em=\" + this.editMinus +\n\
           \", pec=\" + this.prevEditConstant +\n\
           \", index=\" + this.index + \">\";\n\
  }\n\
});\n\
\n\
})(this[\"c\"]||module.parent.exports||{});\n\
//@ sourceURL=slightlyoff-cassowary.js/src/EditInfo.js"
));
require.register("slightlyoff-cassowary.js/src/Tableau.js", Function("exports, require, module",
"// Copyright (C) 1998-2000 Greg J. Badros\n\
// Use of this source code is governed by http://www.apache.org/licenses/LICENSE-2.0\n\
//\n\
// Parts Copyright (C) 2011, Alex Russell (slightlyoff@chromium.org)\n\
\n\
(function(c) {\n\
\"use strict\";\n\
\n\
c.Tableau = c.inherit({\n\
  initialize: function() {\n\
    // columns is a mapping from variables which occur in expressions to the\n\
    // set of basic variables whose expressions contain them\n\
    // i.e., it's a mapping from variables in expressions (a column) to the\n\
    // set of rows that contain them\n\
    this.columns = new c.HashTable(); // values are sets\n\
\n\
    // _rows maps basic variables to the expressions for that row in the tableau\n\
    this.rows = new c.HashTable();    // values are c.Expressions\n\
\n\
    // the collection of basic variables that have infeasible rows\n\
    // (used when reoptimizing)\n\
    this._infeasibleRows = new c.HashSet();\n\
\n\
    // the set of rows where the basic variable is external this was added to\n\
    // the C++ version to reduce time in setExternalVariables()\n\
    this._externalRows = new c.HashSet();\n\
\n\
    // the set of external variables which are parametric this was added to the\n\
    // C++ version to reduce time in setExternalVariables()\n\
    this._externalParametricVars = new c.HashSet();\n\
  },\n\
\n\
  // Variable v has been removed from an Expression.  If the Expression is in a\n\
  // tableau the corresponding basic variable is subject (or if subject is nil\n\
  // then it's in the objective function). Update the column cross-indices.\n\
  noteRemovedVariable: function(v /*c.AbstractVariable*/,\n\
                                subject /*c.AbstractVariable*/) {\n\
    c.trace && console.log(\"c.Tableau::noteRemovedVariable: \", v, subject);\n\
    var column = this.columns.get(v);\n\
    if (subject && column) {\n\
      column.delete(subject);\n\
    }\n\
  },\n\
\n\
  noteAddedVariable: function(v /*c.AbstractVariable*/, subject /*c.AbstractVariable*/) {\n\
    // if (c.trace) console.log(\"c.Tableau::noteAddedVariable:\", v, subject);\n\
    if (subject) {\n\
      this.insertColVar(v, subject);\n\
    }\n\
  },\n\
\n\
  getInternalInfo: function() {\n\
    var retstr = \"Tableau Information:\\n\
\";\n\
    retstr += \"Rows: \" + this.rows.size;\n\
    retstr += \" (= \" + (this.rows.size - 1) + \" constraints)\";\n\
    retstr += \"\\n\
Columns: \" + this.columns.size;\n\
    retstr += \"\\n\
Infeasible Rows: \" + this._infeasibleRows.size;\n\
    retstr += \"\\n\
External basic variables: \" + this._externalRows.size;\n\
    retstr += \"\\n\
External parametric variables: \";\n\
    retstr += this._externalParametricVars.size;\n\
    retstr += \"\\n\
\";\n\
    return retstr;\n\
  },\n\
\n\
  toString: function() {\n\
    var bstr = \"Tableau:\\n\
\";\n\
    this.rows.each(function(clv, expr) {\n\
      bstr += clv;\n\
      bstr += \" <==> \";\n\
      bstr += expr;\n\
      bstr += \"\\n\
\";\n\
    });\n\
    bstr += \"\\n\
Columns:\\n\
\";\n\
    bstr += this.columns;\n\
    bstr += \"\\n\
Infeasible rows: \";\n\
    bstr += this._infeasibleRows;\n\
    bstr += \"External basic variables: \";\n\
    bstr += this._externalRows;\n\
    bstr += \"External parametric variables: \";\n\
    bstr += this._externalParametricVars;\n\
    return bstr;\n\
  },\n\
\n\
  /*\n\
  toJSON: function() {\n\
    // Creates an object representation of the Tableau.\n\
  },\n\
  */\n\
\n\
  // Convenience function to insert a variable into\n\
  // the set of rows stored at columns[param_var],\n\
  // creating a new set if needed\n\
  insertColVar: function(param_var /*c.Variable*/,\n\
                         rowvar /*c.Variable*/) {\n\
    var rowset = /* Set */ this.columns.get(param_var);\n\
    if (!rowset) {\n\
      rowset = new c.HashSet();\n\
      this.columns.set(param_var, rowset);\n\
    }\n\
    rowset.add(rowvar);\n\
  },\n\
\n\
  addRow: function(aVar /*c.AbstractVariable*/,\n\
                   expr /*c.Expression*/) {\n\
    if (c.trace) c.fnenterprint(\"addRow: \" + aVar + \", \" + expr);\n\
    this.rows.set(aVar, expr);\n\
    expr.terms.each(function(clv, coeff) {\n\
      this.insertColVar(clv, aVar);\n\
      if (clv.isExternal) {\n\
        this._externalParametricVars.add(clv);\n\
      }\n\
    }, this);\n\
    if (aVar.isExternal) {\n\
      this._externalRows.add(aVar);\n\
    }\n\
    if (c.trace) c.traceprint(this.toString());\n\
  },\n\
\n\
  removeColumn: function(aVar /*c.AbstractVariable*/) {\n\
    if (c.trace) c.fnenterprint(\"removeColumn:\" + aVar);\n\
    var rows = /* Set */ this.columns.get(aVar);\n\
    if (rows) {\n\
      this.columns.delete(aVar);\n\
      rows.each(function(clv) {\n\
        var expr = /* c.Expression */this.rows.get(clv);\n\
        expr.terms.delete(aVar);\n\
      }, this);\n\
    } else {\n\
      if (c.trace) console.log(\"Could not find var\", aVar, \"in columns\");\n\
    }\n\
    if (aVar.isExternal) {\n\
      this._externalRows.delete(aVar);\n\
      this._externalParametricVars.delete(aVar);\n\
    }\n\
  },\n\
\n\
  removeRow: function(aVar /*c.AbstractVariable*/) {\n\
    if (c.trace) c.fnenterprint(\"removeRow:\" + aVar);\n\
    var expr = /* c.Expression */this.rows.get(aVar);\n\
    c.assert(expr != null);\n\
    expr.terms.each(function(clv, coeff) {\n\
      var varset = this.columns.get(clv);\n\
      if (varset != null) {\n\
        if (c.trace) console.log(\"removing from varset:\", aVar);\n\
        varset.delete(aVar);\n\
      }\n\
    }, this);\n\
    this._infeasibleRows.delete(aVar);\n\
    if (aVar.isExternal) {\n\
      this._externalRows.delete(aVar);\n\
    }\n\
    this.rows.delete(aVar);\n\
    if (c.trace) c.fnexitprint(\"returning \" + expr);\n\
    return expr;\n\
  },\n\
\n\
  substituteOut: function(oldVar /*c.AbstractVariable*/,\n\
                          expr /*c.Expression*/) {\n\
    if (c.trace) c.fnenterprint(\"substituteOut:\" + oldVar + \", \" + expr);\n\
    if (c.trace) c.traceprint(this.toString());\n\
\n\
    var varset = this.columns.get(oldVar);\n\
    varset.each(function(v) {\n\
      var row = this.rows.get(v);\n\
      row.substituteOut(oldVar, expr, v, this);\n\
      if (v.isRestricted && row.constant < 0) {\n\
        this._infeasibleRows.add(v);\n\
      }\n\
    }, this);\n\
\n\
    if (oldVar.isExternal) {\n\
      this._externalRows.add(oldVar);\n\
      this._externalParametricVars.delete(oldVar);\n\
    }\n\
\n\
    this.columns.delete(oldVar);\n\
  },\n\
\n\
  columnsHasKey: function(subject /*c.AbstractVariable*/) {\n\
    return !!this.columns.get(subject);\n\
  },\n\
});\n\
\n\
})(this[\"c\"]||module.parent.exports||{});\n\
//@ sourceURL=slightlyoff-cassowary.js/src/Tableau.js"
));
require.register("slightlyoff-cassowary.js/src/SimplexSolver.js", Function("exports, require, module",
"// Copyright (C) 1998-2000 Greg J. Badros\n\
// Use of this source code is governed by http://www.apache.org/licenses/LICENSE-2.0\n\
//\n\
// Parts Copyright (C) 2011, Alex Russell (slightlyoff@chromium.org)\n\
\n\
(function(c) {\n\
var t = c.Tableau;\n\
var tp = t.prototype;\n\
var epsilon = 1e-8;\n\
var weak = c.Strength.weak;\n\
\n\
c.SimplexSolver = c.inherit({\n\
  extends: c.Tableau,\n\
  initialize: function(){\n\
\n\
    c.Tableau.call(this);\n\
    this._stayMinusErrorVars = [];\n\
    this._stayPlusErrorVars = [];\n\
\n\
    this._errorVars = new c.HashTable(); // cn -> Set of cv\n\
\n\
    this._markerVars = new c.HashTable(); // cn -> Set of cv\n\
\n\
    // this._resolve_pair = [0, 0];\n\
    this._objective = new c.ObjectiveVariable({ name: \"Z\" });\n\
\n\
    this._editVarMap = new c.HashTable(); // cv -> c.EditInfo\n\
    this._editVarList = [];\n\
\n\
    this._slackCounter = 0;\n\
    this._artificialCounter = 0;\n\
    this._dummyCounter = 0;\n\
    this.autoSolve = true;\n\
    this._needsSolving = false;\n\
\n\
    this._optimizeCount = 0;\n\
\n\
    this.rows.set(this._objective, c.Expression.empty());\n\
    this._editVariableStack = [0]; // Stack\n\
    if (c.trace)\n\
      c.traceprint(\"objective expr == \" + this.rows.get(this._objective));\n\
  },\n\
\n\
  add: function(/*c.Constraint, ...*/) {\n\
    for (var x = 0; x < arguments.length; x++) {\n\
      this.addConstraint(arguments[x]);\n\
    }\n\
    return this;\n\
  },\n\
\n\
  _addEditConstraint: function(cn, eplus_eminus, prevEConstant) {\n\
      var i = this._editVarMap.size;\n\
      var cvEplus = /* c.SlackVariable */eplus_eminus[0];\n\
      var cvEminus = /* c.SlackVariable */eplus_eminus[1];\n\
      /*\n\
      if (!cvEplus instanceof c.SlackVariable) {\n\
        console.warn(\"cvEplus not a slack variable =\", cvEplus);\n\
      }\n\
      if (!cvEminus instanceof c.SlackVariable) {\n\
        console.warn(\"cvEminus not a slack variable =\", cvEminus);\n\
      }\n\
      c.debug && console.log(\"new c.EditInfo(\" + cn + \", \" + cvEplus + \", \" +\n\
                                  cvEminus + \", \" + prevEConstant + \", \" +\n\
                                  i +\")\");\n\
      */\n\
      var ei = new c.EditInfo(cn, cvEplus, cvEminus, prevEConstant, i)\n\
      this._editVarMap.set(cn.variable, ei);\n\
      this._editVarList[i] = { v: cn.variable, info: ei };\n\
  },\n\
\n\
  addConstraint: function(cn /*c.Constraint*/) {\n\
    c.trace && c.fnenterprint(\"addConstraint: \" + cn);\n\
    var eplus_eminus = new Array(2);\n\
    var prevEConstant = new Array(1); // so it can be output to\n\
    var expr = this.newExpression(cn, /*output to*/ eplus_eminus, prevEConstant);\n\
    prevEConstant = prevEConstant[0];\n\
\n\
    if (!this.tryAddingDirectly(expr)) {\n\
      this.addWithArtificialVariable(expr);\n\
    }\n\
\n\
\n\
    this._needsSolving = true;\n\
    if (cn.isEditConstraint) {\n\
      this._addEditConstraint(cn, eplus_eminus, prevEConstant);\n\
    }\n\
    if (this.autoSolve) {\n\
      this.optimize(this._objective);\n\
      this._setExternalVariables();\n\
    }\n\
    return this;\n\
  },\n\
\n\
  addConstraintNoException: function(cn /*c.Constraint*/) {\n\
    c.trace && c.fnenterprint(\"addConstraintNoException: \" + cn);\n\
    // FIXME(slightlyoff): change this to enable chaining\n\
    try {\n\
      this.addConstraint(cn);\n\
      return true;\n\
    } catch (e /*c.RequiredFailure*/){\n\
      return false;\n\
    }\n\
  },\n\
\n\
  addEditVar: function(v /*c.Variable*/, strength /*c.Strength*/, weight /*double*/) {\n\
    c.trace && c.fnenterprint(\"addEditVar: \" + v + \" @ \" + strength + \" {\" + weight + \"}\");\n\
    return this.addConstraint(\n\
        new c.EditConstraint(v, strength || c.Strength.strong, weight));\n\
  },\n\
\n\
  beginEdit: function() {\n\
    // FIXME(slightlyoff): we shouldn't throw here. Log instead\n\
    c.assert(this._editVarMap.size > 0, \"_editVarMap.size > 0\");\n\
    this._infeasibleRows.clear();\n\
    this._resetStayConstants();\n\
    this._editVariableStack.push(this._editVarMap.size);\n\
    return this;\n\
  },\n\
\n\
  endEdit: function() {\n\
    // FIXME(slightlyoff): we shouldn't throw here. Log instead\n\
    c.assert(this._editVarMap.size > 0, \"_editVarMap.size > 0\");\n\
    this.resolve();\n\
    this._editVariableStack.pop();\n\
    this.removeEditVarsTo(\n\
      this._editVariableStack[this._editVariableStack.length - 1]\n\
    );\n\
    return this;\n\
  },\n\
\n\
  removeAllEditVars: function() {\n\
    return this.removeEditVarsTo(0);\n\
  },\n\
\n\
  removeEditVarsTo: function(n /*int*/) {\n\
    try {\n\
      var evll = this._editVarList.length;\n\
      // only remove the variable if it's not in the set of variable\n\
      // from a previous nested outer edit\n\
      // e.g., if I do:\n\
      // Edit x,y\n\
      // Edit w,h,x,y\n\
      // EndEdit\n\
      // The end edit needs to only get rid of the edits on w,h\n\
      // not the ones on x,y\n\
      for(var x = n; x < evll; x++) {\n\
        if (this._editVarList[x]) {\n\
          this.removeConstraint(\n\
            this._editVarMap.get(this._editVarList[x].v).constraint\n\
          );\n\
        }\n\
      }\n\
      this._editVarList.length = n;\n\
      c.assert(this._editVarMap.size == n, \"_editVarMap.size == n\");\n\
      return this;\n\
    } catch (e /*ConstraintNotFound*/){\n\
      throw new c.InternalError(\"Constraint not found in removeEditVarsTo\");\n\
    }\n\
  },\n\
\n\
  // Add weak stays to the x and y parts of each point. These have\n\
  // increasing weights so that the solver will try to satisfy the x\n\
  // and y stays on the same point, rather than the x stay on one and\n\
  // the y stay on another.\n\
  addPointStays: function(points /*[{ x: .., y: ..}, ...]*/) {\n\
    c.trace && console.log(\"addPointStays\", points);\n\
    points.forEach(function(p, idx) {\n\
      this.addStay(p.x, weak, Math.pow(2, idx));\n\
      this.addStay(p.y, weak, Math.pow(2, idx));\n\
    }, this);\n\
    return this;\n\
  },\n\
\n\
  addStay: function(v /*c.Variable*/, strength /*c.Strength*/, weight /*double*/) {\n\
    var cn = new c.StayConstraint(v,\n\
                                  strength || weak,\n\
                                  weight   || 1);\n\
    return this.addConstraint(cn);\n\
  },\n\
\n\
  // FIXME(slightlyoff): add a removeStay\n\
\n\
  removeConstraint: function(cn /*c.Constraint*/) {\n\
    // console.log(\"removeConstraint('\", cn, \"')\");\n\
    c.trace && c.fnenterprint(\"removeConstraintInternal: \" + cn);\n\
    c.trace && c.traceprint(this.toString());\n\
    this._needsSolving = true;\n\
    this._resetStayConstants();\n\
    var zRow = this.rows.get(this._objective);\n\
    var eVars = /* Set */this._errorVars.get(cn);\n\
    c.trace && c.traceprint(\"eVars == \" + eVars);\n\
    if (eVars != null) {\n\
      eVars.each(function(cv) {\n\
        var expr = this.rows.get(cv);\n\
        if (expr == null) {\n\
          zRow.addVariable(cv,\n\
                           -cn.weight * cn.strength.symbolicWeight.value,\n\
                           this._objective,\n\
                           this);\n\
        } else {\n\
          zRow.addExpression(expr,\n\
                             -cn.weight * cn.strength.symbolicWeight.value,\n\
                             this._objective,\n\
                             this);\n\
        }\n\
        c.trace && c.traceprint(\"now eVars == \" + eVars);\n\
      }, this);\n\
    }\n\
    var marker = this._markerVars.get(cn);\n\
    this._markerVars.delete(cn);\n\
    if (marker == null) {\n\
      throw new c.InternalError(\"Constraint not found in removeConstraintInternal\");\n\
    }\n\
    c.trace && c.traceprint(\"Looking to remove var \" + marker);\n\
    if (this.rows.get(marker) == null) {\n\
      var col = this.columns.get(marker);\n\
      // console.log(\"col is:\", col, \"from marker:\", marker);\n\
      c.trace && c.traceprint(\"Must pivot -- columns are \" + col);\n\
      var exitVar = null;\n\
      var minRatio = 0;\n\
      col.each(function(v) {\n\
        if (v.isRestricted) {\n\
          var expr = this.rows.get(v);\n\
          var coeff = expr.coefficientFor(marker);\n\
          c.trace && c.traceprint(\"Marker \" + marker + \"'s coefficient in \" + expr + \" is \" + coeff);\n\
          if (coeff < 0) {\n\
            var r = -expr.constant / coeff;\n\
            if (\n\
              exitVar == null ||\n\
              r < minRatio    ||\n\
              (c.approx(r, minRatio) && v.hashCode < exitVar.hashCode)\n\
            ) {\n\
              minRatio = r;\n\
              exitVar = v;\n\
            }\n\
          }\n\
        }\n\
      }, this);\n\
      if (exitVar == null) {\n\
        c.trace && c.traceprint(\"exitVar is still null\");\n\
        col.each(function(v) {\n\
          if (v.isRestricted) {\n\
            var expr = this.rows.get(v);\n\
            var coeff = expr.coefficientFor(marker);\n\
            var r = expr.constant / coeff;\n\
            if (exitVar == null || r < minRatio) {\n\
              minRatio = r;\n\
              exitVar = v;\n\
            }\n\
          }\n\
        }, this);\n\
      }\n\
      if (exitVar == null) {\n\
        if (col.size == 0) {\n\
          this.removeColumn(marker);\n\
        } else {\n\
          col.escapingEach(function(v) {\n\
            if (v != this._objective) {\n\
              exitVar = v;\n\
              return { brk: true };\n\
            }\n\
          }, this);\n\
        }\n\
      }\n\
      if (exitVar != null) {\n\
        this.pivot(marker, exitVar);\n\
      }\n\
    }\n\
    if (this.rows.get(marker) != null) {\n\
      var expr = this.removeRow(marker);\n\
    }\n\
\n\
    if (eVars != null) {\n\
      eVars.each(function(v) {\n\
        if (v != marker) { this.removeColumn(v); }\n\
      }, this);\n\
    }\n\
\n\
    if (cn.isStayConstraint) {\n\
      if (eVars != null) {\n\
        for (var i = 0; i < this._stayPlusErrorVars.length; i++) {\n\
          eVars.delete(this._stayPlusErrorVars[i]);\n\
          eVars.delete(this._stayMinusErrorVars[i]);\n\
        }\n\
      }\n\
    } else if (cn.isEditConstraint) {\n\
      c.assert(eVars != null, \"eVars != null\");\n\
      var cei = this._editVarMap.get(cn.variable);\n\
      this.removeColumn(cei.editMinus);\n\
      this._editVarMap.delete(cn.variable);\n\
    }\n\
\n\
    if (eVars != null) {\n\
      this._errorVars.delete(eVars);\n\
    }\n\
\n\
    if (this.autoSolve) {\n\
      this.optimize(this._objective);\n\
      this._setExternalVariables();\n\
    }\n\
\n\
    return this;\n\
  },\n\
\n\
  reset: function() {\n\
    c.trace && c.fnenterprint(\"reset\");\n\
    throw new c.InternalError(\"reset not implemented\");\n\
  },\n\
\n\
  resolveArray: function(newEditConstants) {\n\
    c.trace && c.fnenterprint(\"resolveArray\" + newEditConstants);\n\
    var l = newEditConstants.length\n\
    this._editVarMap.each(function(v, cei) {\n\
      var i = cei.index;\n\
      if (i < l)\n\
        this.suggestValue(v, newEditConstants[i]);\n\
    }, this);\n\
    this.resolve();\n\
  },\n\
\n\
  resolvePair: function(x /*double*/, y /*double*/) {\n\
    this.suggestValue(this._editVarList[0].v, x);\n\
    this.suggestValue(this._editVarList[1].v, y);\n\
    this.resolve();\n\
  },\n\
\n\
  resolve: function() {\n\
    c.trace && c.fnenterprint(\"resolve()\");\n\
    this.dualOptimize();\n\
    this._setExternalVariables();\n\
    this._infeasibleRows.clear();\n\
    this._resetStayConstants();\n\
  },\n\
\n\
  suggestValue: function(v /*c.Variable*/, x /*double*/) {\n\
    c.trace && console.log(\"suggestValue(\" + v + \", \" + x + \")\");\n\
    var cei = this._editVarMap.get(v);\n\
    if (!cei) {\n\
      throw new c.Error(\"suggestValue for variable \" + v + \", but var is not an edit variable\");\n\
    }\n\
    var delta = x - cei.prevEditConstant;\n\
    cei.prevEditConstant = x;\n\
    this.deltaEditConstant(delta, cei.editPlus, cei.editMinus);\n\
    return this;\n\
  },\n\
\n\
  solve: function() {\n\
    if (this._needsSolving) {\n\
      this.optimize(this._objective);\n\
      this._setExternalVariables();\n\
    }\n\
    return this;\n\
  },\n\
\n\
  setEditedValue: function(v /*c.Variable*/, n /*double*/) {\n\
    if (!(this.columnsHasKey(v) || (this.rows.get(v) != null))) {\n\
      v.value = n;\n\
      return this;\n\
    }\n\
\n\
    if (!c.approx(n, v.value)) {\n\
      this.addEditVar(v);\n\
      this.beginEdit();\n\
\n\
      try {\n\
        this.suggestValue(v, n);\n\
      } catch (e) {\n\
        throw new c.InternalError(\"Error in setEditedValue\");\n\
      }\n\
\n\
      this.endEdit();\n\
    }\n\
    return this;\n\
  },\n\
\n\
  addVar: function(v /*c.Variable*/) {\n\
    if (!(this.columnsHasKey(v) || (this.rows.get(v) != null))) {\n\
      try {\n\
        this.addStay(v);\n\
      } catch (e /*c.RequiredFailure*/){\n\
        throw new c.InternalError(\"Error in addVar -- required failure is impossible\");\n\
      }\n\
\n\
      c.trace && c.traceprint(\"added initial stay on \" + v);\n\
    }\n\
    return this;\n\
  },\n\
\n\
  getInternalInfo: function() {\n\
    var retstr = tp.getInternalInfo.call(this);\n\
    retstr += \"\\n\
Solver info:\\n\
\";\n\
    retstr += \"Stay Error Variables: \";\n\
    retstr += this._stayPlusErrorVars.length + this._stayMinusErrorVars.length;\n\
    retstr += \" (\" + this._stayPlusErrorVars.length + \" +, \";\n\
    retstr += this._stayMinusErrorVars.length + \" -)\\n\
\";\n\
    retstr += \"Edit Variables: \" + this._editVarMap.size;\n\
    retstr += \"\\n\
\";\n\
    return retstr;\n\
  },\n\
\n\
  getDebugInfo: function() {\n\
    return this.toString() + this.getInternalInfo() + \"\\n\
\";\n\
  },\n\
\n\
  toString: function() {\n\
    var bstr = tp.getInternalInfo.call(this);\n\
    bstr += \"\\n\
_stayPlusErrorVars: \";\n\
    bstr += '[' + this._stayPlusErrorVars + ']';\n\
    bstr += \"\\n\
_stayMinusErrorVars: \";\n\
    bstr += '[' + this._stayMinusErrorVars + ']';\n\
    bstr += \"\\n\
\";\n\
    bstr += \"_editVarMap:\\n\
\" + this._editVarMap;\n\
    bstr += \"\\n\
\";\n\
    return bstr;\n\
  },\n\
\n\
  addWithArtificialVariable: function(expr /*c.Expression*/) {\n\
    c.trace && c.fnenterprint(\"addWithArtificialVariable: \" + expr);\n\
    var av = new c.SlackVariable({\n\
      value: ++this._artificialCounter,\n\
      prefix: \"a\"\n\
    });\n\
    var az = new c.ObjectiveVariable({ name: \"az\" });\n\
    var azRow = /* c.Expression */expr.clone();\n\
    c.trace && c.traceprint(\"before addRows:\\n\
\" + this);\n\
    this.addRow(az, azRow);\n\
    this.addRow(av, expr);\n\
    c.trace && c.traceprint(\"after addRows:\\n\
\" + this);\n\
    this.optimize(az);\n\
    var azTableauRow = this.rows.get(az);\n\
    c.trace && c.traceprint(\"azTableauRow.constant == \" + azTableauRow.constant);\n\
    if (!c.approx(azTableauRow.constant, 0)) {\n\
      this.removeRow(az);\n\
      this.removeColumn(av);\n\
      throw new c.RequiredFailure();\n\
    }\n\
    var e = this.rows.get(av);\n\
    if (e != null) {\n\
      if (e.isConstant) {\n\
        this.removeRow(av);\n\
        this.removeRow(az);\n\
        return;\n\
      }\n\
      var entryVar = e.anyPivotableVariable();\n\
      this.pivot(entryVar, av);\n\
    }\n\
    c.assert(this.rows.get(av) == null, \"rowExpression(av) == null\");\n\
    this.removeColumn(av);\n\
    this.removeRow(az);\n\
  },\n\
\n\
  tryAddingDirectly: function(expr /*c.Expression*/) {\n\
    c.trace && c.fnenterprint(\"tryAddingDirectly: \" + expr);\n\
    var subject = this.chooseSubject(expr);\n\
    if (subject == null) {\n\
      c.trace && c.fnexitprint(\"returning false\");\n\
      return false;\n\
    }\n\
    expr.newSubject(subject);\n\
    if (this.columnsHasKey(subject)) {\n\
      this.substituteOut(subject, expr);\n\
    }\n\
    this.addRow(subject, expr);\n\
    c.trace && c.fnexitprint(\"returning true\");\n\
    return true;\n\
  },\n\
\n\
  chooseSubject: function(expr /*c.Expression*/) {\n\
    c.trace && c.fnenterprint(\"chooseSubject: \" + expr);\n\
    var subject = null;\n\
    var foundUnrestricted = false;\n\
    var foundNewRestricted = false;\n\
    var terms = expr.terms;\n\
    var rv = terms.escapingEach(function(v, c) {\n\
      if (foundUnrestricted) {\n\
        if (!v.isRestricted) {\n\
          if (!this.columnsHasKey(v)) {\n\
            return { retval: v };\n\
          }\n\
        }\n\
      } else {\n\
        if (v.isRestricted) {\n\
          if (!foundNewRestricted && !v.isDummy && c < 0) {\n\
            var col = this.columns.get(v);\n\
            if (col == null ||\n\
                (col.size == 1 && this.columnsHasKey(this._objective))\n\
            ) {\n\
              subject = v;\n\
              foundNewRestricted = true;\n\
            }\n\
          }\n\
        } else {\n\
          subject = v;\n\
          foundUnrestricted = true;\n\
        }\n\
      }\n\
    }, this);\n\
    if (rv && rv.retval !== undefined) {\n\
      return rv.retval;\n\
    }\n\
\n\
    if (subject != null) {\n\
      return subject;\n\
    }\n\
\n\
    var coeff = 0;\n\
\n\
    // subject is nil.\n\
    // Make one last check -- if all of the variables in expr are dummy\n\
    // variables, then we can pick a dummy variable as the subject\n\
    var rv = terms.escapingEach(function(v,c) {\n\
      if (!v.isDummy)  {\n\
        return {retval:null};\n\
      }\n\
      if (!this.columnsHasKey(v)) {\n\
        subject = v;\n\
        coeff = c;\n\
      }\n\
    }, this);\n\
    if (rv && rv.retval !== undefined) return rv.retval;\n\
\n\
    if (!c.approx(expr.constant, 0)) {\n\
      throw new c.RequiredFailure();\n\
    }\n\
    if (coeff > 0) {\n\
      expr.multiplyMe(-1);\n\
    }\n\
    return subject;\n\
  },\n\
\n\
  deltaEditConstant: function(delta /*double*/,\n\
                              plusErrorVar /*c.AbstractVariable*/,\n\
                              minusErrorVar /*c.AbstractVariable*/) {\n\
    if (c.trace)\n\
      c.fnenterprint(\"deltaEditConstant :\" + delta + \", \" + plusErrorVar + \", \" + minusErrorVar);\n\
\n\
    var exprPlus = this.rows.get(plusErrorVar);\n\
    if (exprPlus != null) {\n\
      exprPlus.constant += delta;\n\
      if (exprPlus.constant < 0) {\n\
        this._infeasibleRows.add(plusErrorVar);\n\
      }\n\
      return;\n\
    }\n\
    var exprMinus = this.rows.get(minusErrorVar);\n\
    if (exprMinus != null) {\n\
      exprMinus.constant += -delta;\n\
      if (exprMinus.constant < 0) {\n\
        this._infeasibleRows.add(minusErrorVar);\n\
      }\n\
      return;\n\
    }\n\
    var columnVars = this.columns.get(minusErrorVar);\n\
    if (!columnVars) {\n\
      console.log(\"columnVars is null -- tableau is:\\n\
\" + this);\n\
    }\n\
    columnVars.each(function(basicVar) {\n\
      var expr = this.rows.get(basicVar);\n\
      var c = expr.coefficientFor(minusErrorVar);\n\
      expr.constant += (c * delta);\n\
      if (basicVar.isRestricted && expr.constant < 0) {\n\
        this._infeasibleRows.add(basicVar);\n\
      }\n\
    }, this);\n\
  },\n\
\n\
  // We have set new values for the constants in the edit constraints.\n\
  // Re-Optimize using the dual simplex algorithm.\n\
  dualOptimize: function() {\n\
    c.trace && c.fnenterprint(\"dualOptimize:\");\n\
    var zRow = this.rows.get(this._objective);\n\
    // need to handle infeasible rows\n\
    while (this._infeasibleRows.size) {\n\
      var exitVar = this._infeasibleRows.values()[0];\n\
      this._infeasibleRows.delete(exitVar);\n\
      var entryVar = null;\n\
      var expr = this.rows.get(exitVar);\n\
      // exitVar might have become basic after some other pivoting\n\
      // so allow for the case of its not being there any longer\n\
      if (expr) {\n\
        if (expr.constant < 0) {\n\
          var ratio = Number.MAX_VALUE;\n\
          var r;\n\
          var terms = expr.terms;\n\
          terms.each(function(v, cd) {\n\
            if (cd > 0 && v.isPivotable) {\n\
              var zc = zRow.coefficientFor(v);\n\
              r = zc / cd;\n\
              if (r < ratio ||\n\
                  (c.approx(r, ratio) && v.hashCode < entryVar.hashCode)\n\
              ) {\n\
                entryVar = v;\n\
                ratio = r;\n\
              }\n\
            }\n\
          });\n\
          if (ratio == Number.MAX_VALUE) {\n\
            throw new c.InternalError(\"ratio == nil (MAX_VALUE) in dualOptimize\");\n\
          }\n\
          this.pivot(entryVar, exitVar);\n\
        }\n\
      }\n\
    }\n\
  },\n\
\n\
  // Make a new linear Expression representing the constraint cn,\n\
  // replacing any basic variables with their defining expressions.\n\
  // Normalize if necessary so that the Constant is non-negative.  If\n\
  // the constraint is non-required give its error variables an\n\
  // appropriate weight in the objective function.\n\
  newExpression: function(cn /*c.Constraint*/,\n\
                          /** outputs to **/ eplus_eminus /*Array*/,\n\
                          prevEConstant) {\n\
    if (c.trace) {\n\
      c.fnenterprint(\"newExpression: \" + cn);\n\
      c.traceprint(\"cn.isInequality == \" + cn.isInequality);\n\
      c.traceprint(\"cn.required == \" + cn.required);\n\
    }\n\
\n\
    var cnExpr = cn.expression;\n\
    var expr = c.Expression.fromConstant(cnExpr.constant);\n\
    var slackVar = new c.SlackVariable();\n\
    var dummyVar = new c.DummyVariable();\n\
    var eminus = new c.SlackVariable();\n\
    var eplus = new c.SlackVariable();\n\
    var cnTerms = cnExpr.terms;\n\
    // console.log(cnTerms.size);\n\
\n\
    cnTerms.each(function(v, c) {\n\
      var e = this.rows.get(v);\n\
      if (!e) {\n\
        expr.addVariable(v, c);\n\
      } else {\n\
        expr.addExpression(e, c);\n\
      }\n\
    }, this);\n\
\n\
    if (cn.isInequality) {\n\
      // cn is an inequality, so Add a slack variable. The original constraint\n\
      // is expr>=0, so that the resulting equality is expr-slackVar=0. If cn is\n\
      // also non-required Add a negative error variable, giving:\n\
      //\n\
      //    expr - slackVar = -errorVar\n\
      //\n\
      // in other words:\n\
      //\n\
      //    expr - slackVar + errorVar = 0\n\
      //\n\
      // Since both of these variables are newly created we can just Add\n\
      // them to the Expression (they can't be basic).\n\
      c.trace && c.traceprint(\"Inequality, adding slack\");\n\
      ++this._slackCounter;\n\
      slackVar = new c.SlackVariable({\n\
        value: this._slackCounter,\n\
        prefix: \"s\"\n\
      });\n\
      expr.setVariable(slackVar, -1);\n\
\n\
      this._markerVars.set(cn, slackVar);\n\
      if (!cn.required) {\n\
        ++this._slackCounter;\n\
        eminus = new c.SlackVariable({\n\
          value: this._slackCounter,\n\
          prefix: \"em\"\n\
        });\n\
        expr.setVariable(eminus, 1);\n\
        var zRow = this.rows.get(this._objective);\n\
        zRow.setVariable(eminus, cn.strength.symbolicWeight.value * cn.weight);\n\
        this.insertErrorVar(cn, eminus);\n\
        this.noteAddedVariable(eminus, this._objective);\n\
      }\n\
    } else {\n\
      if (cn.required) {\n\
        c.trace && c.traceprint(\"Equality, required\");\n\
        // Add a dummy variable to the Expression to serve as a marker for this\n\
        // constraint.  The dummy variable is never allowed to enter the basis\n\
        // when pivoting.\n\
        ++this._dummyCounter;\n\
        dummyVar = new c.DummyVariable({\n\
          value: this._dummyCounter,\n\
          prefix: \"d\"\n\
        });\n\
        eplus_eminus[0] = dummyVar;\n\
        eplus_eminus[1] = dummyVar;\n\
        prevEConstant[0] = cnExpr.constant;\n\
        expr.setVariable(dummyVar, 1);\n\
        this._markerVars.set(cn, dummyVar);\n\
        c.trace && c.traceprint(\"Adding dummyVar == d\" + this._dummyCounter);\n\
      } else {\n\
\n\
        // cn is a non-required equality. Add a positive and a negative error\n\
        // variable, making the resulting constraint\n\
        //       expr = eplus - eminus\n\
        // in other words:\n\
        //       expr - eplus + eminus = 0\n\
        c.trace && c.traceprint(\"Equality, not required\");\n\
        ++this._slackCounter;\n\
        eplus = new c.SlackVariable({\n\
          value: this._slackCounter,\n\
          prefix: \"ep\"\n\
        });\n\
        eminus = new c.SlackVariable({\n\
          value: this._slackCounter,\n\
          prefix: \"em\"\n\
        });\n\
        expr.setVariable(eplus, -1);\n\
        expr.setVariable(eminus, 1);\n\
        this._markerVars.set(cn, eplus);\n\
        var zRow = this.rows.get(this._objective);\n\
        c.trace && console.log(zRow);\n\
        var swCoeff = cn.strength.symbolicWeight.value * cn.weight;\n\
        if (swCoeff == 0) {\n\
          c.trace && c.traceprint(\"cn == \" + cn);\n\
          c.trace && c.traceprint(\"adding \" + eplus + \" and \" + eminus + \" with swCoeff == \" + swCoeff);\n\
        }\n\
        zRow.setVariable(eplus, swCoeff);\n\
        this.noteAddedVariable(eplus, this._objective);\n\
        zRow.setVariable(eminus, swCoeff);\n\
        this.noteAddedVariable(eminus, this._objective);\n\
\n\
        this.insertErrorVar(cn, eminus);\n\
        this.insertErrorVar(cn, eplus);\n\
\n\
        if (cn.isStayConstraint) {\n\
          this._stayPlusErrorVars.push(eplus);\n\
          this._stayMinusErrorVars.push(eminus);\n\
        } else if (cn.isEditConstraint) {\n\
          eplus_eminus[0] = eplus;\n\
          eplus_eminus[1] = eminus;\n\
          prevEConstant[0] = cnExpr.constant;\n\
        }\n\
      }\n\
    }\n\
    // the Constant in the Expression should be non-negative. If necessary\n\
    // normalize the Expression by multiplying by -1\n\
    if (expr.constant < 0) expr.multiplyMe(-1);\n\
    c.trace && c.fnexitprint(\"returning \" + expr);\n\
    return expr;\n\
  },\n\
\n\
  // Minimize the value of the objective.  (The tableau should already be\n\
  // feasible.)\n\
  optimize: function(zVar /*c.ObjectiveVariable*/) {\n\
    c.trace && c.fnenterprint(\"optimize: \" + zVar);\n\
    c.trace && c.traceprint(this.toString());\n\
    this._optimizeCount++;\n\
\n\
    var zRow = this.rows.get(zVar);\n\
    c.assert(zRow != null, \"zRow != null\");\n\
    var entryVar = null;\n\
    var exitVar = null;\n\
    var objectiveCoeff, terms;\n\
\n\
    while (true) {\n\
      objectiveCoeff = 0;\n\
      terms = zRow.terms;\n\
\n\
      // Find the most negative coefficient in the objective function (ignoring\n\
      // the non-pivotable dummy variables). If all coefficients are positive\n\
      // we're done\n\
      terms.escapingEach(function(v, c) {\n\
        if (v.isPivotable && c < objectiveCoeff) {\n\
          objectiveCoeff = c;\n\
          entryVar = v;\n\
          // Break on success\n\
          return { brk: 1 };\n\
        }\n\
      }, this);\n\
\n\
      if (objectiveCoeff >= -epsilon)\n\
        return;\n\
\n\
      c.trace && console.log(\"entryVar:\", entryVar,\n\
                             \"objectiveCoeff:\", objectiveCoeff);\n\
\n\
      // choose which variable to move out of the basis\n\
      // Only consider pivotable basic variables\n\
      // (i.e. restricted, non-dummy variables)\n\
      var minRatio = Number.MAX_VALUE;\n\
      var columnVars = this.columns.get(entryVar);\n\
      var r = 0;\n\
\n\
      columnVars.each(function(v) {\n\
        c.trace && c.traceprint(\"Checking \" + v);\n\
        if (v.isPivotable) {\n\
          var expr = this.rows.get(v);\n\
          var coeff = expr.coefficientFor(entryVar);\n\
          c.trace && c.traceprint(\"pivotable, coeff = \" + coeff);\n\
          // only consider negative coefficients\n\
          if (coeff < 0) {\n\
            r = -expr.constant / coeff;\n\
            // Bland's anti-cycling rule:\n\
            // if multiple variables are about the same,\n\
            // always pick the lowest via some total\n\
            // ordering -- I use their addresses in memory\n\
            //    if (r < minRatio ||\n\
            //              (c.approx(r, minRatio) &&\n\
            //               v.get_pclv() < exitVar.get_pclv()))\n\
            if (r < minRatio ||\n\
                (c.approx(r, minRatio) &&\n\
                 v.hashCode < exitVar.hashCode)\n\
            ) {\n\
              minRatio = r;\n\
              exitVar = v;\n\
            }\n\
          }\n\
        }\n\
      }, this);\n\
\n\
      // If minRatio is still nil at this point, it means that the\n\
      // objective function is unbounded, i.e. it can become\n\
      // arbitrarily negative.  This should never happen in this\n\
      // application.\n\
      if (minRatio == Number.MAX_VALUE) {\n\
        throw new c.InternalError(\"Objective function is unbounded in optimize\");\n\
      }\n\
\n\
      // console.time(\"SimplexSolver::optimize pivot()\");\n\
      this.pivot(entryVar, exitVar);\n\
      // console.timeEnd(\"SimplexSolver::optimize pivot()\");\n\
\n\
      c.trace && c.traceprint(this.toString());\n\
    }\n\
  },\n\
\n\
  // Do a Pivot.  Move entryVar into the basis (i.e. make it a basic variable),\n\
  // and move exitVar out of the basis (i.e., make it a parametric variable)\n\
  pivot: function(entryVar /*c.AbstractVariable*/, exitVar /*c.AbstractVariable*/) {\n\
    c.trace && console.log(\"pivot: \", entryVar, exitVar);\n\
    var time = false;\n\
\n\
    time && console.time(\" SimplexSolver::pivot\");\n\
\n\
    // the entryVar might be non-pivotable if we're doing a RemoveConstraint --\n\
    // otherwise it should be a pivotable variable -- enforced at call sites,\n\
    // hopefully\n\
    if (entryVar == null) {\n\
      console.warn(\"pivot: entryVar == null\");\n\
    }\n\
\n\
    if (exitVar == null) {\n\
      console.warn(\"pivot: exitVar == null\");\n\
    }\n\
    // console.log(\"SimplexSolver::pivot(\", entryVar, exitVar, \")\")\n\
\n\
    // expr is the Expression for the exit variable (about to leave the basis) --\n\
    // so that the old tableau includes the equation:\n\
    //   exitVar = expr\n\
    time && console.time(\"  removeRow\");\n\
    var expr = this.removeRow(exitVar);\n\
    time && console.timeEnd(\"  removeRow\");\n\
\n\
    // Compute an Expression for the entry variable.  Since expr has\n\
    // been deleted from the tableau we can destructively modify it to\n\
    // build this Expression.\n\
    time && console.time(\"  changeSubject\");\n\
    expr.changeSubject(exitVar, entryVar);\n\
    time && console.timeEnd(\"  changeSubject\");\n\
\n\
    time && console.time(\"  substituteOut\");\n\
    this.substituteOut(entryVar, expr);\n\
    time && console.timeEnd(\"  substituteOut\");\n\
    /*\n\
    if (entryVar.isExternal) {\n\
      // entry var is no longer a parametric variable since we're moving\n\
      // it into the basis\n\
      console.log(\"entryVar is external!\");\n\
      this._externalParametricVars.delete(entryVar);\n\
    }\n\
    */\n\
\n\
    time && console.time(\"  addRow\")\n\
    this.addRow(entryVar, expr);\n\
    time && console.timeEnd(\"  addRow\")\n\
\n\
    time && console.timeEnd(\" SimplexSolver::pivot\");\n\
  },\n\
\n\
  // Each of the non-required stays will be represented by an equation\n\
  // of the form\n\
  //     v = c + eplus - eminus\n\
  // where v is the variable with the stay, c is the previous value of\n\
  // v, and eplus and eminus are slack variables that hold the error\n\
  // in satisfying the stay constraint.  We are about to change\n\
  // something, and we want to fix the constants in the equations\n\
  // representing the stays.  If both eplus and eminus are nonbasic\n\
  // they have value 0 in the current solution, meaning the previous\n\
  // stay was exactly satisfied.  In this case nothing needs to be\n\
  // changed.  Otherwise one of them is basic, and the other must\n\
  // occur only in the Expression for that basic error variable.\n\
  // Reset the Constant in this Expression to 0.\n\
  _resetStayConstants: function() {\n\
    c.trace && console.log(\"_resetStayConstants\");\n\
    var spev = this._stayPlusErrorVars;\n\
    var l = spev.length;\n\
    for (var i = 0; i < l; i++) {\n\
      var expr = this.rows.get(spev[i]);\n\
      if (expr === null) {\n\
        expr = this.rows.get(this._stayMinusErrorVars[i]);\n\
      }\n\
      if (expr != null) {\n\
        expr.constant = 0;\n\
      }\n\
    }\n\
  },\n\
\n\
  _setExternalVariables: function() {\n\
    c.trace && c.fnenterprint(\"_setExternalVariables:\");\n\
    c.trace && c.traceprint(this.toString());\n\
    var changed = {};\n\
\n\
    // console.log(\"this._externalParametricVars:\", this._externalParametricVars);\n\
    this._externalParametricVars.each(function(v) {\n\
      if (this.rows.get(v) != null) {\n\
        if (c.trace)\n\
          console.log(\"Error: variable\" + v + \" in _externalParametricVars is basic\");\n\
      } else {\n\
        v.value = 0;\n\
        changed[v.name] = 0;\n\
      }\n\
    }, this);\n\
    // console.log(\"this._externalRows:\", this._externalRows);\n\
    this._externalRows.each(function(v) {\n\
      var expr = this.rows.get(v);\n\
      if (v.value != expr.constant) {\n\
        // console.log(v.toString(), v.value, expr.constant);\n\
        v.value = expr.constant;\n\
        changed[v.name] = expr.constant;\n\
      }\n\
      // c.trace && console.log(\"v == \" + v);\n\
      // c.trace && console.log(\"expr == \" + expr);\n\
    }, this);\n\
    this._changed = changed;\n\
    this._needsSolving = false;\n\
    this._informCallbacks();\n\
    this.onsolved();\n\
  },\n\
\n\
  onsolved: function() {\n\
    // Lifecycle stub. Here for dirty, dirty monkey patching.\n\
  },\n\
\n\
  _informCallbacks: function() {\n\
    if(!this._callbacks) return;\n\
\n\
    var changed = this._changed;\n\
    this._callbacks.forEach(function(fn) {\n\
      fn(changed);\n\
    });\n\
  },\n\
\n\
  _addCallback: function(fn) {\n\
    (this._callbacks || (this._callbacks = [])).push(fn);\n\
  },\n\
\n\
  insertErrorVar: function(cn /*c.Constraint*/, aVar /*c.AbstractVariable*/) {\n\
    c.trace && c.fnenterprint(\"insertErrorVar:\" + cn + \", \" + aVar);\n\
    var constraintSet = /* Set */this._errorVars.get(aVar);\n\
    if (!constraintSet) {\n\
      constraintSet = new c.HashSet();\n\
      this._errorVars.set(cn, constraintSet);\n\
    }\n\
    constraintSet.add(aVar);\n\
  },\n\
});\n\
})(this[\"c\"]||module.parent.exports||{});\n\
//@ sourceURL=slightlyoff-cassowary.js/src/SimplexSolver.js"
));
require.register("slightlyoff-cassowary.js/src/Timer.js", Function("exports, require, module",
"// Copyright (C) 1998-2000 Greg J. Badros\n\
// Use of this source code is governed by http://www.apache.org/licenses/LICENSE-2.0\n\
//\n\
// Parts Copyright (C) 2011, Alex Russell (slightlyoff@chromium.org)\n\
\n\
(function(c) {\n\
\"use strict\";\n\
\n\
c.Timer = c.inherit({\n\
  initialize: function() {\n\
    this.isRunning = false;\n\
    this._elapsedMs = 0;\n\
  },\n\
\n\
  start: function() {\n\
    this.isRunning = true;\n\
    this._startReading = new Date();\n\
    return this;\n\
  },\n\
\n\
  stop: function() {\n\
    this.isRunning = false;\n\
    this._elapsedMs += (new Date()) - this._startReading;\n\
    return this;\n\
  },\n\
\n\
  reset: function() {\n\
    this.isRunning = false;\n\
    this._elapsedMs = 0;\n\
    return this;\n\
  },\n\
\n\
  elapsedTime : function() {\n\
    if (!this.isRunning) {\n\
      return this._elapsedMs / 1000;\n\
    } else {\n\
      return (this._elapsedMs + (new Date() - this._startReading)) / 1000;\n\
    }\n\
  },\n\
});\n\
\n\
})(this[\"c\"]||module.parent.exports||{});\n\
//@ sourceURL=slightlyoff-cassowary.js/src/Timer.js"
));
require.register("slightlyoff-cassowary.js/src/parser/parser.js", Function("exports, require, module",
"this.c.parser = (function(){\n\
  /*\n\
   * Generated by PEG.js 0.7.0.\n\
   *\n\
   * http://pegjs.majda.cz/\n\
   */\n\
  \n\
  function quote(s) {\n\
    /*\n\
     * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a\n\
     * string literal except for the closing quote character, backslash,\n\
     * carriage return, line separator, paragraph separator, and line feed.\n\
     * Any character may appear in the form of an escape sequence.\n\
     *\n\
     * For portability, we also escape escape all control and non-ASCII\n\
     * characters. Note that \"\\0\" and \"\\v\" escape sequences are not used\n\
     * because JSHint does not like the first and IE the second.\n\
     */\n\
     return '\"' + s\n\
      .replace(/\\\\/g, '\\\\\\\\')  // backslash\n\
      .replace(/\"/g, '\\\\\"')    // closing quote character\n\
      .replace(/\\x08/g, '\\\\b') // backspace\n\
      .replace(/\\t/g, '\\\\t')   // horizontal tab\n\
      .replace(/\\n\
/g, '\\\\n\
')   // line feed\n\
      .replace(/\\f/g, '\\\\f')   // form feed\n\
      .replace(/\\r/g, '\\\\r')   // carriage return\n\
      .replace(/[\\x00-\\x07\\x0B\\x0E-\\x1F\\x80-\\uFFFF]/g, escape)\n\
      + '\"';\n\
  }\n\
  \n\
  var result = {\n\
    /*\n\
     * Parses the input with a generated parser. If the parsing is successfull,\n\
     * returns a value explicitly or implicitly specified by the grammar from\n\
     * which the parser was generated (see |PEG.buildParser|). If the parsing is\n\
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.\n\
     */\n\
    parse: function(input, startRule) {\n\
      var parseFunctions = {\n\
        \"start\": parse_start,\n\
        \"Statement\": parse_Statement,\n\
        \"SourceCharacter\": parse_SourceCharacter,\n\
        \"IdentifierStart\": parse_IdentifierStart,\n\
        \"WhiteSpace\": parse_WhiteSpace,\n\
        \"LineTerminator\": parse_LineTerminator,\n\
        \"LineTerminatorSequence\": parse_LineTerminatorSequence,\n\
        \"EOS\": parse_EOS,\n\
        \"EOF\": parse_EOF,\n\
        \"Comment\": parse_Comment,\n\
        \"MultiLineComment\": parse_MultiLineComment,\n\
        \"MultiLineCommentNoLineTerminator\": parse_MultiLineCommentNoLineTerminator,\n\
        \"SingleLineComment\": parse_SingleLineComment,\n\
        \"_\": parse__,\n\
        \"__\": parse___,\n\
        \"Literal\": parse_Literal,\n\
        \"Integer\": parse_Integer,\n\
        \"Real\": parse_Real,\n\
        \"SignedInteger\": parse_SignedInteger,\n\
        \"Identifier\": parse_Identifier,\n\
        \"IdentifierName\": parse_IdentifierName,\n\
        \"PrimaryExpression\": parse_PrimaryExpression,\n\
        \"UnaryExpression\": parse_UnaryExpression,\n\
        \"UnaryOperator\": parse_UnaryOperator,\n\
        \"MultiplicativeExpression\": parse_MultiplicativeExpression,\n\
        \"MultiplicativeOperator\": parse_MultiplicativeOperator,\n\
        \"AdditiveExpression\": parse_AdditiveExpression,\n\
        \"AdditiveOperator\": parse_AdditiveOperator,\n\
        \"InequalityExpression\": parse_InequalityExpression,\n\
        \"InequalityOperator\": parse_InequalityOperator,\n\
        \"LinearExpression\": parse_LinearExpression\n\
      };\n\
      \n\
      if (startRule !== undefined) {\n\
        if (parseFunctions[startRule] === undefined) {\n\
          throw new Error(\"Invalid rule name: \" + quote(startRule) + \".\");\n\
        }\n\
      } else {\n\
        startRule = \"start\";\n\
      }\n\
      \n\
      var pos = 0;\n\
      var reportFailures = 0;\n\
      var rightmostFailuresPos = 0;\n\
      var rightmostFailuresExpected = [];\n\
      \n\
      function padLeft(input, padding, length) {\n\
        var result = input;\n\
        \n\
        var padLength = length - input.length;\n\
        for (var i = 0; i < padLength; i++) {\n\
          result = padding + result;\n\
        }\n\
        \n\
        return result;\n\
      }\n\
      \n\
      function escape(ch) {\n\
        var charCode = ch.charCodeAt(0);\n\
        var escapeChar;\n\
        var length;\n\
        \n\
        if (charCode <= 0xFF) {\n\
          escapeChar = 'x';\n\
          length = 2;\n\
        } else {\n\
          escapeChar = 'u';\n\
          length = 4;\n\
        }\n\
        \n\
        return '\\\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);\n\
      }\n\
      \n\
      function matchFailed(failure) {\n\
        if (pos < rightmostFailuresPos) {\n\
          return;\n\
        }\n\
        \n\
        if (pos > rightmostFailuresPos) {\n\
          rightmostFailuresPos = pos;\n\
          rightmostFailuresExpected = [];\n\
        }\n\
        \n\
        rightmostFailuresExpected.push(failure);\n\
      }\n\
      \n\
      function parse_start() {\n\
        var result0, result1, result2;\n\
        var pos0, pos1;\n\
        \n\
        pos0 = pos;\n\
        pos1 = pos;\n\
        result0 = parse___();\n\
        if (result0 !== null) {\n\
          result1 = [];\n\
          result2 = parse_Statement();\n\
          while (result2 !== null) {\n\
            result1.push(result2);\n\
            result2 = parse_Statement();\n\
          }\n\
          if (result1 !== null) {\n\
            result2 = parse___();\n\
            if (result2 !== null) {\n\
              result0 = [result0, result1, result2];\n\
            } else {\n\
              result0 = null;\n\
              pos = pos1;\n\
            }\n\
          } else {\n\
            result0 = null;\n\
            pos = pos1;\n\
          }\n\
        } else {\n\
          result0 = null;\n\
          pos = pos1;\n\
        }\n\
        if (result0 !== null) {\n\
          result0 = (function(offset, statements) { return statements; })(pos0, result0[1]);\n\
        }\n\
        if (result0 === null) {\n\
          pos = pos0;\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_Statement() {\n\
        var result0, result1;\n\
        var pos0, pos1;\n\
        \n\
        pos0 = pos;\n\
        pos1 = pos;\n\
        result0 = parse_LinearExpression();\n\
        if (result0 !== null) {\n\
          result1 = parse_EOS();\n\
          if (result1 !== null) {\n\
            result0 = [result0, result1];\n\
          } else {\n\
            result0 = null;\n\
            pos = pos1;\n\
          }\n\
        } else {\n\
          result0 = null;\n\
          pos = pos1;\n\
        }\n\
        if (result0 !== null) {\n\
          result0 = (function(offset, expression) { return expression; })(pos0, result0[0]);\n\
        }\n\
        if (result0 === null) {\n\
          pos = pos0;\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_SourceCharacter() {\n\
        var result0;\n\
        \n\
        if (input.length > pos) {\n\
          result0 = input.charAt(pos);\n\
          pos++;\n\
        } else {\n\
          result0 = null;\n\
          if (reportFailures === 0) {\n\
            matchFailed(\"any character\");\n\
          }\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_IdentifierStart() {\n\
        var result0;\n\
        \n\
        if (/^[a-zA-Z]/.test(input.charAt(pos))) {\n\
          result0 = input.charAt(pos);\n\
          pos++;\n\
        } else {\n\
          result0 = null;\n\
          if (reportFailures === 0) {\n\
            matchFailed(\"[a-zA-Z]\");\n\
          }\n\
        }\n\
        if (result0 === null) {\n\
          if (input.charCodeAt(pos) === 36) {\n\
            result0 = \"$\";\n\
            pos++;\n\
          } else {\n\
            result0 = null;\n\
            if (reportFailures === 0) {\n\
              matchFailed(\"\\\"$\\\"\");\n\
            }\n\
          }\n\
          if (result0 === null) {\n\
            if (input.charCodeAt(pos) === 95) {\n\
              result0 = \"_\";\n\
              pos++;\n\
            } else {\n\
              result0 = null;\n\
              if (reportFailures === 0) {\n\
                matchFailed(\"\\\"_\\\"\");\n\
              }\n\
            }\n\
          }\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_WhiteSpace() {\n\
        var result0;\n\
        \n\
        reportFailures++;\n\
        if (/^[\\t\\x0B\\f \\xA0\\uFEFF]/.test(input.charAt(pos))) {\n\
          result0 = input.charAt(pos);\n\
          pos++;\n\
        } else {\n\
          result0 = null;\n\
          if (reportFailures === 0) {\n\
            matchFailed(\"[\\\\t\\\\x0B\\\\f \\\\xA0\\\\uFEFF]\");\n\
          }\n\
        }\n\
        reportFailures--;\n\
        if (reportFailures === 0 && result0 === null) {\n\
          matchFailed(\"whitespace\");\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_LineTerminator() {\n\
        var result0;\n\
        \n\
        if (/^[\\n\
\\r\\u2028\\u2029]/.test(input.charAt(pos))) {\n\
          result0 = input.charAt(pos);\n\
          pos++;\n\
        } else {\n\
          result0 = null;\n\
          if (reportFailures === 0) {\n\
            matchFailed(\"[\\\\n\
\\\\r\\\\u2028\\\\u2029]\");\n\
          }\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_LineTerminatorSequence() {\n\
        var result0;\n\
        \n\
        reportFailures++;\n\
        if (input.charCodeAt(pos) === 10) {\n\
          result0 = \"\\n\
\";\n\
          pos++;\n\
        } else {\n\
          result0 = null;\n\
          if (reportFailures === 0) {\n\
            matchFailed(\"\\\"\\\\n\
\\\"\");\n\
          }\n\
        }\n\
        if (result0 === null) {\n\
          if (input.substr(pos, 2) === \"\\r\\n\
\") {\n\
            result0 = \"\\r\\n\
\";\n\
            pos += 2;\n\
          } else {\n\
            result0 = null;\n\
            if (reportFailures === 0) {\n\
              matchFailed(\"\\\"\\\\r\\\\n\
\\\"\");\n\
            }\n\
          }\n\
          if (result0 === null) {\n\
            if (input.charCodeAt(pos) === 13) {\n\
              result0 = \"\\r\";\n\
              pos++;\n\
            } else {\n\
              result0 = null;\n\
              if (reportFailures === 0) {\n\
                matchFailed(\"\\\"\\\\r\\\"\");\n\
              }\n\
            }\n\
            if (result0 === null) {\n\
              if (input.charCodeAt(pos) === 8232) {\n\
                result0 = \"\\u2028\";\n\
                pos++;\n\
              } else {\n\
                result0 = null;\n\
                if (reportFailures === 0) {\n\
                  matchFailed(\"\\\"\\\\u2028\\\"\");\n\
                }\n\
              }\n\
              if (result0 === null) {\n\
                if (input.charCodeAt(pos) === 8233) {\n\
                  result0 = \"\\u2029\";\n\
                  pos++;\n\
                } else {\n\
                  result0 = null;\n\
                  if (reportFailures === 0) {\n\
                    matchFailed(\"\\\"\\\\u2029\\\"\");\n\
                  }\n\
                }\n\
              }\n\
            }\n\
          }\n\
        }\n\
        reportFailures--;\n\
        if (reportFailures === 0 && result0 === null) {\n\
          matchFailed(\"end of line\");\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_EOS() {\n\
        var result0, result1;\n\
        var pos0;\n\
        \n\
        pos0 = pos;\n\
        result0 = parse___();\n\
        if (result0 !== null) {\n\
          if (input.charCodeAt(pos) === 59) {\n\
            result1 = \";\";\n\
            pos++;\n\
          } else {\n\
            result1 = null;\n\
            if (reportFailures === 0) {\n\
              matchFailed(\"\\\";\\\"\");\n\
            }\n\
          }\n\
          if (result1 !== null) {\n\
            result0 = [result0, result1];\n\
          } else {\n\
            result0 = null;\n\
            pos = pos0;\n\
          }\n\
        } else {\n\
          result0 = null;\n\
          pos = pos0;\n\
        }\n\
        if (result0 === null) {\n\
          pos0 = pos;\n\
          result0 = parse__();\n\
          if (result0 !== null) {\n\
            result1 = parse_LineTerminatorSequence();\n\
            if (result1 !== null) {\n\
              result0 = [result0, result1];\n\
            } else {\n\
              result0 = null;\n\
              pos = pos0;\n\
            }\n\
          } else {\n\
            result0 = null;\n\
            pos = pos0;\n\
          }\n\
          if (result0 === null) {\n\
            pos0 = pos;\n\
            result0 = parse___();\n\
            if (result0 !== null) {\n\
              result1 = parse_EOF();\n\
              if (result1 !== null) {\n\
                result0 = [result0, result1];\n\
              } else {\n\
                result0 = null;\n\
                pos = pos0;\n\
              }\n\
            } else {\n\
              result0 = null;\n\
              pos = pos0;\n\
            }\n\
          }\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_EOF() {\n\
        var result0;\n\
        var pos0;\n\
        \n\
        pos0 = pos;\n\
        reportFailures++;\n\
        if (input.length > pos) {\n\
          result0 = input.charAt(pos);\n\
          pos++;\n\
        } else {\n\
          result0 = null;\n\
          if (reportFailures === 0) {\n\
            matchFailed(\"any character\");\n\
          }\n\
        }\n\
        reportFailures--;\n\
        if (result0 === null) {\n\
          result0 = \"\";\n\
        } else {\n\
          result0 = null;\n\
          pos = pos0;\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_Comment() {\n\
        var result0;\n\
        \n\
        reportFailures++;\n\
        result0 = parse_MultiLineComment();\n\
        if (result0 === null) {\n\
          result0 = parse_SingleLineComment();\n\
        }\n\
        reportFailures--;\n\
        if (reportFailures === 0 && result0 === null) {\n\
          matchFailed(\"comment\");\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_MultiLineComment() {\n\
        var result0, result1, result2, result3;\n\
        var pos0, pos1, pos2;\n\
        \n\
        pos0 = pos;\n\
        if (input.substr(pos, 2) === \"/*\") {\n\
          result0 = \"/*\";\n\
          pos += 2;\n\
        } else {\n\
          result0 = null;\n\
          if (reportFailures === 0) {\n\
            matchFailed(\"\\\"/*\\\"\");\n\
          }\n\
        }\n\
        if (result0 !== null) {\n\
          result1 = [];\n\
          pos1 = pos;\n\
          pos2 = pos;\n\
          reportFailures++;\n\
          if (input.substr(pos, 2) === \"*/\") {\n\
            result2 = \"*/\";\n\
            pos += 2;\n\
          } else {\n\
            result2 = null;\n\
            if (reportFailures === 0) {\n\
              matchFailed(\"\\\"*/\\\"\");\n\
            }\n\
          }\n\
          reportFailures--;\n\
          if (result2 === null) {\n\
            result2 = \"\";\n\
          } else {\n\
            result2 = null;\n\
            pos = pos2;\n\
          }\n\
          if (result2 !== null) {\n\
            result3 = parse_SourceCharacter();\n\
            if (result3 !== null) {\n\
              result2 = [result2, result3];\n\
            } else {\n\
              result2 = null;\n\
              pos = pos1;\n\
            }\n\
          } else {\n\
            result2 = null;\n\
            pos = pos1;\n\
          }\n\
          while (result2 !== null) {\n\
            result1.push(result2);\n\
            pos1 = pos;\n\
            pos2 = pos;\n\
            reportFailures++;\n\
            if (input.substr(pos, 2) === \"*/\") {\n\
              result2 = \"*/\";\n\
              pos += 2;\n\
            } else {\n\
              result2 = null;\n\
              if (reportFailures === 0) {\n\
                matchFailed(\"\\\"*/\\\"\");\n\
              }\n\
            }\n\
            reportFailures--;\n\
            if (result2 === null) {\n\
              result2 = \"\";\n\
            } else {\n\
              result2 = null;\n\
              pos = pos2;\n\
            }\n\
            if (result2 !== null) {\n\
              result3 = parse_SourceCharacter();\n\
              if (result3 !== null) {\n\
                result2 = [result2, result3];\n\
              } else {\n\
                result2 = null;\n\
                pos = pos1;\n\
              }\n\
            } else {\n\
              result2 = null;\n\
              pos = pos1;\n\
            }\n\
          }\n\
          if (result1 !== null) {\n\
            if (input.substr(pos, 2) === \"*/\") {\n\
              result2 = \"*/\";\n\
              pos += 2;\n\
            } else {\n\
              result2 = null;\n\
              if (reportFailures === 0) {\n\
                matchFailed(\"\\\"*/\\\"\");\n\
              }\n\
            }\n\
            if (result2 !== null) {\n\
              result0 = [result0, result1, result2];\n\
            } else {\n\
              result0 = null;\n\
              pos = pos0;\n\
            }\n\
          } else {\n\
            result0 = null;\n\
            pos = pos0;\n\
          }\n\
        } else {\n\
          result0 = null;\n\
          pos = pos0;\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_MultiLineCommentNoLineTerminator() {\n\
        var result0, result1, result2, result3;\n\
        var pos0, pos1, pos2;\n\
        \n\
        pos0 = pos;\n\
        if (input.substr(pos, 2) === \"/*\") {\n\
          result0 = \"/*\";\n\
          pos += 2;\n\
        } else {\n\
          result0 = null;\n\
          if (reportFailures === 0) {\n\
            matchFailed(\"\\\"/*\\\"\");\n\
          }\n\
        }\n\
        if (result0 !== null) {\n\
          result1 = [];\n\
          pos1 = pos;\n\
          pos2 = pos;\n\
          reportFailures++;\n\
          if (input.substr(pos, 2) === \"*/\") {\n\
            result2 = \"*/\";\n\
            pos += 2;\n\
          } else {\n\
            result2 = null;\n\
            if (reportFailures === 0) {\n\
              matchFailed(\"\\\"*/\\\"\");\n\
            }\n\
          }\n\
          if (result2 === null) {\n\
            result2 = parse_LineTerminator();\n\
          }\n\
          reportFailures--;\n\
          if (result2 === null) {\n\
            result2 = \"\";\n\
          } else {\n\
            result2 = null;\n\
            pos = pos2;\n\
          }\n\
          if (result2 !== null) {\n\
            result3 = parse_SourceCharacter();\n\
            if (result3 !== null) {\n\
              result2 = [result2, result3];\n\
            } else {\n\
              result2 = null;\n\
              pos = pos1;\n\
            }\n\
          } else {\n\
            result2 = null;\n\
            pos = pos1;\n\
          }\n\
          while (result2 !== null) {\n\
            result1.push(result2);\n\
            pos1 = pos;\n\
            pos2 = pos;\n\
            reportFailures++;\n\
            if (input.substr(pos, 2) === \"*/\") {\n\
              result2 = \"*/\";\n\
              pos += 2;\n\
            } else {\n\
              result2 = null;\n\
              if (reportFailures === 0) {\n\
                matchFailed(\"\\\"*/\\\"\");\n\
              }\n\
            }\n\
            if (result2 === null) {\n\
              result2 = parse_LineTerminator();\n\
            }\n\
            reportFailures--;\n\
            if (result2 === null) {\n\
              result2 = \"\";\n\
            } else {\n\
              result2 = null;\n\
              pos = pos2;\n\
            }\n\
            if (result2 !== null) {\n\
              result3 = parse_SourceCharacter();\n\
              if (result3 !== null) {\n\
                result2 = [result2, result3];\n\
              } else {\n\
                result2 = null;\n\
                pos = pos1;\n\
              }\n\
            } else {\n\
              result2 = null;\n\
              pos = pos1;\n\
            }\n\
          }\n\
          if (result1 !== null) {\n\
            if (input.substr(pos, 2) === \"*/\") {\n\
              result2 = \"*/\";\n\
              pos += 2;\n\
            } else {\n\
              result2 = null;\n\
              if (reportFailures === 0) {\n\
                matchFailed(\"\\\"*/\\\"\");\n\
              }\n\
            }\n\
            if (result2 !== null) {\n\
              result0 = [result0, result1, result2];\n\
            } else {\n\
              result0 = null;\n\
              pos = pos0;\n\
            }\n\
          } else {\n\
            result0 = null;\n\
            pos = pos0;\n\
          }\n\
        } else {\n\
          result0 = null;\n\
          pos = pos0;\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_SingleLineComment() {\n\
        var result0, result1, result2, result3;\n\
        var pos0, pos1, pos2;\n\
        \n\
        pos0 = pos;\n\
        if (input.substr(pos, 2) === \"//\") {\n\
          result0 = \"//\";\n\
          pos += 2;\n\
        } else {\n\
          result0 = null;\n\
          if (reportFailures === 0) {\n\
            matchFailed(\"\\\"//\\\"\");\n\
          }\n\
        }\n\
        if (result0 !== null) {\n\
          result1 = [];\n\
          pos1 = pos;\n\
          pos2 = pos;\n\
          reportFailures++;\n\
          result2 = parse_LineTerminator();\n\
          reportFailures--;\n\
          if (result2 === null) {\n\
            result2 = \"\";\n\
          } else {\n\
            result2 = null;\n\
            pos = pos2;\n\
          }\n\
          if (result2 !== null) {\n\
            result3 = parse_SourceCharacter();\n\
            if (result3 !== null) {\n\
              result2 = [result2, result3];\n\
            } else {\n\
              result2 = null;\n\
              pos = pos1;\n\
            }\n\
          } else {\n\
            result2 = null;\n\
            pos = pos1;\n\
          }\n\
          while (result2 !== null) {\n\
            result1.push(result2);\n\
            pos1 = pos;\n\
            pos2 = pos;\n\
            reportFailures++;\n\
            result2 = parse_LineTerminator();\n\
            reportFailures--;\n\
            if (result2 === null) {\n\
              result2 = \"\";\n\
            } else {\n\
              result2 = null;\n\
              pos = pos2;\n\
            }\n\
            if (result2 !== null) {\n\
              result3 = parse_SourceCharacter();\n\
              if (result3 !== null) {\n\
                result2 = [result2, result3];\n\
              } else {\n\
                result2 = null;\n\
                pos = pos1;\n\
              }\n\
            } else {\n\
              result2 = null;\n\
              pos = pos1;\n\
            }\n\
          }\n\
          if (result1 !== null) {\n\
            result2 = parse_LineTerminator();\n\
            if (result2 === null) {\n\
              result2 = parse_EOF();\n\
            }\n\
            if (result2 !== null) {\n\
              result0 = [result0, result1, result2];\n\
            } else {\n\
              result0 = null;\n\
              pos = pos0;\n\
            }\n\
          } else {\n\
            result0 = null;\n\
            pos = pos0;\n\
          }\n\
        } else {\n\
          result0 = null;\n\
          pos = pos0;\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse__() {\n\
        var result0, result1;\n\
        \n\
        result0 = [];\n\
        result1 = parse_WhiteSpace();\n\
        if (result1 === null) {\n\
          result1 = parse_MultiLineCommentNoLineTerminator();\n\
          if (result1 === null) {\n\
            result1 = parse_SingleLineComment();\n\
          }\n\
        }\n\
        while (result1 !== null) {\n\
          result0.push(result1);\n\
          result1 = parse_WhiteSpace();\n\
          if (result1 === null) {\n\
            result1 = parse_MultiLineCommentNoLineTerminator();\n\
            if (result1 === null) {\n\
              result1 = parse_SingleLineComment();\n\
            }\n\
          }\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse___() {\n\
        var result0, result1;\n\
        \n\
        result0 = [];\n\
        result1 = parse_WhiteSpace();\n\
        if (result1 === null) {\n\
          result1 = parse_LineTerminatorSequence();\n\
          if (result1 === null) {\n\
            result1 = parse_Comment();\n\
          }\n\
        }\n\
        while (result1 !== null) {\n\
          result0.push(result1);\n\
          result1 = parse_WhiteSpace();\n\
          if (result1 === null) {\n\
            result1 = parse_LineTerminatorSequence();\n\
            if (result1 === null) {\n\
              result1 = parse_Comment();\n\
            }\n\
          }\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_Literal() {\n\
        var result0;\n\
        var pos0;\n\
        \n\
        pos0 = pos;\n\
        result0 = parse_Real();\n\
        if (result0 === null) {\n\
          result0 = parse_Integer();\n\
        }\n\
        if (result0 !== null) {\n\
          result0 = (function(offset, val) {\n\
            return {\n\
              type: \"NumericLiteral\",\n\
              value: val\n\
            }\n\
          })(pos0, result0);\n\
        }\n\
        if (result0 === null) {\n\
          pos = pos0;\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_Integer() {\n\
        var result0, result1;\n\
        var pos0;\n\
        \n\
        pos0 = pos;\n\
        if (/^[0-9]/.test(input.charAt(pos))) {\n\
          result1 = input.charAt(pos);\n\
          pos++;\n\
        } else {\n\
          result1 = null;\n\
          if (reportFailures === 0) {\n\
            matchFailed(\"[0-9]\");\n\
          }\n\
        }\n\
        if (result1 !== null) {\n\
          result0 = [];\n\
          while (result1 !== null) {\n\
            result0.push(result1);\n\
            if (/^[0-9]/.test(input.charAt(pos))) {\n\
              result1 = input.charAt(pos);\n\
              pos++;\n\
            } else {\n\
              result1 = null;\n\
              if (reportFailures === 0) {\n\
                matchFailed(\"[0-9]\");\n\
              }\n\
            }\n\
          }\n\
        } else {\n\
          result0 = null;\n\
        }\n\
        if (result0 !== null) {\n\
          result0 = (function(offset, digits) {\n\
            return parseInt(digits.join(\"\"));\n\
          })(pos0, result0);\n\
        }\n\
        if (result0 === null) {\n\
          pos = pos0;\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_Real() {\n\
        var result0, result1, result2;\n\
        var pos0, pos1;\n\
        \n\
        pos0 = pos;\n\
        pos1 = pos;\n\
        result0 = parse_Integer();\n\
        if (result0 !== null) {\n\
          if (input.charCodeAt(pos) === 46) {\n\
            result1 = \".\";\n\
            pos++;\n\
          } else {\n\
            result1 = null;\n\
            if (reportFailures === 0) {\n\
              matchFailed(\"\\\".\\\"\");\n\
            }\n\
          }\n\
          if (result1 !== null) {\n\
            result2 = parse_Integer();\n\
            if (result2 !== null) {\n\
              result0 = [result0, result1, result2];\n\
            } else {\n\
              result0 = null;\n\
              pos = pos1;\n\
            }\n\
          } else {\n\
            result0 = null;\n\
            pos = pos1;\n\
          }\n\
        } else {\n\
          result0 = null;\n\
          pos = pos1;\n\
        }\n\
        if (result0 !== null) {\n\
          result0 = (function(offset, digits) {\n\
            return parseFloat(digits.join(\"\"));\n\
          })(pos0, result0);\n\
        }\n\
        if (result0 === null) {\n\
          pos = pos0;\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_SignedInteger() {\n\
        var result0, result1, result2;\n\
        var pos0;\n\
        \n\
        pos0 = pos;\n\
        if (/^[\\-+]/.test(input.charAt(pos))) {\n\
          result0 = input.charAt(pos);\n\
          pos++;\n\
        } else {\n\
          result0 = null;\n\
          if (reportFailures === 0) {\n\
            matchFailed(\"[\\\\-+]\");\n\
          }\n\
        }\n\
        result0 = result0 !== null ? result0 : \"\";\n\
        if (result0 !== null) {\n\
          if (/^[0-9]/.test(input.charAt(pos))) {\n\
            result2 = input.charAt(pos);\n\
            pos++;\n\
          } else {\n\
            result2 = null;\n\
            if (reportFailures === 0) {\n\
              matchFailed(\"[0-9]\");\n\
            }\n\
          }\n\
          if (result2 !== null) {\n\
            result1 = [];\n\
            while (result2 !== null) {\n\
              result1.push(result2);\n\
              if (/^[0-9]/.test(input.charAt(pos))) {\n\
                result2 = input.charAt(pos);\n\
                pos++;\n\
              } else {\n\
                result2 = null;\n\
                if (reportFailures === 0) {\n\
                  matchFailed(\"[0-9]\");\n\
                }\n\
              }\n\
            }\n\
          } else {\n\
            result1 = null;\n\
          }\n\
          if (result1 !== null) {\n\
            result0 = [result0, result1];\n\
          } else {\n\
            result0 = null;\n\
            pos = pos0;\n\
          }\n\
        } else {\n\
          result0 = null;\n\
          pos = pos0;\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_Identifier() {\n\
        var result0;\n\
        var pos0;\n\
        \n\
        reportFailures++;\n\
        pos0 = pos;\n\
        result0 = parse_IdentifierName();\n\
        if (result0 !== null) {\n\
          result0 = (function(offset, name) { return name; })(pos0, result0);\n\
        }\n\
        if (result0 === null) {\n\
          pos = pos0;\n\
        }\n\
        reportFailures--;\n\
        if (reportFailures === 0 && result0 === null) {\n\
          matchFailed(\"identifier\");\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_IdentifierName() {\n\
        var result0, result1, result2;\n\
        var pos0, pos1;\n\
        \n\
        reportFailures++;\n\
        pos0 = pos;\n\
        pos1 = pos;\n\
        result0 = parse_IdentifierStart();\n\
        if (result0 !== null) {\n\
          result1 = [];\n\
          result2 = parse_IdentifierStart();\n\
          while (result2 !== null) {\n\
            result1.push(result2);\n\
            result2 = parse_IdentifierStart();\n\
          }\n\
          if (result1 !== null) {\n\
            result0 = [result0, result1];\n\
          } else {\n\
            result0 = null;\n\
            pos = pos1;\n\
          }\n\
        } else {\n\
          result0 = null;\n\
          pos = pos1;\n\
        }\n\
        if (result0 !== null) {\n\
          result0 = (function(offset, start, parts) {\n\
              return start + parts.join(\"\");\n\
            })(pos0, result0[0], result0[1]);\n\
        }\n\
        if (result0 === null) {\n\
          pos = pos0;\n\
        }\n\
        reportFailures--;\n\
        if (reportFailures === 0 && result0 === null) {\n\
          matchFailed(\"identifier\");\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_PrimaryExpression() {\n\
        var result0, result1, result2, result3, result4;\n\
        var pos0, pos1;\n\
        \n\
        pos0 = pos;\n\
        result0 = parse_Identifier();\n\
        if (result0 !== null) {\n\
          result0 = (function(offset, name) { return { type: \"Variable\", name: name }; })(pos0, result0);\n\
        }\n\
        if (result0 === null) {\n\
          pos = pos0;\n\
        }\n\
        if (result0 === null) {\n\
          result0 = parse_Literal();\n\
          if (result0 === null) {\n\
            pos0 = pos;\n\
            pos1 = pos;\n\
            if (input.charCodeAt(pos) === 40) {\n\
              result0 = \"(\";\n\
              pos++;\n\
            } else {\n\
              result0 = null;\n\
              if (reportFailures === 0) {\n\
                matchFailed(\"\\\"(\\\"\");\n\
              }\n\
            }\n\
            if (result0 !== null) {\n\
              result1 = parse___();\n\
              if (result1 !== null) {\n\
                result2 = parse_LinearExpression();\n\
                if (result2 !== null) {\n\
                  result3 = parse___();\n\
                  if (result3 !== null) {\n\
                    if (input.charCodeAt(pos) === 41) {\n\
                      result4 = \")\";\n\
                      pos++;\n\
                    } else {\n\
                      result4 = null;\n\
                      if (reportFailures === 0) {\n\
                        matchFailed(\"\\\")\\\"\");\n\
                      }\n\
                    }\n\
                    if (result4 !== null) {\n\
                      result0 = [result0, result1, result2, result3, result4];\n\
                    } else {\n\
                      result0 = null;\n\
                      pos = pos1;\n\
                    }\n\
                  } else {\n\
                    result0 = null;\n\
                    pos = pos1;\n\
                  }\n\
                } else {\n\
                  result0 = null;\n\
                  pos = pos1;\n\
                }\n\
              } else {\n\
                result0 = null;\n\
                pos = pos1;\n\
              }\n\
            } else {\n\
              result0 = null;\n\
              pos = pos1;\n\
            }\n\
            if (result0 !== null) {\n\
              result0 = (function(offset, expression) { return expression; })(pos0, result0[2]);\n\
            }\n\
            if (result0 === null) {\n\
              pos = pos0;\n\
            }\n\
          }\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_UnaryExpression() {\n\
        var result0, result1, result2;\n\
        var pos0, pos1;\n\
        \n\
        result0 = parse_PrimaryExpression();\n\
        if (result0 === null) {\n\
          pos0 = pos;\n\
          pos1 = pos;\n\
          result0 = parse_UnaryOperator();\n\
          if (result0 !== null) {\n\
            result1 = parse___();\n\
            if (result1 !== null) {\n\
              result2 = parse_UnaryExpression();\n\
              if (result2 !== null) {\n\
                result0 = [result0, result1, result2];\n\
              } else {\n\
                result0 = null;\n\
                pos = pos1;\n\
              }\n\
            } else {\n\
              result0 = null;\n\
              pos = pos1;\n\
            }\n\
          } else {\n\
            result0 = null;\n\
            pos = pos1;\n\
          }\n\
          if (result0 !== null) {\n\
            result0 = (function(offset, operator, expression) {\n\
                return {\n\
                  type:       \"UnaryExpression\",\n\
                  operator:   operator,\n\
                  expression: expression\n\
                };\n\
              })(pos0, result0[0], result0[2]);\n\
          }\n\
          if (result0 === null) {\n\
            pos = pos0;\n\
          }\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_UnaryOperator() {\n\
        var result0;\n\
        \n\
        if (input.charCodeAt(pos) === 43) {\n\
          result0 = \"+\";\n\
          pos++;\n\
        } else {\n\
          result0 = null;\n\
          if (reportFailures === 0) {\n\
            matchFailed(\"\\\"+\\\"\");\n\
          }\n\
        }\n\
        if (result0 === null) {\n\
          if (input.charCodeAt(pos) === 45) {\n\
            result0 = \"-\";\n\
            pos++;\n\
          } else {\n\
            result0 = null;\n\
            if (reportFailures === 0) {\n\
              matchFailed(\"\\\"-\\\"\");\n\
            }\n\
          }\n\
          if (result0 === null) {\n\
            if (input.charCodeAt(pos) === 33) {\n\
              result0 = \"!\";\n\
              pos++;\n\
            } else {\n\
              result0 = null;\n\
              if (reportFailures === 0) {\n\
                matchFailed(\"\\\"!\\\"\");\n\
              }\n\
            }\n\
          }\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_MultiplicativeExpression() {\n\
        var result0, result1, result2, result3, result4, result5;\n\
        var pos0, pos1, pos2;\n\
        \n\
        pos0 = pos;\n\
        pos1 = pos;\n\
        result0 = parse_UnaryExpression();\n\
        if (result0 !== null) {\n\
          result1 = [];\n\
          pos2 = pos;\n\
          result2 = parse___();\n\
          if (result2 !== null) {\n\
            result3 = parse_MultiplicativeOperator();\n\
            if (result3 !== null) {\n\
              result4 = parse___();\n\
              if (result4 !== null) {\n\
                result5 = parse_UnaryExpression();\n\
                if (result5 !== null) {\n\
                  result2 = [result2, result3, result4, result5];\n\
                } else {\n\
                  result2 = null;\n\
                  pos = pos2;\n\
                }\n\
              } else {\n\
                result2 = null;\n\
                pos = pos2;\n\
              }\n\
            } else {\n\
              result2 = null;\n\
              pos = pos2;\n\
            }\n\
          } else {\n\
            result2 = null;\n\
            pos = pos2;\n\
          }\n\
          while (result2 !== null) {\n\
            result1.push(result2);\n\
            pos2 = pos;\n\
            result2 = parse___();\n\
            if (result2 !== null) {\n\
              result3 = parse_MultiplicativeOperator();\n\
              if (result3 !== null) {\n\
                result4 = parse___();\n\
                if (result4 !== null) {\n\
                  result5 = parse_UnaryExpression();\n\
                  if (result5 !== null) {\n\
                    result2 = [result2, result3, result4, result5];\n\
                  } else {\n\
                    result2 = null;\n\
                    pos = pos2;\n\
                  }\n\
                } else {\n\
                  result2 = null;\n\
                  pos = pos2;\n\
                }\n\
              } else {\n\
                result2 = null;\n\
                pos = pos2;\n\
              }\n\
            } else {\n\
              result2 = null;\n\
              pos = pos2;\n\
            }\n\
          }\n\
          if (result1 !== null) {\n\
            result0 = [result0, result1];\n\
          } else {\n\
            result0 = null;\n\
            pos = pos1;\n\
          }\n\
        } else {\n\
          result0 = null;\n\
          pos = pos1;\n\
        }\n\
        if (result0 !== null) {\n\
          result0 = (function(offset, head, tail) {\n\
              var result = head;\n\
              for (var i = 0; i < tail.length; i++) {\n\
                result = {\n\
                  type:     \"MultiplicativeExpression\",\n\
                  operator: tail[i][1],\n\
                  left:     result,\n\
                  right:    tail[i][3]\n\
                };\n\
              }\n\
              return result;\n\
            })(pos0, result0[0], result0[1]);\n\
        }\n\
        if (result0 === null) {\n\
          pos = pos0;\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_MultiplicativeOperator() {\n\
        var result0;\n\
        \n\
        if (input.charCodeAt(pos) === 42) {\n\
          result0 = \"*\";\n\
          pos++;\n\
        } else {\n\
          result0 = null;\n\
          if (reportFailures === 0) {\n\
            matchFailed(\"\\\"*\\\"\");\n\
          }\n\
        }\n\
        if (result0 === null) {\n\
          if (input.charCodeAt(pos) === 47) {\n\
            result0 = \"/\";\n\
            pos++;\n\
          } else {\n\
            result0 = null;\n\
            if (reportFailures === 0) {\n\
              matchFailed(\"\\\"/\\\"\");\n\
            }\n\
          }\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_AdditiveExpression() {\n\
        var result0, result1, result2, result3, result4, result5;\n\
        var pos0, pos1, pos2;\n\
        \n\
        pos0 = pos;\n\
        pos1 = pos;\n\
        result0 = parse_MultiplicativeExpression();\n\
        if (result0 !== null) {\n\
          result1 = [];\n\
          pos2 = pos;\n\
          result2 = parse___();\n\
          if (result2 !== null) {\n\
            result3 = parse_AdditiveOperator();\n\
            if (result3 !== null) {\n\
              result4 = parse___();\n\
              if (result4 !== null) {\n\
                result5 = parse_MultiplicativeExpression();\n\
                if (result5 !== null) {\n\
                  result2 = [result2, result3, result4, result5];\n\
                } else {\n\
                  result2 = null;\n\
                  pos = pos2;\n\
                }\n\
              } else {\n\
                result2 = null;\n\
                pos = pos2;\n\
              }\n\
            } else {\n\
              result2 = null;\n\
              pos = pos2;\n\
            }\n\
          } else {\n\
            result2 = null;\n\
            pos = pos2;\n\
          }\n\
          while (result2 !== null) {\n\
            result1.push(result2);\n\
            pos2 = pos;\n\
            result2 = parse___();\n\
            if (result2 !== null) {\n\
              result3 = parse_AdditiveOperator();\n\
              if (result3 !== null) {\n\
                result4 = parse___();\n\
                if (result4 !== null) {\n\
                  result5 = parse_MultiplicativeExpression();\n\
                  if (result5 !== null) {\n\
                    result2 = [result2, result3, result4, result5];\n\
                  } else {\n\
                    result2 = null;\n\
                    pos = pos2;\n\
                  }\n\
                } else {\n\
                  result2 = null;\n\
                  pos = pos2;\n\
                }\n\
              } else {\n\
                result2 = null;\n\
                pos = pos2;\n\
              }\n\
            } else {\n\
              result2 = null;\n\
              pos = pos2;\n\
            }\n\
          }\n\
          if (result1 !== null) {\n\
            result0 = [result0, result1];\n\
          } else {\n\
            result0 = null;\n\
            pos = pos1;\n\
          }\n\
        } else {\n\
          result0 = null;\n\
          pos = pos1;\n\
        }\n\
        if (result0 !== null) {\n\
          result0 = (function(offset, head, tail) {\n\
              var result = head;\n\
              for (var i = 0; i < tail.length; i++) {\n\
                result = {\n\
                  type:     \"AdditiveExpression\",\n\
                  operator: tail[i][1],\n\
                  left:     result,\n\
                  right:    tail[i][3]\n\
                };\n\
              }\n\
              return result;\n\
            })(pos0, result0[0], result0[1]);\n\
        }\n\
        if (result0 === null) {\n\
          pos = pos0;\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_AdditiveOperator() {\n\
        var result0;\n\
        \n\
        if (input.charCodeAt(pos) === 43) {\n\
          result0 = \"+\";\n\
          pos++;\n\
        } else {\n\
          result0 = null;\n\
          if (reportFailures === 0) {\n\
            matchFailed(\"\\\"+\\\"\");\n\
          }\n\
        }\n\
        if (result0 === null) {\n\
          if (input.charCodeAt(pos) === 45) {\n\
            result0 = \"-\";\n\
            pos++;\n\
          } else {\n\
            result0 = null;\n\
            if (reportFailures === 0) {\n\
              matchFailed(\"\\\"-\\\"\");\n\
            }\n\
          }\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_InequalityExpression() {\n\
        var result0, result1, result2, result3, result4, result5;\n\
        var pos0, pos1, pos2;\n\
        \n\
        pos0 = pos;\n\
        pos1 = pos;\n\
        result0 = parse_AdditiveExpression();\n\
        if (result0 !== null) {\n\
          result1 = [];\n\
          pos2 = pos;\n\
          result2 = parse___();\n\
          if (result2 !== null) {\n\
            result3 = parse_InequalityOperator();\n\
            if (result3 !== null) {\n\
              result4 = parse___();\n\
              if (result4 !== null) {\n\
                result5 = parse_AdditiveExpression();\n\
                if (result5 !== null) {\n\
                  result2 = [result2, result3, result4, result5];\n\
                } else {\n\
                  result2 = null;\n\
                  pos = pos2;\n\
                }\n\
              } else {\n\
                result2 = null;\n\
                pos = pos2;\n\
              }\n\
            } else {\n\
              result2 = null;\n\
              pos = pos2;\n\
            }\n\
          } else {\n\
            result2 = null;\n\
            pos = pos2;\n\
          }\n\
          while (result2 !== null) {\n\
            result1.push(result2);\n\
            pos2 = pos;\n\
            result2 = parse___();\n\
            if (result2 !== null) {\n\
              result3 = parse_InequalityOperator();\n\
              if (result3 !== null) {\n\
                result4 = parse___();\n\
                if (result4 !== null) {\n\
                  result5 = parse_AdditiveExpression();\n\
                  if (result5 !== null) {\n\
                    result2 = [result2, result3, result4, result5];\n\
                  } else {\n\
                    result2 = null;\n\
                    pos = pos2;\n\
                  }\n\
                } else {\n\
                  result2 = null;\n\
                  pos = pos2;\n\
                }\n\
              } else {\n\
                result2 = null;\n\
                pos = pos2;\n\
              }\n\
            } else {\n\
              result2 = null;\n\
              pos = pos2;\n\
            }\n\
          }\n\
          if (result1 !== null) {\n\
            result0 = [result0, result1];\n\
          } else {\n\
            result0 = null;\n\
            pos = pos1;\n\
          }\n\
        } else {\n\
          result0 = null;\n\
          pos = pos1;\n\
        }\n\
        if (result0 !== null) {\n\
          result0 = (function(offset, head, tail) {\n\
              var result = head;\n\
              for (var i = 0; i < tail.length; i++) {\n\
                result = {\n\
                  type:     \"Inequality\",\n\
                  operator: tail[i][1],\n\
                  left:     result,\n\
                  right:    tail[i][3]\n\
                };\n\
              }\n\
              return result;\n\
            })(pos0, result0[0], result0[1]);\n\
        }\n\
        if (result0 === null) {\n\
          pos = pos0;\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_InequalityOperator() {\n\
        var result0;\n\
        \n\
        if (input.substr(pos, 2) === \"<=\") {\n\
          result0 = \"<=\";\n\
          pos += 2;\n\
        } else {\n\
          result0 = null;\n\
          if (reportFailures === 0) {\n\
            matchFailed(\"\\\"<=\\\"\");\n\
          }\n\
        }\n\
        if (result0 === null) {\n\
          if (input.substr(pos, 2) === \">=\") {\n\
            result0 = \">=\";\n\
            pos += 2;\n\
          } else {\n\
            result0 = null;\n\
            if (reportFailures === 0) {\n\
              matchFailed(\"\\\">=\\\"\");\n\
            }\n\
          }\n\
          if (result0 === null) {\n\
            if (input.charCodeAt(pos) === 60) {\n\
              result0 = \"<\";\n\
              pos++;\n\
            } else {\n\
              result0 = null;\n\
              if (reportFailures === 0) {\n\
                matchFailed(\"\\\"<\\\"\");\n\
              }\n\
            }\n\
            if (result0 === null) {\n\
              if (input.charCodeAt(pos) === 62) {\n\
                result0 = \">\";\n\
                pos++;\n\
              } else {\n\
                result0 = null;\n\
                if (reportFailures === 0) {\n\
                  matchFailed(\"\\\">\\\"\");\n\
                }\n\
              }\n\
            }\n\
          }\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      function parse_LinearExpression() {\n\
        var result0, result1, result2, result3, result4, result5;\n\
        var pos0, pos1, pos2;\n\
        \n\
        pos0 = pos;\n\
        pos1 = pos;\n\
        result0 = parse_InequalityExpression();\n\
        if (result0 !== null) {\n\
          result1 = [];\n\
          pos2 = pos;\n\
          result2 = parse___();\n\
          if (result2 !== null) {\n\
            if (input.substr(pos, 2) === \"==\") {\n\
              result3 = \"==\";\n\
              pos += 2;\n\
            } else {\n\
              result3 = null;\n\
              if (reportFailures === 0) {\n\
                matchFailed(\"\\\"==\\\"\");\n\
              }\n\
            }\n\
            if (result3 !== null) {\n\
              result4 = parse___();\n\
              if (result4 !== null) {\n\
                result5 = parse_InequalityExpression();\n\
                if (result5 !== null) {\n\
                  result2 = [result2, result3, result4, result5];\n\
                } else {\n\
                  result2 = null;\n\
                  pos = pos2;\n\
                }\n\
              } else {\n\
                result2 = null;\n\
                pos = pos2;\n\
              }\n\
            } else {\n\
              result2 = null;\n\
              pos = pos2;\n\
            }\n\
          } else {\n\
            result2 = null;\n\
            pos = pos2;\n\
          }\n\
          while (result2 !== null) {\n\
            result1.push(result2);\n\
            pos2 = pos;\n\
            result2 = parse___();\n\
            if (result2 !== null) {\n\
              if (input.substr(pos, 2) === \"==\") {\n\
                result3 = \"==\";\n\
                pos += 2;\n\
              } else {\n\
                result3 = null;\n\
                if (reportFailures === 0) {\n\
                  matchFailed(\"\\\"==\\\"\");\n\
                }\n\
              }\n\
              if (result3 !== null) {\n\
                result4 = parse___();\n\
                if (result4 !== null) {\n\
                  result5 = parse_InequalityExpression();\n\
                  if (result5 !== null) {\n\
                    result2 = [result2, result3, result4, result5];\n\
                  } else {\n\
                    result2 = null;\n\
                    pos = pos2;\n\
                  }\n\
                } else {\n\
                  result2 = null;\n\
                  pos = pos2;\n\
                }\n\
              } else {\n\
                result2 = null;\n\
                pos = pos2;\n\
              }\n\
            } else {\n\
              result2 = null;\n\
              pos = pos2;\n\
            }\n\
          }\n\
          if (result1 !== null) {\n\
            result0 = [result0, result1];\n\
          } else {\n\
            result0 = null;\n\
            pos = pos1;\n\
          }\n\
        } else {\n\
          result0 = null;\n\
          pos = pos1;\n\
        }\n\
        if (result0 !== null) {\n\
          result0 = (function(offset, head, tail) {\n\
              var result = head;\n\
              for (var i = 0; i < tail.length; i++) {\n\
                result = {\n\
                  type:     \"Equality\",\n\
                  operator: tail[i][1],\n\
                  left:     result,\n\
                  right:    tail[i][3]\n\
                };\n\
              }\n\
              return result;\n\
            })(pos0, result0[0], result0[1]);\n\
        }\n\
        if (result0 === null) {\n\
          pos = pos0;\n\
        }\n\
        return result0;\n\
      }\n\
      \n\
      \n\
      function cleanupExpected(expected) {\n\
        expected.sort();\n\
        \n\
        var lastExpected = null;\n\
        var cleanExpected = [];\n\
        for (var i = 0; i < expected.length; i++) {\n\
          if (expected[i] !== lastExpected) {\n\
            cleanExpected.push(expected[i]);\n\
            lastExpected = expected[i];\n\
          }\n\
        }\n\
        return cleanExpected;\n\
      }\n\
      \n\
      function computeErrorPosition() {\n\
        /*\n\
         * The first idea was to use |String.split| to break the input up to the\n\
         * error position along newlines and derive the line and column from\n\
         * there. However IE's |split| implementation is so broken that it was\n\
         * enough to prevent it.\n\
         */\n\
        \n\
        var line = 1;\n\
        var column = 1;\n\
        var seenCR = false;\n\
        \n\
        for (var i = 0; i < Math.max(pos, rightmostFailuresPos); i++) {\n\
          var ch = input.charAt(i);\n\
          if (ch === \"\\n\
\") {\n\
            if (!seenCR) { line++; }\n\
            column = 1;\n\
            seenCR = false;\n\
          } else if (ch === \"\\r\" || ch === \"\\u2028\" || ch === \"\\u2029\") {\n\
            line++;\n\
            column = 1;\n\
            seenCR = true;\n\
          } else {\n\
            column++;\n\
            seenCR = false;\n\
          }\n\
        }\n\
        \n\
        return { line: line, column: column };\n\
      }\n\
      \n\
      \n\
      var result = parseFunctions[startRule]();\n\
      \n\
      /*\n\
       * The parser is now in one of the following three states:\n\
       *\n\
       * 1. The parser successfully parsed the whole input.\n\
       *\n\
       *    - |result !== null|\n\
       *    - |pos === input.length|\n\
       *    - |rightmostFailuresExpected| may or may not contain something\n\
       *\n\
       * 2. The parser successfully parsed only a part of the input.\n\
       *\n\
       *    - |result !== null|\n\
       *    - |pos < input.length|\n\
       *    - |rightmostFailuresExpected| may or may not contain something\n\
       *\n\
       * 3. The parser did not successfully parse any part of the input.\n\
       *\n\
       *   - |result === null|\n\
       *   - |pos === 0|\n\
       *   - |rightmostFailuresExpected| contains at least one failure\n\
       *\n\
       * All code following this comment (including called functions) must\n\
       * handle these states.\n\
       */\n\
      if (result === null || pos !== input.length) {\n\
        var offset = Math.max(pos, rightmostFailuresPos);\n\
        var found = offset < input.length ? input.charAt(offset) : null;\n\
        var errorPosition = computeErrorPosition();\n\
        \n\
        throw new this.SyntaxError(\n\
          cleanupExpected(rightmostFailuresExpected),\n\
          found,\n\
          offset,\n\
          errorPosition.line,\n\
          errorPosition.column\n\
        );\n\
      }\n\
      \n\
      return result;\n\
    },\n\
    \n\
    /* Returns the parser source code. */\n\
    toSource: function() { return this._source; }\n\
  };\n\
  \n\
  /* Thrown when a parser encounters a syntax error. */\n\
  \n\
  result.SyntaxError = function(expected, found, offset, line, column) {\n\
    function buildMessage(expected, found) {\n\
      var expectedHumanized, foundHumanized;\n\
      \n\
      switch (expected.length) {\n\
        case 0:\n\
          expectedHumanized = \"end of input\";\n\
          break;\n\
        case 1:\n\
          expectedHumanized = expected[0];\n\
          break;\n\
        default:\n\
          expectedHumanized = expected.slice(0, expected.length - 1).join(\", \")\n\
            + \" or \"\n\
            + expected[expected.length - 1];\n\
      }\n\
      \n\
      foundHumanized = found ? quote(found) : \"end of input\";\n\
      \n\
      return \"Expected \" + expectedHumanized + \" but \" + foundHumanized + \" found.\";\n\
    }\n\
    \n\
    this.name = \"SyntaxError\";\n\
    this.expected = expected;\n\
    this.found = found;\n\
    this.message = buildMessage(expected, found);\n\
    this.offset = offset;\n\
    this.line = line;\n\
    this.column = column;\n\
  };\n\
  \n\
  result.SyntaxError.prototype = Error.prototype;\n\
  \n\
  return result;\n\
})();\n\
//@ sourceURL=slightlyoff-cassowary.js/src/parser/parser.js"
));
require.register("slightlyoff-cassowary.js/src/parser/api.js", Function("exports, require, module",
"// Copyright (C) 2013, Alex Russell <slightlyoff@chromium.org>\n\
// Use of this source code is governed by\n\
//    http://www.apache.org/licenses/LICENSE-2.0\n\
\n\
(function(c){\n\
\"use strict\";\n\
\n\
var solver = new c.SimplexSolver();\n\
var vars = {};\n\
var exprs = {};\n\
\n\
var weak = c.Strength.weak;\n\
var medium = c.Strength.medium;\n\
var strong = c.Strength.strong;\n\
var required = c.Strength.required;\n\
\n\
var _c = function(expr) {\n\
  if (exprs[expr]) {\n\
    return exprs[expr];\n\
  }\n\
  switch(expr.type) {\n\
    case \"Inequality\":\n\
      var op = (expr.operator == \"<=\") ? c.LEQ : c.GEQ;\n\
      var i = new c.Inequality(_c(expr.left), op, _c(expr.right), weak);\n\
      solver.addConstraint(i);\n\
      return i;\n\
    case \"Equality\":\n\
      var i = new c.Equation(_c(expr.left), _c(expr.right), weak);\n\
      solver.addConstraint(i);\n\
      return i;\n\
    case \"MultiplicativeExpression\":\n\
      var i = c.times(_c(expr.left), _c(expr.right));\n\
      solver.addConstraint(i);\n\
      return i;\n\
    case \"AdditiveExpression\":\n\
      if (expr.operator == \"+\") {\n\
        return c.plus(_c(expr.left), _c(expr.right));\n\
      } else {\n\
        return c.minus(_c(expr.left), _c(expr.right));\n\
      }\n\
    case \"NumericLiteral\":\n\
      return new c.Expression(expr.value);\n\
    case \"Variable\":\n\
      // console.log(expr);\n\
      if(!vars[expr.name]) {\n\
        vars[expr.name] = new c.Variable({ name: expr.name });\n\
      }\n\
      return vars[expr.name];\n\
    case \"UnaryExpression\":\n\
      console.log(\"UnaryExpression...WTF?\");\n\
      break;\n\
  }\n\
};\n\
\n\
var compile = function(expressions) {\n\
  return expressions.map(_c);\n\
};\n\
\n\
// Global API entrypoint\n\
c._api = function() {\n\
  var args = Array.prototype.slice.call(arguments);\n\
  if (args.length == 1) {\n\
    if(typeof args[0] == \"string\") {\n\
      // Parse and execute it\n\
      var r = c.parser.parse(args[0]);\n\
      return compile(r);\n\
    } else if(typeof args[0] == \"function\") {\n\
      solver._addCallback(args[0]);\n\
    }\n\
  }\n\
};\n\
\n\
})(this[\"c\"]||module.parent.exports||{});\n\
//@ sourceURL=slightlyoff-cassowary.js/src/parser/api.js"
));
require.register("the-gss-engine/lib/GSS-with-compiler.js", Function("exports, require, module",
"var Compiler;\n\
\n\
require(\"./GSS.js\");\n\
\n\
Compiler = GSS.Compiler = require(\"gss-compiler\");\n\
\n\
GSS.compile = function(rules) {\n\
  var ast, e;\n\
  ast = {};\n\
  if (typeof rules === \"string\") {\n\
    try {\n\
      ast = Compiler.compile(rules);\n\
    } catch (_error) {\n\
      e = _error;\n\
      console.warn(\"compiler error\", e);\n\
      ast = {};\n\
    }\n\
  } else if (typeof rules === \"object\") {\n\
    ast = rules;\n\
  } else {\n\
    throw new Error(\"Unrecognized GSS rule format. Should be string or AST\");\n\
  }\n\
  return ast;\n\
};\n\
\n\
GSS.Engine.prototype['compile'] = function(source) {\n\
  return this.run(GSS.compile(source));\n\
};\n\
\n\
GSS.Getter.prototype['readAST:text/gss'] = function(node) {\n\
  var ast, source;\n\
  source = node.textContent.trim();\n\
  if (source.length === 0) {\n\
    return {};\n\
  }\n\
  ast = GSS.compile(source);\n\
  return ast;\n\
};\n\
//@ sourceURL=the-gss-engine/lib/GSS-with-compiler.js"
));
require.register("the-gss-engine/lib/GSS.js", Function("exports, require, module",
"var GSS, LOG_PASS, TIME, TIME_END, key, val, _ref;\n\
\n\
require(\"customevent-polyfill\");\n\
\n\
require(\"cassowary\");\n\
\n\
if (window.GSS) {\n\
  throw new Error(\"Only one GSS object per window\");\n\
}\n\
\n\
GSS = window.GSS = function(o) {\n\
  var engine;\n\
  if (o === document || o === window) {\n\
    return GSS.engines.root;\n\
  }\n\
  if (o.tagName) {\n\
    engine = GSS.get.engine(o);\n\
    if (engine) {\n\
      return engine;\n\
    }\n\
    return new GSS.Engine({\n\
      scope: o\n\
    });\n\
  } else if (o !== null && typeof o === 'object') {\n\
    if (o.scope) {\n\
      engine = GSS.get.engine(o.scope);\n\
      if (engine) {\n\
        return engine;\n\
      }\n\
    }\n\
    return new GSS.Engine(o);\n\
  } else {\n\
    throw new Error(\"\");\n\
  }\n\
};\n\
\n\
GSS.config = {\n\
  defaultStrength: 'weak',\n\
  defaultWeight: 0,\n\
  verticalScroll: true,\n\
  horizontalScroll: false,\n\
  resizeDebounce: 32,\n\
  defaultMatrixType: 'mat4',\n\
  observe: true,\n\
  observerOptions: {\n\
    subtree: true,\n\
    childList: true,\n\
    attributes: true,\n\
    characterData: true\n\
  },\n\
  debug: false,\n\
  warn: false,\n\
  perf: false,\n\
  fractionalPixels: true,\n\
  readyClass: true,\n\
  processBeforeSet: null,\n\
  maxDisplayRecursionDepth: 30,\n\
  useWorker: !!window.Worker,\n\
  worker: '../dist/worker.js',\n\
  useOffsetParent: true\n\
};\n\
\n\
if (typeof GSS_CONFIG !== \"undefined\" && GSS_CONFIG !== null) {\n\
  for (key in GSS_CONFIG) {\n\
    val = GSS_CONFIG[key];\n\
    GSS.config[key] = val;\n\
  }\n\
}\n\
\n\
GSS.deblog = function() {\n\
  if (GSS.config.debug) {\n\
    return console.log.apply(console, arguments);\n\
  }\n\
};\n\
\n\
GSS.warn = function() {\n\
  if (GSS.config.warn) {\n\
    return console.warn.apply(console, arguments);\n\
  }\n\
};\n\
\n\
LOG_PASS = function(pass, bg) {\n\
  if (bg == null) {\n\
    bg = \"green\";\n\
  }\n\
  return GSS.deblog(\"%c\" + pass, \"color:white; padding:2px; font-size:14px; background:\" + bg + \";\");\n\
};\n\
\n\
TIME = function() {\n\
  if (GSS.config.perf) {\n\
    return console.time.apply(console, arguments);\n\
  }\n\
};\n\
\n\
TIME_END = function() {\n\
  if (GSS.config.perf) {\n\
    return console.timeEnd.apply(console, arguments);\n\
  }\n\
};\n\
\n\
GSS._ = require(\"./_.js\");\n\
\n\
GSS.glMatrix = require('../vendor/gl-matrix');\n\
\n\
GSS.EventTrigger = require(\"./EventTrigger.js\");\n\
\n\
GSS.Getter = require(\"./dom/Getter.js\");\n\
\n\
GSS.Commander = require(\"./Commander.js\");\n\
\n\
GSS.Query = require(\"./dom/Query.js\");\n\
\n\
GSS.Thread = require(\"./Thread.js\");\n\
\n\
GSS.Engine = require(\"./Engine.js\");\n\
\n\
GSS.View = require(\"./dom/View.js\");\n\
\n\
GSS.Rule = require(\"./gssom/Rule.js\");\n\
\n\
require(\"./gssom/StyleSheet.js\");\n\
\n\
_ref = require(\"./dom/IdMixin.js\");\n\
for (key in _ref) {\n\
  val = _ref[key];\n\
  if (GSS[key]) {\n\
    throw new Error(\"IdMixin key clash: \" + key);\n\
  }\n\
  GSS[key] = val;\n\
}\n\
\n\
GSS.EventTrigger.make(GSS);\n\
\n\
GSS.get = new GSS.Getter();\n\
\n\
GSS.observer = require(\"./dom/Observer.js\");\n\
\n\
GSS.boot = function() {\n\
  return GSS({\n\
    scope: GSS.Getter.getRootScope(),\n\
    is_root: true\n\
  });\n\
};\n\
\n\
GSS.load = function() {\n\
  GSS.styleSheets.findAndInstall();\n\
  return GSS.render();\n\
};\n\
\n\
GSS.render = function() {\n\
  TIME(\"RENDER\");\n\
  GSS.updateIfNeeded();\n\
  return GSS.layoutIfNeeded();\n\
};\n\
\n\
GSS.needsUpdate = false;\n\
\n\
GSS.setNeedsUpdate = function(bool) {\n\
  if (bool) {\n\
    if (!GSS.needsUpdate) {\n\
      GSS._.defer(GSS.updateIfNeeded);\n\
    }\n\
    return GSS.needsUpdate = true;\n\
  } else {\n\
    return GSS.needsUpdate = false;\n\
  }\n\
};\n\
\n\
GSS.updateIfNeeded = function() {\n\
  if (GSS.needsUpdate) {\n\
    LOG_PASS(\"Update Pass\", \"orange\");\n\
    TIME(\"update pass\");\n\
    GSS.engines.root.updateIfNeeded();\n\
    GSS.setNeedsUpdate(false);\n\
    return TIME_END(\"update pass\");\n\
  }\n\
};\n\
\n\
GSS.needsLayout = false;\n\
\n\
GSS.setNeedsLayout = function(bool) {\n\
  if (bool) {\n\
    if (!GSS.needsLayout) {\n\
      GSS._.defer(GSS.layoutIfNeeded);\n\
    }\n\
    return GSS.needsLayout = true;\n\
  } else {\n\
    return GSS.needsLayout = false;\n\
  }\n\
};\n\
\n\
GSS.layoutIfNeeded = function() {\n\
  if (GSS.needsLayout) {\n\
    LOG_PASS(\"Layout Pass\", \"green\");\n\
    TIME(\"layout pass\");\n\
    GSS.engines.root.layoutIfNeeded();\n\
    GSS.setNeedsLayout(false);\n\
    return TIME_END(\"layout pass\");\n\
  }\n\
};\n\
\n\
GSS.needsDisplay = false;\n\
\n\
GSS.setNeedsDisplay = function(bool) {\n\
  if (bool) {\n\
    if (!GSS.needsDisplay) {\n\
      GSS._.defer(GSS.displayIfNeeded);\n\
    }\n\
    return GSS.needsDisplay = true;\n\
  } else {\n\
    return GSS.needsDisplay = false;\n\
  }\n\
};\n\
\n\
GSS.displayIfNeeded = function() {\n\
  if (GSS.needsDisplay) {\n\
    LOG_PASS(\"Display Pass\", \"violet\");\n\
    TIME(\"display pass\");\n\
    GSS.engines.root.displayIfNeeded();\n\
    GSS.setNeedsDisplay(false);\n\
    TIME_END(\"display pass\");\n\
    return TIME_END(\"RENDER\");\n\
  }\n\
};\n\
//@ sourceURL=the-gss-engine/lib/GSS.js"
));
require.register("the-gss-engine/lib/_.js", Function("exports, require, module",
"var firstSupportedStylePrefix, getTime, tempDiv, _,\n\
  __slice = [].slice;\n\
\n\
getTime = Date.now || function() {\n\
  return new Date().getTime();\n\
};\n\
\n\
tempDiv = document.createElement(\"div\");\n\
\n\
firstSupportedStylePrefix = function(prefixedPropertyNames) {\n\
  var name, _i, _len;\n\
  for (_i = 0, _len = prefixedPropertyNames.length; _i < _len; _i++) {\n\
    name = prefixedPropertyNames[_i];\n\
    if (typeof tempDiv.style[name] !== 'undefined') {\n\
      return name;\n\
    }\n\
  }\n\
  return null;\n\
};\n\
\n\
_ = {\n\
  transformPrefix: firstSupportedStylePrefix([\"transform\", \"WebkitTransform\", \"MozTransform\", \"OTransform\", \"msTransform\"]),\n\
  boxSizingPrefix: firstSupportedStylePrefix([\"boxSizing\", \"WebkitBoxSizing\", \"MozBoxSizing\", \"OBoxSizing\", \"msBoxSizing\"]),\n\
  defer: function(func) {\n\
    return setTimeout(func, 1);\n\
  },\n\
  debounce: function(func, wait, immediate) {\n\
    var args, context, result, timeout, timestamp;\n\
    timeout = void 0;\n\
    args = void 0;\n\
    context = void 0;\n\
    timestamp = void 0;\n\
    result = void 0;\n\
    return function() {\n\
      var callNow, later;\n\
      context = this;\n\
      args = __slice.call(arguments);\n\
      timestamp = getTime();\n\
      later = function() {\n\
        var last;\n\
        last = getTime() - timestamp;\n\
        if (last < wait) {\n\
          return timeout = setTimeout(later, wait - last);\n\
        } else {\n\
          timeout = null;\n\
          if (!immediate) {\n\
            return result = func.apply(context, args);\n\
          }\n\
        }\n\
      };\n\
      callNow = immediate && !timeout;\n\
      if (!timeout) {\n\
        timeout = setTimeout(later, wait);\n\
      }\n\
      if (callNow) {\n\
        result = func.apply(context, args);\n\
      }\n\
      return result;\n\
    };\n\
  },\n\
  cloneDeep: function(obj) {\n\
    return JSON.parse(JSON.stringify(obj));\n\
  },\n\
  cloneObject: function(obj) {\n\
    var i, target;\n\
    target = {};\n\
    for (i in obj) {\n\
      if (obj.hasOwnProperty(i)) {\n\
        target[i] = obj[i];\n\
      }\n\
    }\n\
    return target;\n\
  },\n\
  filterVarsForDisplay: function(vars) {\n\
    var idx, k, key, keysToKill, obj, val, _i, _len;\n\
    obj = {};\n\
    keysToKill = [];\n\
    for (key in vars) {\n\
      val = vars[key];\n\
      idx = key.indexOf(\"intrinsic-\");\n\
      if (idx !== -1) {\n\
        keysToKill.push(key.replace(\"intrinsic-\", \"\"));\n\
      } else {\n\
        obj[key] = val;\n\
      }\n\
    }\n\
    for (_i = 0, _len = keysToKill.length; _i < _len; _i++) {\n\
      k = keysToKill[_i];\n\
      delete obj[k];\n\
    }\n\
    return obj;\n\
  },\n\
  varsByViewId: function(vars) {\n\
    var gid, key, prop, val, varsById;\n\
    varsById = {};\n\
    for (key in vars) {\n\
      val = vars[key];\n\
      if (key[0] === \"$\") {\n\
        gid = key.substring(1, key.indexOf(\"[\"));\n\
        if (!varsById[gid]) {\n\
          varsById[gid] = {};\n\
        }\n\
        prop = key.substring(key.indexOf(\"[\") + 1, key.indexOf(\"]\"));\n\
        varsById[gid][prop] = val;\n\
      }\n\
    }\n\
    return varsById;\n\
  },\n\
  mat4ToCSS: function(a) {\n\
    return 'matrix3d(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' + a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' + a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';\n\
  },\n\
  mat2dToCSS: function(a) {\n\
    return 'matrix(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ')';\n\
  },\n\
  camelize: function(s) {\n\
    var result;\n\
    result = s.replace(/[-_\\s]+(.)?/g, function(match, c) {\n\
      if (c) {\n\
        return c.toUpperCase();\n\
      } else {\n\
        return \"\";\n\
      }\n\
    });\n\
    return result;\n\
  }\n\
};\n\
\n\
module.exports = _;\n\
//@ sourceURL=the-gss-engine/lib/_.js"
));
require.register("the-gss-engine/lib/EventTrigger.js", Function("exports, require, module",
"var EventTrigger;\n\
\n\
EventTrigger = (function() {\n\
  function EventTrigger() {\n\
    this._listenersByType = {};\n\
    this;\n\
  }\n\
\n\
  EventTrigger.prototype._getListeners = function(type) {\n\
    var byType;\n\
    if (this._listenersByType[type]) {\n\
      byType = this._listenersByType[type];\n\
    } else {\n\
      byType = [];\n\
      this._listenersByType[type] = byType;\n\
    }\n\
    return byType;\n\
  };\n\
\n\
  EventTrigger.prototype.on = function(type, listener) {\n\
    var listeners;\n\
    listeners = this._getListeners(type);\n\
    if (listeners.indexOf(listener) === -1) {\n\
      listeners.push(listener);\n\
    }\n\
    return this;\n\
  };\n\
\n\
  EventTrigger.prototype.once = function(type, listener) {\n\
    var that, wrap;\n\
    wrap = null;\n\
    that = this;\n\
    wrap = function(o) {\n\
      listener.call(that, o);\n\
      return that.off(type, wrap);\n\
    };\n\
    this.on(type, wrap);\n\
    return this;\n\
  };\n\
\n\
  EventTrigger.prototype.off = function(type, listener) {\n\
    var i, listeners;\n\
    listeners = this._getListeners(type);\n\
    i = listeners.indexOf(listener);\n\
    if (i !== -1) {\n\
      listeners.splice(i, 1);\n\
    }\n\
    return this;\n\
  };\n\
\n\
  EventTrigger.prototype.offAll = function(target) {\n\
    var i, listeners, type, _ref;\n\
    if (typeof target === \"string\") {\n\
      if (target) {\n\
        this._listenersByType[target] = [];\n\
      }\n\
    } else if (typeof target === \"function\") {\n\
      _ref = this._listenersByType;\n\
      for (type in _ref) {\n\
        listeners = _ref[type];\n\
        i = listeners.indexOf(target);\n\
        if (i !== -1) {\n\
          listeners.splice(i, 1);\n\
        }\n\
      }\n\
    } else {\n\
      this._listenersByType = {};\n\
    }\n\
    return this;\n\
  };\n\
\n\
  EventTrigger.prototype.trigger = function(type, o) {\n\
    var listener, _i, _len, _ref;\n\
    _ref = this._getListeners(type);\n\
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n\
      listener = _ref[_i];\n\
      listener.call(this, o);\n\
    }\n\
    return this;\n\
  };\n\
\n\
  return EventTrigger;\n\
\n\
})();\n\
\n\
EventTrigger.make = function(obj) {\n\
  var key, val, _ref;\n\
  if (obj == null) {\n\
    obj = {};\n\
  }\n\
  EventTrigger.prototype.constructor.call(obj);\n\
  _ref = EventTrigger.prototype;\n\
  for (key in _ref) {\n\
    val = _ref[key];\n\
    if (key === \"constructor\") {\n\
      val.call(obj);\n\
    } else {\n\
      obj[key] = val;\n\
    }\n\
  }\n\
  return obj;\n\
};\n\
\n\
module.exports = EventTrigger;\n\
//@ sourceURL=the-gss-engine/lib/EventTrigger.js"
));
require.register("the-gss-engine/lib/dom/Query.js", Function("exports, require, module",
"/*\n\
\n\
Encapsulates Dom Queries used in GSS rules\n\
\n\
JSPerf debunking *big* perf gain from liveNodeLists: \n\
\n\
- http://jsperf.com/getelementsbyclassname-vs-queryselectorall/70\n\
- http://jsperf.com/queryselectorall-vs-getelementsbytagname/77\n\
*/\n\
\n\
var LOG, Query, arrayAddsRemoves,\n\
  __slice = [].slice,\n\
  __hasProp = {}.hasOwnProperty,\n\
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\
\n\
arrayAddsRemoves = function(old, neu) {\n\
  var adds, n, o, removes, _i, _j, _len, _len1;\n\
  adds = [];\n\
  removes = [];\n\
  for (_i = 0, _len = neu.length; _i < _len; _i++) {\n\
    n = neu[_i];\n\
    if (old.indexOf(n) === -1) {\n\
      adds.push(n);\n\
    }\n\
  }\n\
  for (_j = 0, _len1 = old.length; _j < _len1; _j++) {\n\
    o = old[_j];\n\
    if (neu.indexOf(o) === -1) {\n\
      removes.push(o);\n\
    }\n\
  }\n\
  return {\n\
    adds: adds,\n\
    removes: removes\n\
  };\n\
};\n\
\n\
LOG = function() {\n\
  return GSS.deblog.apply(GSS, [\"Query\"].concat(__slice.call(arguments)));\n\
};\n\
\n\
Query = (function(_super) {\n\
  __extends(Query, _super);\n\
\n\
  Query.prototype.isQuery = true;\n\
\n\
  function Query(o) {\n\
    if (o == null) {\n\
      o = {};\n\
    }\n\
    Query.__super__.constructor.apply(this, arguments);\n\
    this.selector = o.selector || (function() {\n\
      throw new Error(\"GssQuery must have a selector\");\n\
    })();\n\
    this.createNodeList = o.createNodeList || (function() {\n\
      throw new Error(\"GssQuery must implement createNodeList()\");\n\
    })();\n\
    this.isMulti = o.isMulti || false;\n\
    this.isLive = o.isLive || false;\n\
    this.ids = o.ids || [];\n\
    this.lastAddedIds = [];\n\
    this.lastRemovedIds = [];\n\
    LOG(\"constructor() @\", this);\n\
    this;\n\
  }\n\
\n\
  Query.prototype._updated_once = false;\n\
\n\
  Query.prototype.changedLastUpdate = false;\n\
\n\
  Query.prototype.update = function() {\n\
    var adds, el, id, newIds, oldIds, removes, _i, _len, _ref, _ref1;\n\
    LOG(\"update() @\", this);\n\
    if (this.is_destroyed) {\n\
      throw new Error(\"Can't update destroyed query: \" + selector);\n\
    }\n\
    this.changedLastUpdate = false;\n\
    if (!this.isLive || !this._updated_once) {\n\
      this.nodeList = this.createNodeList();\n\
      this._updated_once = true;\n\
    }\n\
    oldIds = this.ids;\n\
    newIds = [];\n\
    _ref = this.nodeList;\n\
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n\
      el = _ref[_i];\n\
      id = GSS.setupId(el);\n\
      if (id) {\n\
        newIds.push(id);\n\
      }\n\
    }\n\
    _ref1 = arrayAddsRemoves(oldIds, newIds), adds = _ref1.adds, removes = _ref1.removes;\n\
    if (adds.length > 0) {\n\
      this.changedLastUpdate = true;\n\
    }\n\
    this.lastAddedIds = adds;\n\
    if (removes.length > 0) {\n\
      this.changedLastUpdate = true;\n\
    }\n\
    this.lastRemovedIds = removes;\n\
    this.ids = newIds;\n\
    if (this.changedLastUpdate) {\n\
      this.trigger('afterChange');\n\
    }\n\
    return this;\n\
  };\n\
\n\
  Query.prototype.forEach = function(callback) {\n\
    var el, _i, _len, _ref, _results;\n\
    _ref = this.nodeList;\n\
    _results = [];\n\
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n\
      el = _ref[_i];\n\
      _results.push(callback.call(this, el));\n\
    }\n\
    return _results;\n\
  };\n\
\n\
  Query.prototype.first = function() {\n\
    return this.nodeList[0];\n\
  };\n\
\n\
  Query.prototype.last = function() {\n\
    return this.nodeList[this.nodeList.length - 1];\n\
  };\n\
\n\
  Query.prototype.next = function(el) {\n\
    return this.nodeList[this.indexOf(el) + 1];\n\
  };\n\
\n\
  Query.prototype.prev = function(el) {\n\
    return this.nodeList[this.indexOf(el) - 1];\n\
  };\n\
\n\
  Query.prototype.indexOf = function(el) {\n\
    return Array.prototype.indexOf.call(this.nodeList, el);\n\
  };\n\
\n\
  Query.prototype.is_destroyed = false;\n\
\n\
  Query.prototype.destroy = function() {\n\
    this.offAll();\n\
    this.is_destroyed = true;\n\
    this.ids = null;\n\
    this.lastAddedIds = null;\n\
    this.lastRemovedIds = null;\n\
    this.createNodeList = null;\n\
    this.nodeList = null;\n\
    return this.changedLastUpdate = null;\n\
  };\n\
\n\
  return Query;\n\
\n\
})(GSS.EventTrigger);\n\
\n\
module.exports = Query;\n\
//@ sourceURL=the-gss-engine/lib/dom/Query.js"
));
require.register("the-gss-engine/lib/dom/View.js", Function("exports, require, module",
"var View, transformPrefix,\n\
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };\n\
\n\
transformPrefix = GSS._.transformPrefix;\n\
\n\
View = (function() {\n\
  function View() {\n\
    this.recycle = __bind(this.recycle, this);\n\
    this.attach = __bind(this.attach, this);\n\
    this.values = {};\n\
    this.is_positioned = false;\n\
    this.el = null;\n\
    this.id = null;\n\
    this.parentOffsets = null;\n\
    this.style = null;\n\
    this.Matrix = null;\n\
    this.matrixType = null;\n\
    this.virtuals = null;\n\
    this;\n\
  }\n\
\n\
  View.prototype.attach = function(el, id) {\n\
    this.el = el;\n\
    this.id = id;\n\
    if (!this.el) {\n\
      throw new Error(\"View needs el\");\n\
    }\n\
    if (!this.id) {\n\
      throw new Error(\"View needs id\");\n\
    }\n\
    View.byId[this.id] = this;\n\
    this.is_positioned = false;\n\
    GSS.trigger('view:attach', this);\n\
    if (!this.matrixType) {\n\
      this.matrixType = GSS.config.defaultMatrixType;\n\
    }\n\
    this.Matrix = GSS.glMatrix[this.matrixType] || (function() {\n\
      throw new Error(\"View matrixType not found: \" + this.matrixType);\n\
    }).call(this);\n\
    if (!this.matrix) {\n\
      this.matrix = this.Matrix.create();\n\
    }\n\
    return this;\n\
  };\n\
\n\
  View.prototype.recycle = function() {\n\
    GSS.trigger('view:detach', this);\n\
    this.is_positioned = false;\n\
    this.el = null;\n\
    delete View.byId[this.id];\n\
    this.id = null;\n\
    this.parentOffsets = null;\n\
    this.style = null;\n\
    this.Matrix.identity(this.matrix);\n\
    this.matrixType = null;\n\
    this.virtuals = null;\n\
    this.values = {};\n\
    return View.recycled.push(this);\n\
  };\n\
\n\
  View.prototype.positionIfNeeded = function() {\n\
    if (!this.is_positioned) {\n\
      this.style.position = 'absolute';\n\
      this.style.margin = '0px';\n\
      this.style.top = '0px';\n\
      this.style.left = '0px';\n\
    }\n\
    return this.is_positioned = true;\n\
  };\n\
\n\
  View.prototype.updateParentOffsets = function() {\n\
    return this.parentOffsets = this.getParentOffsets();\n\
  };\n\
\n\
  View.prototype.getParentOffsets = function() {\n\
    var box;\n\
    box = this.el.getBoundingClientRect();\n\
    return {\n\
      y: box.top + (window.pageYOffset || document.documentElement.scrollTop) - (document.documentElement.clientTop || 0),\n\
      x: box.left + (window.pageXOffset || document.documentElement.scrollLeft) - (document.documentElement.clientLeft || 0)\n\
    };\n\
  };\n\
\n\
  View.prototype.getParentOffsets__ = function() {\n\
    var el, offsets;\n\
    el = this.el;\n\
    /*\n\
    if !GSS.config.useOffsetParent \n\
      return { \n\
        x:0\n\
        y:0\n\
      }\n\
    */\n\
\n\
    offsets = {\n\
      x: 0,\n\
      y: 0\n\
    };\n\
    if (!el.offsetParent) {\n\
      return offsets;\n\
    }\n\
    el = el.offsetParent;\n\
    while (true) {\n\
      offsets.x += el.offsetLeft;\n\
      offsets.y += el.offsetTop;\n\
      if (!el.offsetParent) {\n\
        break;\n\
      }\n\
      el = el.offsetParent;\n\
    }\n\
    return offsets;\n\
  };\n\
\n\
  View.prototype.needsDisplay = false;\n\
\n\
  View.prototype.display = function(offsets) {\n\
    var key, o, val, xLocal, yLocal, _ref, _ref1;\n\
    if (!this.values) {\n\
      return;\n\
    }\n\
    o = {};\n\
    _ref = this.values;\n\
    for (key in _ref) {\n\
      val = _ref[key];\n\
      o[key] = val;\n\
    }\n\
    if ((o.x != null) || (o.y != null)) {\n\
      if (this.parentOffsets) {\n\
        offsets.x += this.parentOffsets.x;\n\
        offsets.y += this.parentOffsets.y;\n\
      }\n\
      if (o.x != null) {\n\
        xLocal = o.x - offsets.x;\n\
        delete o.x;\n\
      } else {\n\
        xLocal = 0;\n\
      }\n\
      if (o.y != null) {\n\
        yLocal = o.y - offsets.y;\n\
        delete o.y;\n\
      } else {\n\
        yLocal = 0;\n\
      }\n\
      if (!GSS.config.fractionalPixels) {\n\
        xLocal = Math.round(xLocal);\n\
        yLocal = Math.round(yLocal);\n\
      }\n\
      this.values.xLocal = xLocal;\n\
      this.values.yLocal = yLocal;\n\
      this._positionMatrix(xLocal, yLocal);\n\
    }\n\
    if (o['z-index'] != null) {\n\
      this.style['zIndex'] = o['z-index'];\n\
      delete o['z-index'];\n\
    }\n\
    /*   \n\
    if o['line-height']?\n\
      @style['line-height'] = o['line-height']\n\
      delete o['line-height']\n\
    */\n\
\n\
    if (!GSS.config.fractionalPixels) {\n\
      if (o.width != null) {\n\
        o.width = Math.round(o.width);\n\
      }\n\
      if (o.height != null) {\n\
        o.height = Math.round(o.height);\n\
      }\n\
    }\n\
    for (key in o) {\n\
      val = o[key];\n\
      key = GSS._.camelize(key);\n\
      this.style[key] = val + \"px\";\n\
    }\n\
    _ref1 = this.style;\n\
    for (key in _ref1) {\n\
      val = _ref1[key];\n\
      this.el.style[key] = val;\n\
    }\n\
    return this;\n\
  };\n\
\n\
  /*\n\
  _positionTranslate: (xLocal, yLocal) ->\n\
    @style[transformPrefix] += \" translateX(#{@xLocal}px)\"\n\
    @style[transformPrefix] += \" translateY(#{@yLocal}px)\"\n\
  */\n\
\n\
\n\
  View.prototype._positionMatrix = function(xLocal, yLocal) {\n\
    this.Matrix.translate(this.matrix, this.matrix, [xLocal, yLocal, 0]);\n\
    return this.style[transformPrefix] = GSS._[this.matrixType + \"ToCSS\"](this.matrix);\n\
  };\n\
\n\
  View.prototype.displayIfNeeded = function(offsets, pass_to_children) {\n\
    if (offsets == null) {\n\
      offsets = {\n\
        x: 0,\n\
        y: 0\n\
      };\n\
    }\n\
    if (pass_to_children == null) {\n\
      pass_to_children = true;\n\
    }\n\
    if (this.needsDisplay) {\n\
      this.display(offsets);\n\
      this.setNeedsDisplay(false);\n\
    }\n\
    offsets = {\n\
      x: 0,\n\
      y: 0\n\
    };\n\
    if (this.values.x) {\n\
      offsets.x += this.values.x;\n\
    }\n\
    if (this.values.y) {\n\
      offsets.y += this.values.y;\n\
    }\n\
    if (pass_to_children) {\n\
      return this.displayChildrenIfNeeded(offsets);\n\
    }\n\
  };\n\
\n\
  View.prototype.setNeedsDisplay = function(bool) {\n\
    if (bool) {\n\
      return this.needsDisplay = true;\n\
    } else {\n\
      return this.needsDisplay = false;\n\
    }\n\
  };\n\
\n\
  View.prototype.displayChildrenIfNeeded = function(offsets) {\n\
    return this._displayChildrenIfNeeded(this.el, offsets, 0);\n\
  };\n\
\n\
  View.prototype._displayChildrenIfNeeded = function(el, offsets, recurseLevel) {\n\
    var child, children, view, _i, _len, _results;\n\
    if (recurseLevel <= GSS.config.maxDisplayRecursionDepth) {\n\
      children = el.children;\n\
      if (!children) {\n\
        return null;\n\
      }\n\
      _results = [];\n\
      for (_i = 0, _len = children.length; _i < _len; _i++) {\n\
        child = children[_i];\n\
        view = GSS.get.view(child);\n\
        if (view) {\n\
          _results.push(view.displayIfNeeded(offsets));\n\
        } else {\n\
          _results.push(this._displayChildrenIfNeeded(child, offsets, recurseLevel + 1));\n\
        }\n\
      }\n\
      return _results;\n\
    }\n\
  };\n\
\n\
  View.prototype.updateValues = function(o) {\n\
    this.values = o;\n\
    this.style = {};\n\
    this.Matrix.identity(this.matrix);\n\
    if (this.el.getAttribute('gss-parent-offsets') != null) {\n\
      this.updateParentOffsets();\n\
    }\n\
    if ((o.x != null) || (o.y != null)) {\n\
      this.positionIfNeeded();\n\
    }\n\
    this.setNeedsDisplay(true);\n\
    return this;\n\
  };\n\
\n\
  View.prototype.getParentView = function() {\n\
    var el, gid;\n\
    el = this.el.parentElement;\n\
    while (true) {\n\
      gid = el._gss_id;\n\
      if (gid) {\n\
        return View.byId[gid];\n\
      }\n\
      if (!el.parentElement) {\n\
        break;\n\
      }\n\
      el = el.parentElement;\n\
    }\n\
  };\n\
\n\
  View.prototype.addVirtuals = function(names) {\n\
    var name, _i, _len;\n\
    if (!this.virtuals) {\n\
      return this.virtuals = [].concat(names);\n\
    }\n\
    for (_i = 0, _len = names.length; _i < _len; _i++) {\n\
      name = names[_i];\n\
      this.addVirtual(name);\n\
    }\n\
    return null;\n\
  };\n\
\n\
  View.prototype.addVirtual = function(name) {\n\
    if (!this.virtuals) {\n\
      return this.virtuals = [name];\n\
    }\n\
    if (this.virtuals.indexOf(name) === -1) {\n\
      this.virtuals.push(name);\n\
    }\n\
    return null;\n\
  };\n\
\n\
  View.prototype.hasVirtual = function(name) {\n\
    if (!this.virtuals) {\n\
      return false;\n\
    } else if (this.virtuals.indexOf(name) === -1) {\n\
      return false;\n\
    }\n\
    return true;\n\
  };\n\
\n\
  View.prototype.nearestViewWithVirtual = function(name) {\n\
    var ancestor;\n\
    ancestor = this;\n\
    while (ancestor) {\n\
      if (ancestor.hasVirtual(name)) {\n\
        return ancestor;\n\
      }\n\
      ancestor = ancestor.parentElement;\n\
    }\n\
    return null;\n\
  };\n\
\n\
  return View;\n\
\n\
})();\n\
\n\
View.byId = {};\n\
\n\
View.recycled = [];\n\
\n\
View.count = 0;\n\
\n\
View[\"new\"] = function(_arg) {\n\
  var el, id, view;\n\
  el = _arg.el, id = _arg.id;\n\
  View.count++;\n\
  if (View.recycled.length > 0) {\n\
    view = View.recycled.pop();\n\
  } else {\n\
    view = new View();\n\
  }\n\
  return view.attach(el, id);\n\
};\n\
\n\
module.exports = View;\n\
//@ sourceURL=the-gss-engine/lib/dom/View.js"
));
require.register("the-gss-engine/lib/dom/Observer.js", Function("exports, require, module",
"var LOG, observer, setupObserver, _unobservedElements,\n\
  __slice = [].slice;\n\
\n\
LOG = function() {\n\
  return GSS.deblog.apply(GSS, [\"Observer\"].concat(__slice.call(arguments)));\n\
};\n\
\n\
observer = null;\n\
\n\
GSS.is_observing = false;\n\
\n\
GSS.observe = function() {\n\
  if (!GSS.is_observing && GSS.config.observe) {\n\
    observer.observe(document.body, GSS.config.observerOptions);\n\
    return GSS.is_observing = true;\n\
  }\n\
};\n\
\n\
GSS.unobserve = function() {\n\
  observer.disconnect();\n\
  return GSS.is_observing = false;\n\
};\n\
\n\
GSS._unobservedElements = _unobservedElements = [];\n\
\n\
GSS.observeElement = function(el) {\n\
  if (_unobservedElements.indexOf(el) === -1) {\n\
    return _unobservedElements.push(el);\n\
  }\n\
};\n\
\n\
GSS.unobserveElement = function(el) {\n\
  var i;\n\
  i = _unobservedElements.indexOf(el);\n\
  if (i > -1) {\n\
    return _unobservedElements.splice(i, 1);\n\
  }\n\
};\n\
\n\
setupObserver = function() {\n\
  if (!window.MutationObserver) {\n\
    if (window.WebKitMutationObserver) {\n\
      window.MutationObserver = window.WebKitMutationObserver;\n\
    } else {\n\
      window.MutationObserver = window.JsMutationObserver;\n\
    }\n\
  }\n\
  return observer = new MutationObserver(function(mutations) {\n\
    var e, engine, enginesToReset, gid, i, invalidMeasureIds, m, needsUpdateQueries, nodesToIgnore, observableMutation, removed, scope, sheet, target, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _m, _ref;\n\
    LOG(\"MutationObserver\", mutations);\n\
    enginesToReset = [];\n\
    nodesToIgnore = [];\n\
    needsUpdateQueries = [];\n\
    invalidMeasureIds = [];\n\
    observableMutation = false;\n\
    for (_i = 0, _len = mutations.length; _i < _len; _i++) {\n\
      m = mutations[_i];\n\
      if (_unobservedElements.indexOf(m.target) !== -1) {\n\
        continue;\n\
      } else {\n\
        observableMutation = true;\n\
      }\n\
      if (m.type === \"characterData\") {\n\
        if (!m.target.parentElement) {\n\
          continue;\n\
        }\n\
        sheet = m.target.parentElement.gssStyleSheet;\n\
        if (sheet) {\n\
          sheet.reinstall();\n\
          e = sheet.engine;\n\
          if (enginesToReset.indexOf(e) === -1) {\n\
            enginesToReset.push(e);\n\
          }\n\
        }\n\
      }\n\
      if (m.type === \"attributes\" || m.type === \"childList\") {\n\
        if (m.type === \"attributes\" && m.attributename === \"data-gss-id\") {\n\
          nodesToIgnore.push(m.target);\n\
        } else if (nodesToIgnore.indexOf(m.target) === -1) {\n\
          scope = GSS.get.nearestScope(m.target);\n\
          if (scope) {\n\
            if (needsUpdateQueries.indexOf(scope) === -1) {\n\
              needsUpdateQueries.push(scope);\n\
            }\n\
          }\n\
        }\n\
      }\n\
      gid = null;\n\
      if (m.type === \"characterData\" || m.type === \"attributes\" || m.type === \"childList\") {\n\
        if (m.type === \"characterData\") {\n\
          target = m.target.parentElement;\n\
          gid = \"$\" + GSS.getId(m.target.parentElement);\n\
        } else if (nodesToIgnore.indexOf(m.target) === -1) {\n\
          gid = \"$\" + GSS.getId(m.target);\n\
        }\n\
        if (gid != null) {\n\
          if (invalidMeasureIds.indexOf(gid) === -1) {\n\
            invalidMeasureIds.push(gid);\n\
          }\n\
        }\n\
      }\n\
    }\n\
    if (!observableMutation) {\n\
      return null;\n\
    }\n\
    removed = GSS.styleSheets.findAllRemoved();\n\
    for (_j = 0, _len1 = removed.length; _j < _len1; _j++) {\n\
      sheet = removed[_j];\n\
      sheet.destroy();\n\
      e = sheet.engine;\n\
      if (enginesToReset.indexOf(e) === -1) {\n\
        enginesToReset.push(e);\n\
      }\n\
    }\n\
    i = 0;\n\
    engine = GSS.engines[i];\n\
    while (!!engine) {\n\
      if (i > 0) {\n\
        if (engine.scope) {\n\
          if (!document.documentElement.contains(engine.scope)) {\n\
            engine.destroyChildren();\n\
            engine.destroy();\n\
          }\n\
        }\n\
      }\n\
      i++;\n\
      engine = GSS.engines[i];\n\
    }\n\
    for (_k = 0, _len2 = enginesToReset.length; _k < _len2; _k++) {\n\
      e = enginesToReset[_k];\n\
      if (!e.is_destroyed) {\n\
        e.reset();\n\
      }\n\
    }\n\
    for (_l = 0, _len3 = needsUpdateQueries.length; _l < _len3; _l++) {\n\
      scope = needsUpdateQueries[_l];\n\
      e = GSS.get.engine(scope);\n\
      if (e) {\n\
        if (!e.is_destroyed) {\n\
          if (enginesToReset.indexOf(e) === -1) {\n\
            e.updateQueries();\n\
          }\n\
        }\n\
      }\n\
    }\n\
    if (invalidMeasureIds.length > 0) {\n\
      _ref = GSS.engines;\n\
      for (_m = 0, _len4 = _ref.length; _m < _len4; _m++) {\n\
        e = _ref[_m];\n\
        if (!e.is_destroyed) {\n\
          e.commander.handleInvalidMeasures(invalidMeasureIds);\n\
        }\n\
      }\n\
    }\n\
    enginesToReset = null;\n\
    nodesToIgnore = null;\n\
    needsUpdateQueries = null;\n\
    invalidMeasureIds = null;\n\
    return GSS.load();\n\
    /*\n\
    for m in mutations\n\
      # els removed from scope\n\
      if m.removedNodes.length > 0 # nodelist are weird?\n\
        for node in m.removedNodes\n\
          # destroy engines\n\
          if node._gss_is_scope\n\
            GSS.get.engine(node).destroy()      \n\
        \n\
          ## scopes with removed ASTs\n\
          #if GSS.get.isStyleNode node\n\
          #  scope = GSS.get.scopeForStyleNode node\n\
          #  if scopesToLoad.indexOf(scope) is -1 and scope\n\
          #    scopesToLoad.push scope  \n\
          #\n\
        \n\
    \n\
      ## els removed from scope\n\
      #if m.addedNodes.length > 0 # nodelist are weird?\n\
      #  for node in m.addedNodes        \n\
      #    # scopes with new ASTs        \n\
      #    if GSS.get.isStyleNode node\n\
      #      scope = GSS.get.scopeForStyleNode node\n\
      #      if scopesToLoad.indexOf(scope) is -1\n\
      #        scopesToLoad.push scope\n\
      #\n\
      #for scope in scopesToLoad\n\
      #  GSS(scope).load()\n\
    */\n\
\n\
  });\n\
};\n\
\n\
GSS.isDisplayed = false;\n\
\n\
GSS.onDisplay = function() {\n\
  GSS.trigger(\"display\");\n\
  if (GSS.isDisplayed) {\n\
    return;\n\
  }\n\
  GSS.isDisplayed = true;\n\
  if (GSS.config.readyClass) {\n\
    GSS.html.classList.add(\"gss-ready\");\n\
    return GSS.html.classList.remove(\"gss-not-ready\");\n\
  }\n\
};\n\
\n\
document.addEventListener(\"DOMContentLoaded\", function(e) {\n\
  var html;\n\
  GSS.body = document.body || GSS.getElementsByTagName('body')[0];\n\
  GSS.html = html = GSS.body.parentNode;\n\
  document.dispatchEvent(new CustomEvent('GSS', {\n\
    detail: GSS,\n\
    bubbles: false,\n\
    cancelable: false\n\
  }));\n\
  setupObserver();\n\
  GSS.boot();\n\
  LOG(\"DOMContentLoaded\");\n\
  GSS.load();\n\
  GSS.observe();\n\
  return GSS.trigger(\"afterLoaded\");\n\
});\n\
\n\
module.exports = observer;\n\
//@ sourceURL=the-gss-engine/lib/dom/Observer.js"
));
require.register("the-gss-engine/lib/gssom/Node.js", Function("exports, require, module",
"\n\
//@ sourceURL=the-gss-engine/lib/gssom/Node.js"
));
require.register("the-gss-engine/lib/gssom/StyleSheet.js", Function("exports, require, module",
"var Rule, StyleSheet;\n\
\n\
Rule = GSS.Rule;\n\
\n\
StyleSheet = (function() {\n\
  StyleSheet.prototype.isScoped = false;\n\
\n\
  /*    \n\
  el:  Node\n\
  engine:     Engine\n\
  rules:      []\n\
  isScoped:   Boolean\n\
  */\n\
\n\
\n\
  function StyleSheet(o) {\n\
    var key, tagName, val;\n\
    if (o == null) {\n\
      o = {};\n\
    }\n\
    for (key in o) {\n\
      val = o[key];\n\
      this[key] = val;\n\
    }\n\
    if (!this.engine) {\n\
      throw new Error(\"StyleSheet needs engine\");\n\
    }\n\
    this.engine.styleSheets.push(this);\n\
    GSS.styleSheets.push(this);\n\
    this.isRemote = false;\n\
    this.remoteSourceText = null;\n\
    if (this.el) {\n\
      tagName = this.el.tagName;\n\
      if (tagName === \"LINK\") {\n\
        this.isRemote = true;\n\
      }\n\
    }\n\
    this.rules = [];\n\
    if (o.rules) {\n\
      this.addRules(o.rules);\n\
    }\n\
    return this;\n\
  }\n\
\n\
  StyleSheet.prototype.addRules = function(rules) {\n\
    var r, rule, _i, _len, _results;\n\
    _results = [];\n\
    for (_i = 0, _len = rules.length; _i < _len; _i++) {\n\
      r = rules[_i];\n\
      r.parent = this;\n\
      r.styleSheet = this;\n\
      r.engine = this.engine;\n\
      rule = new GSS.Rule(r);\n\
      _results.push(this.rules.push(rule));\n\
    }\n\
    return _results;\n\
  };\n\
\n\
  StyleSheet.prototype.needsInstall = true;\n\
\n\
  StyleSheet.prototype.install = function() {\n\
    if (this.needsInstall) {\n\
      this.needsInstall = false;\n\
      this._install();\n\
    }\n\
    return this;\n\
  };\n\
\n\
  StyleSheet.prototype.reinstall = function() {\n\
    return this._install();\n\
  };\n\
\n\
  StyleSheet.prototype.installNewRules = function(rules) {\n\
    var rule, _i, _len, _ref, _results;\n\
    this.rules = [];\n\
    this.addRules(rules);\n\
    _ref = this.rules;\n\
    _results = [];\n\
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n\
      rule = _ref[_i];\n\
      _results.push(rule.install());\n\
    }\n\
    return _results;\n\
  };\n\
\n\
  StyleSheet.prototype._install = function() {\n\
    var rule, _i, _len, _ref, _results;\n\
    if (this.isRemote) {\n\
      return this._installRemote();\n\
    } else if (this.el) {\n\
      return this._installInline();\n\
    } else {\n\
      _ref = this.rules;\n\
      _results = [];\n\
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n\
        rule = _ref[_i];\n\
        _results.push(rule.install());\n\
      }\n\
      return _results;\n\
    }\n\
  };\n\
\n\
  StyleSheet.prototype._installInline = function() {\n\
    return this.installNewRules(GSS.get.readAST(this.el));\n\
  };\n\
\n\
  StyleSheet.prototype._installRemote = function() {\n\
    var req, url,\n\
      _this = this;\n\
    if (this.remoteSourceText) {\n\
      return this.installNewRules(GSS.compile(this.remoteSourceText));\n\
    }\n\
    url = this.el.getAttribute('href');\n\
    if (!url) {\n\
      return null;\n\
    }\n\
    req = new XMLHttpRequest;\n\
    req.onreadystatechange = function() {\n\
      if (req.readyState !== 4) {\n\
        return;\n\
      }\n\
      if (req.status !== 200) {\n\
        return;\n\
      }\n\
      _this.remoteSourceText = req.responseText.trim();\n\
      return _this.installNewRules(GSS.compile(_this.remoteSourceText));\n\
    };\n\
    req.open('GET', url, true);\n\
    return req.send(null);\n\
  };\n\
\n\
  StyleSheet.prototype.reset = function() {\n\
    var rule, _i, _len, _ref, _results;\n\
    this.needsInstall = true;\n\
    _ref = this.rules;\n\
    _results = [];\n\
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n\
      rule = _ref[_i];\n\
      _results.push(rule.reset());\n\
    }\n\
    return _results;\n\
  };\n\
\n\
  StyleSheet.prototype.destroyRules = function() {\n\
    var rule, _i, _len, _ref;\n\
    _ref = this.rules;\n\
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n\
      rule = _ref[_i];\n\
      rule.destroy();\n\
    }\n\
    return this.rules = [];\n\
  };\n\
\n\
  StyleSheet.prototype.destroy = function() {\n\
    var i;\n\
    i = this.engine.styleSheets.indexOf(this);\n\
    this.engine.styleSheets.splice(i, 1);\n\
    i = GSS.styleSheets.indexOf(this);\n\
    return GSS.styleSheets.splice(i, 1);\n\
  };\n\
\n\
  StyleSheet.prototype.isRemoved = function() {\n\
    if (this.el && !document.contains(this.el)) {\n\
      return true;\n\
    }\n\
    return false;\n\
  };\n\
\n\
  StyleSheet.prototype.needsDumpCSS = false;\n\
\n\
  StyleSheet.prototype.setNeedsDumpCSS = function(bool) {\n\
    if (bool) {\n\
      this.engine.setNeedsDumpCSS(true);\n\
      return this.needsDumpCSS = true;\n\
    } else {\n\
      return this.needsDumpCSS = false;\n\
    }\n\
  };\n\
\n\
  StyleSheet.prototype.dumpCSSIfNeeded = function() {\n\
    if (this.needsDumpCSS) {\n\
      return this.dumpCSS();\n\
    }\n\
  };\n\
\n\
  StyleSheet.prototype.dumpCSS = function() {\n\
    var css, rule, ruleCSS, _i, _len, _ref;\n\
    css = \"\";\n\
    _ref = this.rules;\n\
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n\
      rule = _ref[_i];\n\
      ruleCSS = rule.dumpCSS();\n\
      if (ruleCSS) {\n\
        css = css + ruleCSS;\n\
      }\n\
    }\n\
    return css;\n\
  };\n\
\n\
  return StyleSheet;\n\
\n\
})();\n\
\n\
StyleSheet.fromNode = function(node) {\n\
  var engine, sheet;\n\
  if (node.gssStyleSheet) {\n\
    return node.gssStyleSheet;\n\
  }\n\
  engine = GSS({\n\
    scope: GSS.get.scopeForStyleNode(node)\n\
  });\n\
  sheet = new GSS.StyleSheet({\n\
    el: node,\n\
    engine: engine,\n\
    engineId: engine.id\n\
  });\n\
  node.gssStyleSheet = sheet;\n\
  return sheet;\n\
};\n\
\n\
StyleSheet.Collection = (function() {\n\
  function Collection() {\n\
    var collection, key, val;\n\
    collection = [];\n\
    for (key in this) {\n\
      val = this[key];\n\
      collection[key] = val;\n\
    }\n\
    return collection;\n\
  }\n\
\n\
  Collection.prototype.install = function() {\n\
    var sheet, _i, _len;\n\
    for (_i = 0, _len = this.length; _i < _len; _i++) {\n\
      sheet = this[_i];\n\
      sheet.install();\n\
    }\n\
    return this;\n\
  };\n\
\n\
  Collection.prototype.findAndInstall = function() {\n\
    var node, nodes, sheet, _i, _len;\n\
    nodes = document.querySelectorAll('[type=\"text/gss\"], [type=\"text/gss-ast\"]');\n\
    for (_i = 0, _len = nodes.length; _i < _len; _i++) {\n\
      node = nodes[_i];\n\
      sheet = GSS.StyleSheet.fromNode(node);\n\
      if (sheet != null) {\n\
        sheet.install();\n\
      }\n\
    }\n\
    return this;\n\
  };\n\
\n\
  Collection.prototype.findAllRemoved = function() {\n\
    var removed, sheet, _i, _len;\n\
    removed = [];\n\
    for (_i = 0, _len = this.length; _i < _len; _i++) {\n\
      sheet = this[_i];\n\
      if (sheet.isRemoved()) {\n\
        removed.push(sheet);\n\
      }\n\
    }\n\
    return removed;\n\
  };\n\
\n\
  return Collection;\n\
\n\
})();\n\
\n\
GSS.StyleSheet = StyleSheet;\n\
\n\
GSS.styleSheets = new GSS.StyleSheet.Collection();\n\
\n\
module.exports = StyleSheet;\n\
//@ sourceURL=the-gss-engine/lib/gssom/StyleSheet.js"
));
require.register("the-gss-engine/lib/gssom/Rule.js", Function("exports, require, module",
"var Rule, _rule_cid;\n\
\n\
_rule_cid = 0;\n\
\n\
Rule = (function() {\n\
  Rule.prototype.isRule = true;\n\
\n\
  function Rule(o) {\n\
    var key, val;\n\
    _rule_cid++;\n\
    this.cid = _rule_cid;\n\
    for (key in o) {\n\
      val = o[key];\n\
      this[key] = val;\n\
    }\n\
    this.boundConditionals = [];\n\
    if (this.name === 'else' || this.name === 'elseif' || this.name === \"if\") {\n\
      this.isConditional = true;\n\
    }\n\
    /*\n\
    @rules\n\
    @commands\n\
    @selectors\n\
    @type\n\
    @parent\n\
    @styleSheet\n\
    @isApplied\n\
    */\n\
\n\
    this.rules = [];\n\
    if (o.rules) {\n\
      this.addRules(o.rules);\n\
    }\n\
    this.Type = Rule.types[this.type] || (function() {\n\
      throw new Error(\"Rule type, \" + type + \", not found\");\n\
    })();\n\
    this;\n\
  }\n\
\n\
  Rule.prototype.addRules = function(rules) {\n\
    var r, rule, _i, _len, _results;\n\
    _results = [];\n\
    for (_i = 0, _len = rules.length; _i < _len; _i++) {\n\
      r = rules[_i];\n\
      r.parent = this;\n\
      r.styleSheet = this.styleSheet;\n\
      r.engine = this.engine;\n\
      rule = new GSS.Rule(r);\n\
      _results.push(this.rules.push(rule));\n\
    }\n\
    return _results;\n\
  };\n\
\n\
  Rule.prototype._selectorContext = null;\n\
\n\
  Rule.prototype.needsInstall = true;\n\
\n\
  Rule.prototype.install = function() {\n\
    var rule, _i, _len, _ref;\n\
    if (this.needsInstall) {\n\
      this.needsInstall = false;\n\
      this.Type.install.call(this);\n\
    }\n\
    _ref = this.rules;\n\
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n\
      rule = _ref[_i];\n\
      rule.install();\n\
    }\n\
    return this;\n\
  };\n\
\n\
  Rule.prototype.uninstall = function() {};\n\
\n\
  Rule.prototype.reset = function() {\n\
    var rule, _i, _len, _ref, _results;\n\
    this.needsInstall = true;\n\
    this.boundConditionals = [];\n\
    _ref = this.rules;\n\
    _results = [];\n\
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n\
      rule = _ref[_i];\n\
      _results.push(rule.reset());\n\
    }\n\
    return _results;\n\
  };\n\
\n\
  Rule.prototype.executeCommands = function() {\n\
    if (this.commands) {\n\
      return this.engine.run(this);\n\
    }\n\
  };\n\
\n\
  Rule.prototype.nextSibling = function() {\n\
    var i;\n\
    i = this.parent.rules.indexOf(this);\n\
    return this.parent.rules[i + 1];\n\
  };\n\
\n\
  Rule.prototype.prevSibling = function() {\n\
    var i;\n\
    i = this.parent.rules.indexOf(this);\n\
    return this.parent.rules[i - 1];\n\
  };\n\
\n\
  Rule.prototype.getSelectorContext = function() {\n\
    if (!this._selectorContext) {\n\
      this._selectorContext = this._computeSelectorContext();\n\
    }\n\
    return this._selectorContext;\n\
  };\n\
\n\
  Rule.prototype._computeSelectorContext = function() {\n\
    var $, $$, parent, rule, selectorContext, _context, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;\n\
    selectorContext = [];\n\
    rule = this;\n\
    while (rule.parent) {\n\
      parent = rule.parent;\n\
      if (!parent.isConditional) {\n\
        if ((parent != null ? (_ref = parent.selectors) != null ? _ref.length : void 0 : void 0) > 0) {\n\
          if (selectorContext.length === 0) {\n\
            _ref1 = parent.selectors;\n\
            for (_i = 0, _len = _ref1.length; _i < _len; _i++) {\n\
              $ = _ref1[_i];\n\
              selectorContext.push($);\n\
            }\n\
          } else {\n\
            _context = [];\n\
            _ref2 = parent.selectors;\n\
            for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {\n\
              $ = _ref2[_j];\n\
              for (_k = 0, _len2 = selectorContext.length; _k < _len2; _k++) {\n\
                $$ = selectorContext[_k];\n\
                _context.push($ + \" \" + $$);\n\
              }\n\
            }\n\
            selectorContext = _context;\n\
          }\n\
        }\n\
      }\n\
      rule = parent;\n\
    }\n\
    this.selectorContext = selectorContext;\n\
    return selectorContext;\n\
  };\n\
\n\
  Rule.prototype.getContextQuery = function() {\n\
    if (!this.query) {\n\
      return this.setupContextQuery();\n\
    }\n\
    return this.query;\n\
  };\n\
\n\
  Rule.prototype.setupContextQuery = function() {\n\
    var effectiveSelector, engine;\n\
    effectiveSelector = this.getSelectorContext().join(\", \");\n\
    engine = this.engine;\n\
    return this.query = engine.registerDomQuery({\n\
      selector: effectiveSelector,\n\
      isMulti: true,\n\
      isLive: false,\n\
      createNodeList: function() {\n\
        return engine.queryScope.querySelectorAll(effectiveSelector);\n\
      }\n\
    });\n\
  };\n\
\n\
  Rule.prototype.gatherCondCommand = function() {\n\
    var command, next, nextIsConditional;\n\
    command = [\"cond\"];\n\
    next = this;\n\
    nextIsConditional = true;\n\
    while (nextIsConditional) {\n\
      command.push(next.getClauseCommand());\n\
      next = next.nextSibling();\n\
      nextIsConditional = next != null ? next.isConditional : void 0;\n\
    }\n\
    return command;\n\
  };\n\
\n\
  Rule.prototype.getClauseCommand = function() {\n\
    return [\"clause\", this.clause, this.getClauseTracker()];\n\
  };\n\
\n\
  Rule.prototype.getClauseTracker = function() {\n\
    return \"gss-cond-\" + this.cid;\n\
  };\n\
\n\
  Rule.prototype.injectChildrenCondtionals = function(conditional) {\n\
    var command, rule, _i, _j, _len, _len1, _ref, _ref1, _results;\n\
    _ref = this.rules;\n\
    _results = [];\n\
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n\
      rule = _ref[_i];\n\
      rule.boundConditionals.push(conditional);\n\
      if (rule.commands) {\n\
        _ref1 = rule.commands;\n\
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {\n\
          command = _ref1[_j];\n\
          command.push([\"where\", conditional.getClauseTracker()]);\n\
        }\n\
      }\n\
      rule.isCondtionalBound = true;\n\
      _results.push(rule.injectChildrenCondtionals(conditional));\n\
    }\n\
    return _results;\n\
  };\n\
\n\
  Rule.prototype.setNeedsDumpCSS = function(bool) {\n\
    if (bool) {\n\
      return this.styleSheet.setNeedsDumpCSS(true);\n\
    }\n\
  };\n\
\n\
  Rule.prototype.dumpCSS = function() {\n\
    var css, rule, ruleCSS, _i, _len, _ref, _ref1;\n\
    css = (_ref = this.Type.dumpCSS) != null ? _ref.call(this) : void 0;\n\
    _ref1 = this.rules;\n\
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {\n\
      rule = _ref1[_i];\n\
      ruleCSS = rule.dumpCSS();\n\
      if (ruleCSS) {\n\
        css = css + ruleCSS;\n\
      }\n\
    }\n\
    return css;\n\
  };\n\
\n\
  return Rule;\n\
\n\
})();\n\
\n\
Rule.types = {\n\
  directive: {\n\
    install: function() {\n\
      if (this.name === 'else' || this.name === 'elseif') {\n\
        this.injectChildrenCondtionals(this);\n\
        return this;\n\
      } else if (this.name === 'if') {\n\
        this.commands = [this.gatherCondCommand()];\n\
        this.injectChildrenCondtionals(this);\n\
        return this.executeCommands();\n\
      } else {\n\
        return this.executeCommands();\n\
      }\n\
    }\n\
  },\n\
  constraint: {\n\
    install: function() {\n\
      return this.executeCommands();\n\
    }\n\
  },\n\
  style: {\n\
    install: function() {\n\
      return this.setNeedsDumpCSS(true);\n\
    },\n\
    dumpCSS: function() {}\n\
  },\n\
  ruleset: {\n\
    install: function() {},\n\
    dumpCSS: function() {\n\
      var css, effectiveSelector, foundStyle, rule, _i, _len, _ref;\n\
      foundStyle = false;\n\
      css = \"\";\n\
      effectiveSelector = null;\n\
      _ref = this.rules;\n\
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n\
        rule = _ref[_i];\n\
        if (rule.type === \"style\") {\n\
          if (!foundStyle) {\n\
            effectiveSelector = rule.getSelectorContext().join(\", \");\n\
            foundStyle = true;\n\
          }\n\
          css = css + rule.key + \":\" + rule.val + \";\";\n\
        }\n\
      }\n\
      if (foundStyle) {\n\
        css = effectiveSelector + \"{\" + css + \"}\";\n\
      }\n\
      return css;\n\
    }\n\
  }\n\
};\n\
\n\
module.exports = Rule;\n\
//@ sourceURL=the-gss-engine/lib/gssom/Rule.js"
));
require.register("the-gss-engine/lib/Engine.js", Function("exports, require, module",
"var Engine, LOG, TIME, TIME_END, engines, _,\n\
  __slice = [].slice,\n\
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n\
  __hasProp = {}.hasOwnProperty,\n\
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\
\n\
if (typeof GSS === \"undefined\" || GSS === null) {\n\
  throw new Error(\"GSS object needed for Engine\");\n\
}\n\
\n\
_ = GSS._;\n\
\n\
TIME = function() {\n\
  if (GSS.config.perf) {\n\
    return console.time.apply(console, arguments);\n\
  }\n\
};\n\
\n\
TIME_END = function() {\n\
  if (GSS.config.perf) {\n\
    return console.timeEnd.apply(console, arguments);\n\
  }\n\
};\n\
\n\
LOG = function() {\n\
  return GSS.deblog.apply(GSS, [\"Engine\"].concat(__slice.call(arguments)));\n\
};\n\
\n\
GSS.engines = engines = [];\n\
\n\
engines.byId = {};\n\
\n\
engines.root = null;\n\
\n\
Engine = (function(_super) {\n\
  __extends(Engine, _super);\n\
\n\
  function Engine(o) {\n\
    if (o == null) {\n\
      o = {};\n\
    }\n\
    this.dispatch = __bind(this.dispatch, this);\n\
    this.updateQueries = __bind(this.updateQueries, this);\n\
    this.handleWorkerMessage = __bind(this.handleWorkerMessage, this);\n\
    this.reset = __bind(this.reset, this);\n\
    Engine.__super__.constructor.apply(this, arguments);\n\
    this.scope = o.scope, this.workerURL = o.workerURL, this.vars = o.vars, this.getter = o.getter, this.is_root = o.is_root, this.useWorker = o.useWorker;\n\
    if (!this.vars) {\n\
      this.vars = {};\n\
    }\n\
    this.clauses = null;\n\
    if (!GSS.config.useWorker) {\n\
      this.useWorker = false;\n\
    } else {\n\
      if (this.useWorker == null) {\n\
        this.useWorker = true;\n\
      }\n\
    }\n\
    this.worker = null;\n\
    this.workerCommands = [];\n\
    this.workerMessageHistory = [];\n\
    if (!this.workerURL) {\n\
      this.workerURL = GSS.config.worker;\n\
    }\n\
    if (this.scope) {\n\
      if (this.scope.tagName === \"HEAD\") {\n\
        this.scope = document;\n\
      }\n\
      this.id = GSS.setupScopeId(this.scope);\n\
      if (this.scope === GSS.Getter.getRootScope()) {\n\
        this.queryScope = document;\n\
      } else {\n\
        this.queryScope = this.scope;\n\
      }\n\
    } else {\n\
      this.id = GSS.uid();\n\
      this.queryScope = document;\n\
    }\n\
    if (!this.getter) {\n\
      this.getter = new GSS.Getter(this.scope);\n\
    }\n\
    this.commander = new GSS.Commander(this);\n\
    this.lastWorkerCommands = null;\n\
    this.queryCache = {};\n\
    this.cssDump = null;\n\
    GSS.engines.push(this);\n\
    engines.byId[this.id] = this;\n\
    this._Hierarchy_setup();\n\
    this._StyleSheets_setup();\n\
    LOG(\"constructor() @\", this);\n\
    this;\n\
  }\n\
\n\
  Engine.prototype.getVarsById = function(vars) {\n\
    var varsById;\n\
    if (GSS.config.processBeforeSet) {\n\
      vars = GSS.config.processBeforeSet(vars);\n\
    }\n\
    return varsById = _.varsByViewId(_.filterVarsForDisplay(vars));\n\
  };\n\
\n\
  Engine.prototype.isDescendantOf = function(engine) {\n\
    var parentEngine;\n\
    parentEngine = this.parentEngine;\n\
    while (parentEngine) {\n\
      if (parentEngine === engine) {\n\
        return true;\n\
      }\n\
      parentEngine = parentEngine.parentEngine;\n\
    }\n\
    return false;\n\
  };\n\
\n\
  Engine.prototype._Hierarchy_setup = function() {\n\
    var _ref;\n\
    this.childEngines = [];\n\
    this.parentEngine = null;\n\
    if (this.is_root) {\n\
      engines.root = this;\n\
    } else if (this.scope) {\n\
      this.parentEngine = GSS.get.nearestEngine(this.scope, true);\n\
    } else {\n\
      this.parentEngine = engines.root;\n\
    }\n\
    if (!this.parentEngine && !this.is_root) {\n\
      throw new Error(\"ParentEngine missing, WTF\");\n\
    }\n\
    return (_ref = this.parentEngine) != null ? _ref.childEngines.push(this) : void 0;\n\
  };\n\
\n\
  Engine.prototype._Hierarchy_destroy = function() {\n\
    this.parentEngine.childEngines.splice(this.parentEngine.childEngines.indexOf(this), 1);\n\
    return this.parentEngine = null;\n\
  };\n\
\n\
  Engine.prototype.is_running = false;\n\
\n\
  Engine.prototype.run = function(asts) {\n\
    var ast, _i, _len, _results;\n\
    LOG(this.id, \".run(asts)\", asts);\n\
    if (asts instanceof Array) {\n\
      _results = [];\n\
      for (_i = 0, _len = asts.length; _i < _len; _i++) {\n\
        ast = asts[_i];\n\
        _results.push(this._run(ast));\n\
      }\n\
      return _results;\n\
    } else {\n\
      return this._run(asts);\n\
    }\n\
  };\n\
\n\
  Engine.prototype._run = function(ast) {\n\
    return this.commander.execute(ast);\n\
  };\n\
\n\
  Engine.prototype._StyleSheets_setup = function() {\n\
    return this.styleSheets = [];\n\
  };\n\
\n\
  Engine.prototype.load = function() {\n\
    var sheet, _i, _len, _ref, _results;\n\
    if (!this.scope) {\n\
      throw new Error(\"can't load scopeless engine\");\n\
    }\n\
    if (this.is_running) {\n\
      this.clean();\n\
    }\n\
    _ref = this.styleSheets;\n\
    _results = [];\n\
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n\
      sheet = _ref[_i];\n\
      _results.push(sheet.execute());\n\
    }\n\
    return _results;\n\
  };\n\
\n\
  Engine.prototype.reset = function() {\n\
    var sheet, styleSheets, _i, _len;\n\
    LOG(this.id, \".reset()\");\n\
    if (!this.scope) {\n\
      throw new Error(\"can't reset scopeless engine\");\n\
    }\n\
    styleSheets = this.styleSheets;\n\
    if (this.is_running) {\n\
      this.clean();\n\
    }\n\
    this.styleSheets = styleSheets;\n\
    for (_i = 0, _len = styleSheets.length; _i < _len; _i++) {\n\
      sheet = styleSheets[_i];\n\
      sheet.reset();\n\
    }\n\
    this.setNeedsUpdate(true);\n\
    return this;\n\
  };\n\
\n\
  Engine.prototype.registerCommands = function(commands) {\n\
    var command, _i, _len, _results;\n\
    _results = [];\n\
    for (_i = 0, _len = commands.length; _i < _len; _i++) {\n\
      command = commands[_i];\n\
      _results.push(this.registerCommand(command));\n\
    }\n\
    return _results;\n\
  };\n\
\n\
  Engine.prototype.registerCommand = function(command) {\n\
    this.workerCommands.push(command);\n\
    this.setNeedsLayout(true);\n\
    return this;\n\
  };\n\
\n\
  Engine.prototype.cssToDump = null;\n\
\n\
  Engine.prototype.cssDump = null;\n\
\n\
  Engine.prototype.setupCSSDumpIfNeeded = function() {\n\
    var dumpNode;\n\
    dumpNode = this.scope || document.body;\n\
    if (!this.cssDump) {\n\
      this.cssDump = document.createElement(\"style\");\n\
      this.cssDump.id = \"gss-css-dump-\" + this.id;\n\
      return dumpNode.appendChild(this.cssDump);\n\
    }\n\
  };\n\
\n\
  Engine.prototype.needsDumpCSS = false;\n\
\n\
  Engine.prototype.setNeedsDumpCSS = function(bool) {\n\
    if (bool) {\n\
      this.setNeedsLayout(true);\n\
      return this.needsDumpCSS = true;\n\
    } else {\n\
      return this.needsDumpCSS = false;\n\
    }\n\
  };\n\
\n\
  Engine.prototype.dumpCSSIfNeeded = function() {\n\
    var css, sheet, sheetCSS, _i, _len, _ref;\n\
    if (this.needsDumpCSS) {\n\
      this.needsDumpCSS = false;\n\
      this.setupCSSDumpIfNeeded();\n\
      css = \"\";\n\
      _ref = this.styleSheets;\n\
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n\
        sheet = _ref[_i];\n\
        sheetCSS = sheet.dumpCSSIfNeeded();\n\
        if (sheetCSS) {\n\
          css = css + sheetCSS;\n\
        }\n\
      }\n\
      if (css.length > 0) {\n\
        return this.cssDump.innerHTML = css;\n\
      }\n\
    }\n\
  };\n\
\n\
  Engine.prototype._CSSDumper_clean = function() {\n\
    var _ref;\n\
    return (_ref = this.cssDump) != null ? _ref.innerHTML = \"\" : void 0;\n\
  };\n\
\n\
  Engine.prototype._CSSDumper_destroy = function() {\n\
    this.needsDumpCSS = false;\n\
    return this.cssDump = null;\n\
  };\n\
\n\
  Engine.prototype.needsUpdate = false;\n\
\n\
  Engine.prototype.setNeedsUpdate = function(bool) {\n\
    if (bool) {\n\
      GSS.setNeedsUpdate(true);\n\
      return this.needsUpdate = true;\n\
    } else {\n\
      return this.needsUpdate = false;\n\
    }\n\
  };\n\
\n\
  Engine.prototype.updateIfNeeded = function() {\n\
    var child, _i, _len, _ref, _results;\n\
    if (this.needsUpdate) {\n\
      if (this.ASTs) {\n\
        this.run(this.ASTs);\n\
        this.ASTs = null;\n\
      }\n\
      this.setNeedsUpdate(false);\n\
    }\n\
    _ref = this.childEngines;\n\
    _results = [];\n\
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n\
      child = _ref[_i];\n\
      _results.push(child.updateIfNeeded());\n\
    }\n\
    return _results;\n\
  };\n\
\n\
  Engine.prototype.needsLayout = false;\n\
\n\
  Engine.prototype.setNeedsLayout = function(bool) {\n\
    if (bool) {\n\
      if (!this.needsLayout) {\n\
        GSS.setNeedsLayout(true);\n\
        return this.needsLayout = true;\n\
      }\n\
    } else {\n\
      return this.needsLayout = false;\n\
    }\n\
  };\n\
\n\
  Engine.prototype._beforeLayoutCalls = null;\n\
\n\
  Engine.prototype.layout = function() {\n\
    this.hoistedTrigger(\"beforeLayout\", this);\n\
    this.is_running = true;\n\
    TIME(\"\" + this.id + \" LAYOUT & DISPLAY\");\n\
    this.solve();\n\
    return this.setNeedsLayout(false);\n\
  };\n\
\n\
  Engine.prototype.layoutIfNeeded = function() {\n\
    if (this.needsLayout) {\n\
      this.layout();\n\
    }\n\
    return this.layoutSubTreeIfNeeded();\n\
  };\n\
\n\
  Engine.prototype.waitingToLayoutSubtree = false;\n\
\n\
  Engine.prototype.layoutSubTreeIfNeeded = function() {\n\
    var child, _i, _len, _ref, _results;\n\
    this.waitingToLayoutSubtree = false;\n\
    _ref = this.childEngines;\n\
    _results = [];\n\
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n\
      child = _ref[_i];\n\
      _results.push(child.layoutIfNeeded());\n\
    }\n\
    return _results;\n\
  };\n\
\n\
  Engine.prototype.needsDisplay = false;\n\
\n\
  Engine.prototype.setNeedsDisplay = function(bool) {\n\
    if (bool) {\n\
      GSS.setNeedsDisplay(true);\n\
      return this.needsDisplay = true;\n\
    } else {\n\
      return this.needsDisplay = false;\n\
    }\n\
  };\n\
\n\
  /*\n\
  displayIfNeeded: () ->\n\
    LOG @, \"displayIfNeeded\"\n\
    if @needsDisplay #@workerCommands.length > 0\n\
      @display(@vars)      \n\
      @setNeedsDisplay false\n\
    for child in @childEngines\n\
      child.displayIfNeeded()\n\
  */\n\
\n\
\n\
  Engine.prototype.display = function(data, forceViewCacheById) {\n\
    var el, id, needsToDisplayViews, obj, vars, varsById, _ref;\n\
    if (forceViewCacheById == null) {\n\
      forceViewCacheById = false;\n\
    }\n\
    vars = data.values;\n\
    LOG(this.id, \".display()\");\n\
    this.hoistedTrigger(\"beforeDisplay\", this);\n\
    GSS.unobserve();\n\
    varsById = this.getVarsById(vars);\n\
    needsToDisplayViews = false;\n\
    for (id in varsById) {\n\
      obj = varsById[id];\n\
      needsToDisplayViews = true;\n\
      if (forceViewCacheById) {\n\
        el = document.getElementById(id);\n\
        if (el) {\n\
          GSS.setupId(el);\n\
        }\n\
      }\n\
      if ((_ref = GSS.View.byId[id]) != null) {\n\
        if (typeof _ref.updateValues === \"function\") {\n\
          _ref.updateValues(obj);\n\
        }\n\
      }\n\
    }\n\
    this.dumpCSSIfNeeded();\n\
    if (needsToDisplayViews) {\n\
      if (this.scope) {\n\
        GSS.get.view(this.scope).displayIfNeeded();\n\
      }\n\
    }\n\
    if (!this.isMeasuring && this.needsMeasure) {\n\
      this.measureIfNeeded();\n\
      if (!this.needsLayout) {\n\
        this._didDisplay();\n\
      }\n\
    } else {\n\
      this._didDisplay();\n\
    }\n\
    GSS.observe();\n\
    this.dispatchedTrigger(\"solved\", {\n\
      values: vars\n\
    });\n\
    TIME_END(\"\" + this.id + \" LAYOUT & DISPLAY\");\n\
    return this;\n\
  };\n\
\n\
  Engine.prototype._didDisplay = function() {\n\
    this.trigger(\"display\");\n\
    GSS.onDisplay();\n\
    return this.isMeasuring = false;\n\
  };\n\
\n\
  Engine.prototype.forceDisplay = function(vars) {};\n\
\n\
  Engine.prototype.updateClauses = function(clauses) {\n\
    var clause, html, nue, old, _i, _j, _k, _len, _len1, _len2;\n\
    html = GSS.html;\n\
    old = this.clauses;\n\
    nue = clauses;\n\
    if (old) {\n\
      for (_i = 0, _len = old.length; _i < _len; _i++) {\n\
        clause = old[_i];\n\
        if (nue.indexOf(clause) === -1) {\n\
          html.classList.remove(clause);\n\
        }\n\
      }\n\
      for (_j = 0, _len1 = nue.length; _j < _len1; _j++) {\n\
        clause = nue[_j];\n\
        if (old.indexOf(clause) === -1) {\n\
          html.classList.add(clause);\n\
        }\n\
      }\n\
    } else {\n\
      for (_k = 0, _len2 = nue.length; _k < _len2; _k++) {\n\
        clause = nue[_k];\n\
        html.classList.add(clause);\n\
      }\n\
    }\n\
    return this.clauses = nue;\n\
  };\n\
\n\
  Engine.prototype.isMeasuring = false;\n\
\n\
  Engine.prototype.needsMeasure = false;\n\
\n\
  Engine.prototype.setNeedsMeasure = function(bool) {\n\
    if (bool) {\n\
      return this.needsMeasure = true;\n\
    } else {\n\
      return this.needsMeasure = false;\n\
    }\n\
  };\n\
\n\
  Engine.prototype.measureIfNeeded = function() {\n\
    if (this.needsMeasure) {\n\
      this.isMeasuring = true;\n\
      this.needsMeasure = false;\n\
      return this.measure();\n\
    }\n\
  };\n\
\n\
  Engine.prototype.measure = function() {\n\
    return this.commander.validateMeasures();\n\
  };\n\
\n\
  Engine.prototype.measureByGssId = function(id, prop) {\n\
    var el, val;\n\
    el = GSS.getById(id);\n\
    val = this.getter.measure(el, prop);\n\
    LOG(this.id, \".measureByGssId()\", id, prop, val);\n\
    return val;\n\
  };\n\
\n\
  Engine.prototype.solve = function() {\n\
    if (this.useWorker) {\n\
      return this.solveWithWorker();\n\
    } else {\n\
      return this.solveWithoutWorker();\n\
    }\n\
  };\n\
\n\
  Engine.prototype.solveWithWorker = function() {\n\
    var workerMessage;\n\
    LOG(this.id, \".solveWithWorker()\", this.workerCommands);\n\
    workerMessage = {\n\
      commands: this.workerCommands\n\
    };\n\
    this.workerMessageHistory.push(workerMessage);\n\
    if (!this.worker) {\n\
      this.worker = new Worker(this.workerURL);\n\
      this.worker.addEventListener(\"message\", this.handleWorkerMessage, false);\n\
      this.worker.addEventListener(\"error\", this.handleError, false);\n\
      workerMessage.config = {\n\
        defaultStrength: GSS.config.defaultStrength,\n\
        defaultWeight: GSS.config.defaultWeight\n\
      };\n\
    }\n\
    this.worker.postMessage(workerMessage);\n\
    this.lastWorkerCommands = this.workerCommands;\n\
    return this.workerCommands = [];\n\
  };\n\
\n\
  Engine.prototype.solveWithoutWorker = function() {\n\
    var workerMessage,\n\
      _this = this;\n\
    LOG(this.id, \".solveWithoutWorker()\", this.workerCommands);\n\
    workerMessage = {\n\
      commands: this.workerCommands\n\
    };\n\
    this.workerMessageHistory.push(workerMessage);\n\
    if (!this.worker) {\n\
      this.worker = new GSS.Thread({\n\
        defaultStrength: GSS.config.defaultStrength,\n\
        defaultWeight: GSS.config.defaultWeight\n\
      });\n\
    }\n\
    this.worker.postMessage(_.cloneDeep(workerMessage));\n\
    _.defer(function() {\n\
      if (_this.worker) {\n\
        return _this.handleWorkerMessage({\n\
          data: _this.worker.output()\n\
        });\n\
      }\n\
    });\n\
    this.lastWorkerCommands = this.workerCommands;\n\
    return this.workerCommands = [];\n\
  };\n\
\n\
  Engine.prototype.handleWorkerMessage = function(message) {\n\
    LOG(this.id, \".handleWorkerMessage()\", this.workerCommands);\n\
    this.vars = message.data.values;\n\
    return this.display(message.data);\n\
  };\n\
\n\
  Engine.prototype.handleError = function(event) {\n\
    if (this.onError) {\n\
      return this.onError(event);\n\
    }\n\
    throw new Error(\"\" + event.message + \" (\" + event.filename + \":\" + event.lineno + \")\");\n\
  };\n\
\n\
  Engine.prototype._Worker_destroy = function() {\n\
    if (this.worker) {\n\
      this.worker.terminate();\n\
      this.worker = null;\n\
    }\n\
    this.workerCommands = null;\n\
    this.workerMessageHistory = null;\n\
    return this.lastWorkerCommands = null;\n\
  };\n\
\n\
  Engine.prototype._Worker_clean = function() {\n\
    this.workerCommands = [];\n\
    this.lastWorkerCommands = null;\n\
    if (this.worker) {\n\
      this.worker.terminate();\n\
      return this.worker = null;\n\
    }\n\
  };\n\
\n\
  Engine.prototype.getDomQuery = function(selector) {\n\
    return this.queryCache[selector];\n\
  };\n\
\n\
  Engine.prototype.registerDomQuery = function(o) {\n\
    var query, selector;\n\
    selector = o.selector;\n\
    query = this.getDomQuery(selector);\n\
    if (!query) {\n\
      query = new GSS.Query(o);\n\
      query.update();\n\
      this.queryCache[selector] = query;\n\
    }\n\
    return query;\n\
  };\n\
\n\
  Engine.prototype.updateQueries = function() {\n\
    var el, globalRemoves, query, removedIds, removes, rid, selector, selectorsWithAdds, trigger, _i, _len, _ref;\n\
    selectorsWithAdds = [];\n\
    removes = [];\n\
    globalRemoves = [];\n\
    trigger = false;\n\
    _ref = this.queryCache;\n\
    for (selector in _ref) {\n\
      query = _ref[selector];\n\
      query.update();\n\
      if (query.changedLastUpdate) {\n\
        if (query.lastAddedIds.length > 0) {\n\
          selectorsWithAdds.push(selector);\n\
          trigger = true;\n\
        }\n\
        if (query.lastRemovedIds.length > 0) {\n\
          trigger = true;\n\
          removedIds = query.lastRemovedIds;\n\
          for (_i = 0, _len = removedIds.length; _i < _len; _i++) {\n\
            rid = removedIds[_i];\n\
            if (globalRemoves.indexOf(rid) === -1) {\n\
              el = GSS.getById(rid);\n\
              if (document.documentElement.contains(el)) {\n\
                globalRemoves.push(rid);\n\
                removes.push(selector + \"$\" + rid);\n\
              } else {\n\
                removes.push(\"$\" + rid);\n\
              }\n\
            }\n\
          }\n\
        }\n\
      }\n\
    }\n\
    GSS._ids_killed(globalRemoves);\n\
    if (trigger) {\n\
      this.commander.handleRemoves(removes);\n\
      this.commander.handleSelectorsWithAdds(selectorsWithAdds);\n\
    }\n\
    return trigger;\n\
  };\n\
\n\
  Engine.prototype._Queries_destroy = function() {\n\
    var query, selector, _ref;\n\
    _ref = this.queryCache;\n\
    for (selector in _ref) {\n\
      query = _ref[selector];\n\
      query.destroy();\n\
      this.queryCache[selector] = null;\n\
    }\n\
    return this.queryCache = null;\n\
  };\n\
\n\
  Engine.prototype._Queries_clean = function() {\n\
    var query, selector, _ref;\n\
    _ref = this.queryCache;\n\
    for (selector in _ref) {\n\
      query = _ref[selector];\n\
      query.destroy();\n\
      this.queryCache[selector] = null;\n\
    }\n\
    return this.queryCache = {};\n\
  };\n\
\n\
  Engine.prototype.hoistedTrigger = function(ev, obj) {\n\
    this.trigger(ev, obj);\n\
    return GSS.trigger(\"engine:\" + ev, obj);\n\
  };\n\
\n\
  Engine.prototype.dispatchedTrigger = function(e, o, b, c) {\n\
    this.trigger(e, o);\n\
    return this.dispatch(e, o, b, c);\n\
  };\n\
\n\
  Engine.prototype.dispatch = function(eName, oDetail, bubbles, cancelable) {\n\
    var e, o;\n\
    if (oDetail == null) {\n\
      oDetail = {};\n\
    }\n\
    if (bubbles == null) {\n\
      bubbles = true;\n\
    }\n\
    if (cancelable == null) {\n\
      cancelable = true;\n\
    }\n\
    if (!this.scope) {\n\
      return;\n\
    }\n\
    oDetail.engine = this;\n\
    o = {\n\
      detail: oDetail,\n\
      bubbles: bubbles,\n\
      cancelable: cancelable\n\
    };\n\
    e = new CustomEvent(eName, o);\n\
    return this.scope.dispatchEvent(e);\n\
  };\n\
\n\
  Engine.prototype.clean = function() {\n\
    var key, val, _base, _ref;\n\
    LOG(this.id, \".clean()\");\n\
    _ref = this.vars;\n\
    for (key in _ref) {\n\
      val = _ref[key];\n\
      delete this.vars[key];\n\
    }\n\
    this.setNeedsLayout(false);\n\
    this.setNeedsDisplay(false);\n\
    this.setNeedsLayout(false);\n\
    this.setNeedsMeasure(false);\n\
    this.isMeasuring = false;\n\
    this.waitingToLayoutSubtree = false;\n\
    this.commander.clean();\n\
    if (typeof (_base = this.getter).clean === \"function\") {\n\
      _base.clean();\n\
    }\n\
    this._CSSDumper_clean();\n\
    this._Worker_clean();\n\
    this._Queries_clean();\n\
    return this;\n\
  };\n\
\n\
  Engine.prototype.is_destroyed = false;\n\
\n\
  Engine.prototype.destroyChildren = function() {\n\
    var e, _i, _len, _ref, _results;\n\
    _ref = this.childEngines;\n\
    _results = [];\n\
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n\
      e = _ref[_i];\n\
      if (!e.is_destroyed) {\n\
        _results.push(e.destroy());\n\
      } else {\n\
        _results.push(void 0);\n\
      }\n\
    }\n\
    return _results;\n\
  };\n\
\n\
  Engine.prototype.destroy = function() {\n\
    var d, descdendants, i, kill, _base, _i, _len;\n\
    LOG(this.id, \".destroy()\");\n\
    this.hoistedTrigger(\"beforeDestroy\", this);\n\
    GSS._ids_killed([this.id]);\n\
    if (this.scope) {\n\
      descdendants = GSS.get.descdendantNodes(this.scope);\n\
      for (_i = 0, _len = descdendants.length; _i < _len; _i++) {\n\
        d = descdendants[_i];\n\
        kill = d._gss_id;\n\
        if (kill) {\n\
          GSS._id_killed(kill);\n\
        }\n\
      }\n\
    }\n\
    i = engines.indexOf(this);\n\
    if (i > -1) {\n\
      engines.splice(i, 1);\n\
    }\n\
    delete engines.byId[this.id];\n\
    this.offAll();\n\
    this.setNeedsLayout(false);\n\
    this.setNeedsDisplay(false);\n\
    this.setNeedsLayout(false);\n\
    this.waitingToLayoutSubtree = false;\n\
    this.commander.destroy();\n\
    if (typeof (_base = this.getter).destroy === \"function\") {\n\
      _base.destroy();\n\
    }\n\
    this.vars = null;\n\
    this.clauses = null;\n\
    this.ast = null;\n\
    this.getter = null;\n\
    this.scope = null;\n\
    this.commander = null;\n\
    this._Hierarchy_destroy();\n\
    this._CSSDumper_destroy();\n\
    this._Worker_destroy();\n\
    this._Queries_destroy();\n\
    this.is_running = null;\n\
    this.is_destroyed = true;\n\
    return this;\n\
  };\n\
\n\
  Engine.prototype.elVar = function(el, key, selector, tracker2) {\n\
    var ast, gid, varid;\n\
    gid = \"$\" + GSS.getId(el);\n\
    if (key === 'left') {\n\
      key = 'x';\n\
    } else if (key === 'top') {\n\
      key = 'y';\n\
    }\n\
    varid = gid + (\"[\" + key + \"]\");\n\
    ast = ['get$', key, gid, selector];\n\
    if (tracker2) {\n\
      ast.push(tracker2);\n\
    }\n\
    return ast;\n\
  };\n\
\n\
  Engine.prototype[\"var\"] = function(key) {\n\
    return ['get', key];\n\
  };\n\
\n\
  Engine.prototype.varexp = function(key, exp, tracker) {\n\
    return ['get', key];\n\
  };\n\
\n\
  Engine.prototype.__e = function(key) {\n\
    if (key instanceof Array) {\n\
      return key;\n\
    }\n\
    if (!!Number(key) || (Number(key) === 0)) {\n\
      return ['number', key];\n\
    }\n\
    return this[\"var\"](key);\n\
  };\n\
\n\
  Engine.prototype._addconstraint = function(op, e1, e2, s, w, more) {\n\
    var command, m, _i, _len;\n\
    e1 = this.__e(e1);\n\
    e2 = this.__e(e2);\n\
    command = ['eq', e1, e2];\n\
    if (s) {\n\
      command.push(s);\n\
    }\n\
    if (w) {\n\
      command.push(w);\n\
    }\n\
    if (more) {\n\
      for (_i = 0, _len = more.length; _i < _len; _i++) {\n\
        m = more[_i];\n\
        command.push(m);\n\
      }\n\
    }\n\
    return this.registerCommand(command);\n\
  };\n\
\n\
  Engine.prototype.eq = function(e1, e2, s, w, more) {\n\
    return this._addconstraint('eq', e1, e2, s, w, more);\n\
  };\n\
\n\
  Engine.prototype.lte = function(e1, e2, s, w, more) {\n\
    return this._addconstraint('lte', e1, e2, s, w, more);\n\
  };\n\
\n\
  Engine.prototype.gte = function(e1, e2, s, w, more) {\n\
    return this._addconstraint('gte', e1, e2, s, w, more);\n\
  };\n\
\n\
  Engine.prototype.suggest = function(v, val, strength) {\n\
    if (strength == null) {\n\
      strength = 'required';\n\
    }\n\
    v = this.__e(v);\n\
    return this.registerCommand(['suggest', v, ['number', val], strength]);\n\
  };\n\
\n\
  Engine.prototype.stay = function(v) {\n\
    v = this.__e(v);\n\
    return this.registerCommand(['stay', v]);\n\
  };\n\
\n\
  Engine.prototype.remove = function(tracker) {\n\
    return this.registerCommand(['remove', tracker]);\n\
  };\n\
\n\
  Engine.prototype['number'] = function(num) {\n\
    return ['number', num];\n\
  };\n\
\n\
  Engine.prototype['plus'] = function(e1, e2) {\n\
    e1 = this.__e(e1);\n\
    e2 = this.__e(e2);\n\
    return ['plus', e1, e2];\n\
  };\n\
\n\
  Engine.prototype['minus'] = function(e1, e2) {\n\
    e1 = this.__e(e1);\n\
    e2 = this.__e(e2);\n\
    return ['minus', e1, e2];\n\
  };\n\
\n\
  Engine.prototype['multiply'] = function(e1, e2) {\n\
    e1 = this.__e(e1);\n\
    e2 = this.__e(e2);\n\
    return ['multiply', e1, e2];\n\
  };\n\
\n\
  Engine.prototype['divide'] = function(e1, e2, s, w) {\n\
    e1 = this.__e(e1);\n\
    e2 = this.__e(e2);\n\
    return ['divide', e1, e2];\n\
  };\n\
\n\
  return Engine;\n\
\n\
})(GSS.EventTrigger);\n\
\n\
module.exports = Engine;\n\
//@ sourceURL=the-gss-engine/lib/Engine.js"
));
require.register("the-gss-engine/lib/Commander.js", Function("exports, require, module",
"/*\n\
\n\
Root commands, if bound to a dom query, will spawn commands\n\
to match live results of query.\n\
*/\n\
\n\
var Commander, bindRoot, bindRootAsContext, bindRootAsMulti,\n\
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n\
  __slice = [].slice;\n\
\n\
bindRoot = function(root, query) {\n\
  root.isQueryBound = true;\n\
  if (!root.queries) {\n\
    root.queries = [query];\n\
  } else if (root.queries.indexOf(query) === -1) {\n\
    root.queries.push(query);\n\
  }\n\
  return root;\n\
};\n\
\n\
bindRootAsMulti = function(root, query) {\n\
  bindRoot(root, query);\n\
  if (root.queries.multi && root.queries.multi !== query) {\n\
    throw new Error(\"bindRoot:: only one multiquery per statement\");\n\
  }\n\
  return root.queries.multi = query;\n\
};\n\
\n\
bindRootAsContext = function(root, query) {\n\
  bindRoot(root, query);\n\
  return root.isContextBound = true;\n\
};\n\
\n\
Commander = (function() {\n\
  function Commander(engine) {\n\
    this.engine = engine;\n\
    this['js'] = __bind(this['js'], this);\n\
    this['for-all'] = __bind(this['for-all'], this);\n\
    this['for-each'] = __bind(this['for-each'], this);\n\
    this._e_for_chain = __bind(this._e_for_chain, this);\n\
    this._chainer_math = __bind(this._chainer_math, this);\n\
    this['divide-chain'] = __bind(this['divide-chain'], this);\n\
    this['multiply-chain'] = __bind(this['multiply-chain'], this);\n\
    this['minus-chain'] = __bind(this['minus-chain'], this);\n\
    this['plus-chain'] = __bind(this['plus-chain'], this);\n\
    this._chainer = __bind(this._chainer, this);\n\
    this['gt-chain'] = __bind(this['gt-chain'], this);\n\
    this['lt-chain'] = __bind(this['lt-chain'], this);\n\
    this['gte-chain'] = __bind(this['gte-chain'], this);\n\
    this['lte-chain'] = __bind(this['lte-chain'], this);\n\
    this['eq-chain'] = __bind(this['eq-chain'], this);\n\
    this['chain'] = __bind(this['chain'], this);\n\
    this['$reserved'] = __bind(this['$reserved'], this);\n\
    this['$id'] = __bind(this['$id'], this);\n\
    this['$tag'] = __bind(this['$tag'], this);\n\
    this['$class'] = __bind(this['$class'], this);\n\
    this['$virtual'] = __bind(this['$virtual'], this);\n\
    this['virtual'] = __bind(this['virtual'], this);\n\
    this['stay'] = __bind(this['stay'], this);\n\
    this['gt'] = __bind(this['gt'], this);\n\
    this['lt'] = __bind(this['lt'], this);\n\
    this['gte'] = __bind(this['gte'], this);\n\
    this['lte'] = __bind(this['lte'], this);\n\
    this['eq'] = __bind(this['eq'], this);\n\
    this['suggest'] = __bind(this['suggest'], this);\n\
    this['strength'] = __bind(this['strength'], this);\n\
    this[\"||\"] = __bind(this[\"||\"], this);\n\
    this[\"&&\"] = __bind(this[\"&&\"], this);\n\
    this[\"?<\"] = __bind(this[\"?<\"], this);\n\
    this[\"?>\"] = __bind(this[\"?>\"], this);\n\
    this[\"?!=\"] = __bind(this[\"?!=\"], this);\n\
    this[\"?==\"] = __bind(this[\"?==\"], this);\n\
    this[\"?<=\"] = __bind(this[\"?<=\"], this);\n\
    this[\"?>=\"] = __bind(this[\"?>=\"], this);\n\
    this[\"clause\"] = __bind(this[\"clause\"], this);\n\
    this[\"where\"] = __bind(this[\"where\"], this);\n\
    this[\"cond\"] = __bind(this[\"cond\"], this);\n\
    this['divide'] = __bind(this['divide'], this);\n\
    this['multiply'] = __bind(this['multiply'], this);\n\
    this['minus'] = __bind(this['minus'], this);\n\
    this['plus'] = __bind(this['plus'], this);\n\
    this['_get$'] = __bind(this['_get$'], this);\n\
    this['get$'] = __bind(this['get$'], this);\n\
    this['get'] = __bind(this['get'], this);\n\
    this.spawnForWindowSize = __bind(this.spawnForWindowSize, this);\n\
    this._execute = __bind(this._execute, this);\n\
    this.lazySpawnForWindowSize = GSS._.debounce(this.spawnForWindowSize, GSS.config.resizeDebounce, false);\n\
    this.cleanVars();\n\
  }\n\
\n\
  Commander.prototype.clean = function() {\n\
    this.cleanVars();\n\
    return this.unlisten();\n\
  };\n\
\n\
  Commander.prototype.cleanVars = function() {\n\
    this.spawnableRoots = [];\n\
    this.intrinsicRegistersById = {};\n\
    this.boundWindowProps = [];\n\
    this.get$cache = {};\n\
    return this.queryCommandCache = {};\n\
  };\n\
\n\
  Commander.prototype.destroy = function() {\n\
    this.spawnableRoots = null;\n\
    this.intrinsicRegistersById = null;\n\
    this.boundWindowProps = null;\n\
    this.get$cache = null;\n\
    this.queryCommandCache = null;\n\
    return this.unlisten();\n\
  };\n\
\n\
  Commander.prototype.execute = function(ast) {\n\
    var command, _i, _len, _ref, _results;\n\
    if (ast.commands != null) {\n\
      _ref = ast.commands;\n\
      _results = [];\n\
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n\
        command = _ref[_i];\n\
        if (ast.isRule) {\n\
          command.parentRule = ast;\n\
        }\n\
        _results.push(this._execute(command, command));\n\
      }\n\
      return _results;\n\
    }\n\
  };\n\
\n\
  Commander.prototype._execute = function(command, root) {\n\
    var func, i, node, sub, _i, _len, _ref;\n\
    node = command;\n\
    func = this[node[0]];\n\
    if (func == null) {\n\
      throw new Error(\"Engine Commands broke, couldn't find method: \" + node[0]);\n\
    }\n\
    _ref = node.slice(1, +node.length + 1 || 9e9);\n\
    for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {\n\
      sub = _ref[i];\n\
      if (sub instanceof Array) {\n\
        node.splice(i + 1, 1, this._execute(sub, root));\n\
      }\n\
    }\n\
    return func.call.apply(func, [this.engine, root].concat(__slice.call(node.slice(1, node.length))));\n\
  };\n\
\n\
  Commander.prototype.unlisten = function() {\n\
    if (!this._bound_to_window_resize) {\n\
      window.removeEventListener(\"resize\", this.lazySpawnForWindowSize, false);\n\
    }\n\
    return this._bound_to_window_resize = false;\n\
  };\n\
\n\
  Commander.prototype._bound_to_window_resize = false;\n\
\n\
  Commander.prototype.spawnForWindowWidth = function() {\n\
    var w;\n\
    w = window.innerWidth;\n\
    if (GSS.config.verticalScroll) {\n\
      w = w - GSS.get.scrollbarWidth();\n\
    }\n\
    if (this.engine.vars[\"::window[width]\"] !== w) {\n\
      return this.engine.registerCommand(['suggest', ['get', \"::window[width]\"], ['number', w], 'required']);\n\
    }\n\
  };\n\
\n\
  Commander.prototype.spawnForWindowHeight = function() {\n\
    var h;\n\
    h = window.innerHeight;\n\
    if (GSS.config.horizontalScroll) {\n\
      h = h - GSS.get.scrollbarWidth();\n\
    }\n\
    if (this.engine.vars[\"::window[height]\"] !== h) {\n\
      return this.engine.registerCommand(['suggest', ['get', \"::window[height]\"], ['number', h], 'required']);\n\
    }\n\
  };\n\
\n\
  Commander.prototype.spawnForWindowSize = function() {\n\
    if (this._bound_to_window_resize) {\n\
      if (this.boundWindowProps.indexOf('width') !== -1) {\n\
        this.spawnForWindowWidth();\n\
      }\n\
      if (this.boundWindowProps.indexOf('height') !== -1) {\n\
        this.spawnForWindowHeight();\n\
      }\n\
      return this.engine.solve();\n\
    }\n\
  };\n\
\n\
  Commander.prototype.bindToWindow = function(prop) {\n\
    if (prop === \"center-x\") {\n\
      this.bindToWindow(\"width\");\n\
      this.engine.registerCommand(['eq', ['get', '::window[center-x]'], ['divide', ['get', '::window[width]'], 2], 'required']);\n\
      return null;\n\
    } else if (prop === \"right\") {\n\
      this.bindToWindow(\"width\");\n\
      this.engine.registerCommand(['eq', ['get', '::window[right]'], ['get', '::window[width]'], 'required']);\n\
      return null;\n\
    } else if (prop === \"center-y\") {\n\
      this.bindToWindow(\"height\");\n\
      this.engine.registerCommand(['eq', ['get', '::window[center-y]'], ['divide', ['get', '::window[height]'], 2], 'required']);\n\
      return null;\n\
    } else if (prop === \"bottom\") {\n\
      this.bindToWindow(\"width\");\n\
      this.engine.registerCommand(['eq', ['get', '::window[bottom]'], ['get', '::window[height]'], 'required']);\n\
      return null;\n\
    }\n\
    if (this.boundWindowProps.indexOf(prop) === -1) {\n\
      this.boundWindowProps.push(prop);\n\
    }\n\
    if (prop === 'width' || prop === 'height') {\n\
      if (prop === 'width') {\n\
        this.spawnForWindowWidth();\n\
      } else {\n\
        this.spawnForWindowHeight();\n\
      }\n\
      if (!this._bound_to_window_resize) {\n\
        window.addEventListener(\"resize\", this.lazySpawnForWindowSize, false);\n\
        return this._bound_to_window_resize = true;\n\
      }\n\
    } else if (prop === 'x') {\n\
      return this.engine.registerCommand(['eq', ['get', '::window[x]'], ['number', 0], 'required']);\n\
    } else if (prop === 'y') {\n\
      return this.engine.registerCommand(['eq', ['get', '::window[y]'], ['number', 0], 'required']);\n\
    }\n\
  };\n\
\n\
  Commander.prototype.spawnForScope = function(prop) {\n\
    var key, thisEngine;\n\
    key = \"$\" + this.engine.id + (\"[\" + prop + \"]\");\n\
    thisEngine = this.engine;\n\
    return GSS.on(\"engine:beforeDisplay\", function(engine) {\n\
      var val;\n\
      val = engine.vars[key];\n\
      if (val != null) {\n\
        if (thisEngine.isDescendantOf(engine)) {\n\
          return thisEngine.registerCommand(['suggest', ['get', key], ['number', val], 'required']);\n\
        }\n\
      }\n\
    });\n\
  };\n\
\n\
  Commander.prototype.bindToScope = function(prop) {\n\
    return this.spawnForScope(prop);\n\
    /*\n\
    if prop is 'width' or prop is 'height'\n\
      if prop is 'width' then @spawnForScopeWidth() else @spawnForScopeHeight()\n\
    else if prop is 'x'\n\
      @engine.registerCommand ['eq', ['get', '::scope[x]'], ['number', 0], 'required']      \n\
    else if prop is 'y'\n\
      @engine.registerCommand ['eq', ['get', '::scope[y]'], ['number', 0], 'required']\n\
    #else\n\
    #  throw new Error \"Not sure how to bind to window prop: #{prop}\"\n\
    */\n\
\n\
  };\n\
\n\
  Commander.prototype.handleRemoves = function(removes) {\n\
    var varid, _i, _len;\n\
    if (removes.length < 1) {\n\
      return this;\n\
    }\n\
    this.engine.registerCommand(['remove'].concat(__slice.call(removes)));\n\
    for (_i = 0, _len = removes.length; _i < _len; _i++) {\n\
      varid = removes[_i];\n\
      delete this.intrinsicRegistersById[varid];\n\
    }\n\
    return this;\n\
  };\n\
\n\
  Commander.prototype.handleSelectorsWithAdds = function(selectorsWithAdds) {\n\
    var query, root, _i, _j, _len, _len1, _ref, _ref1;\n\
    if (selectorsWithAdds.length < 1) {\n\
      return this;\n\
    }\n\
    _ref = this.spawnableRoots;\n\
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n\
      root = _ref[_i];\n\
      _ref1 = root.queries;\n\
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {\n\
        query = _ref1[_j];\n\
        if (selectorsWithAdds.indexOf(query.selector) !== -1) {\n\
          this.spawn(root);\n\
          break;\n\
        }\n\
      }\n\
    }\n\
    return this;\n\
  };\n\
\n\
  Commander.prototype.validateMeasures = function() {\n\
    var id, ids;\n\
    ids = [];\n\
    for (id in this.intrinsicRegistersById) {\n\
      ids.push(id);\n\
    }\n\
    return this.handleInvalidMeasures(ids);\n\
  };\n\
\n\
  Commander.prototype.handleInvalidMeasures = function(invalidMeasures) {\n\
    var id, prop, register, registersByProp, _i, _len;\n\
    if (invalidMeasures.length < 1) {\n\
      return this;\n\
    }\n\
    for (_i = 0, _len = invalidMeasures.length; _i < _len; _i++) {\n\
      id = invalidMeasures[_i];\n\
      registersByProp = this.intrinsicRegistersById[id];\n\
      if (registersByProp) {\n\
        for (prop in registersByProp) {\n\
          register = registersByProp[prop];\n\
          register.call(this);\n\
        }\n\
      }\n\
    }\n\
    return this;\n\
  };\n\
\n\
  /*\n\
  getWhereCommandIfNeeded: (rule) ->    \n\
    \n\
    # Condtional Bound`\n\
    if rule\n\
      if rule.isCondtionalBound & !rule.isConditional\n\
        whereCommand = [\"where\"]\n\
        for cond in rule.boundConditionals\n\
          whereCommand.push cond.getClauseTracker()\n\
        return whereCommand\n\
    else \n\
      return null\n\
  */\n\
\n\
\n\
  Commander.prototype.registerSpawn = function(node) {\n\
    var newCommand, part, _i, _len;\n\
    if (!node.isQueryBound) {\n\
      newCommand = [];\n\
      for (_i = 0, _len = node.length; _i < _len; _i++) {\n\
        part = node[_i];\n\
        newCommand.push(part);\n\
      }\n\
      return this.engine.registerCommand(newCommand);\n\
    } else {\n\
      this.spawnableRoots.push(node);\n\
      return this.spawn(node);\n\
    }\n\
  };\n\
\n\
  Commander.prototype.spawn = function(node) {\n\
    var contextId, contextQuery, q, queries, ready, rule, _i, _j, _len, _len1, _ref, _results;\n\
    queries = node.queries;\n\
    ready = true;\n\
    for (_i = 0, _len = queries.length; _i < _len; _i++) {\n\
      q = queries[_i];\n\
      if (q.lastAddedIds.length <= 0) {\n\
        ready = false;\n\
        break;\n\
      }\n\
    }\n\
    if (ready) {\n\
      rule = node.parentRule;\n\
      if (node.isContextBound) {\n\
        contextQuery = rule.getContextQuery();\n\
        _ref = contextQuery.lastAddedIds;\n\
        _results = [];\n\
        for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {\n\
          contextId = _ref[_j];\n\
          _results.push(this.engine.registerCommands(this.expandSpawnable(node, true, contextId)));\n\
        }\n\
        return _results;\n\
      } else {\n\
        return this.engine.registerCommands(this.expandSpawnable(node, true));\n\
      }\n\
    }\n\
  };\n\
\n\
  Commander.prototype.expandSpawnable = function(command, isRoot, contextId, tracker) {\n\
    var commands, hasPlural, i, j, newCommand, newPart, part, plural, pluralCommand, pluralLength, pluralPartLookup, _i, _j, _k, _len, _len1;\n\
    newCommand = [];\n\
    commands = [];\n\
    hasPlural = false;\n\
    pluralPartLookup = {};\n\
    plural = null;\n\
    pluralLength = 0;\n\
    for (i = _i = 0, _len = command.length; _i < _len; i = ++_i) {\n\
      part = command[i];\n\
      if (part) {\n\
        if (part.spawn != null) {\n\
          newPart = part.spawn(contextId);\n\
          newCommand.push(newPart);\n\
          if (part.isPlural) {\n\
            hasPlural = true;\n\
            pluralPartLookup[i] = newPart;\n\
            pluralLength = newPart.length;\n\
          }\n\
        } else {\n\
          newCommand.push(part);\n\
        }\n\
      }\n\
    }\n\
    if (isRoot) {\n\
      if (tracker) {\n\
        newCommand.push(tracker);\n\
      }\n\
    }\n\
    if (hasPlural) {\n\
      for (j = _j = 0; 0 <= pluralLength ? _j < pluralLength : _j > pluralLength; j = 0 <= pluralLength ? ++_j : --_j) {\n\
        pluralCommand = [];\n\
        for (i = _k = 0, _len1 = newCommand.length; _k < _len1; i = ++_k) {\n\
          part = newCommand[i];\n\
          if (pluralPartLookup[i]) {\n\
            pluralCommand.push(pluralPartLookup[i][j]);\n\
          } else {\n\
            pluralCommand.push(part);\n\
          }\n\
        }\n\
        commands.push(pluralCommand);\n\
      }\n\
      return commands;\n\
    } else {\n\
      if (isRoot) {\n\
        return [newCommand];\n\
      }\n\
      return newCommand;\n\
    }\n\
  };\n\
\n\
  Commander.prototype.makeNonRootSpawnableIfNeeded = function(command) {\n\
    var isPlural, isSpawnable, part, _i, _len,\n\
      _this = this;\n\
    isPlural = false;\n\
    for (_i = 0, _len = command.length; _i < _len; _i++) {\n\
      part = command[_i];\n\
      if (part) {\n\
        if (part.spawn != null) {\n\
          isSpawnable = true;\n\
          if (part.isPlural) {\n\
            isPlural = true;\n\
          }\n\
        }\n\
      }\n\
    }\n\
    if (!isSpawnable) {\n\
      return command;\n\
    }\n\
    return {\n\
      isPlural: isPlural,\n\
      spawn: function(contextId) {\n\
        return _this.expandSpawnable(command, false, contextId);\n\
      }\n\
    };\n\
  };\n\
\n\
  Commander.prototype['get'] = function(root, varId, tracker) {\n\
    var command;\n\
    command = ['get', varId];\n\
    if (tracker) {\n\
      command.push(tracker);\n\
    }\n\
    return command;\n\
  };\n\
\n\
  Commander.prototype['get$'] = function(root, prop, queryObject) {\n\
    var key, val;\n\
    key = queryObject.selectorKey;\n\
    if (!key) {\n\
      key = queryObject.selector;\n\
    }\n\
    key += prop;\n\
    val = this.get$cache[key];\n\
    if (!val) {\n\
      val = this._get$(root, prop, queryObject);\n\
      this.get$cache[key] = val;\n\
    }\n\
    return val;\n\
  };\n\
\n\
  Commander.prototype['_get$'] = function(root, prop, queryObject) {\n\
    var idProcessor, isContextBound, isMulti, isScopeBound, query, selector,\n\
      _this = this;\n\
    query = queryObject.query;\n\
    selector = queryObject.selector;\n\
    if (selector === 'window') {\n\
      this.bindToWindow(prop);\n\
      return ['get', \"::window[\" + prop + \"]\"];\n\
    }\n\
    isMulti = query.isMulti;\n\
    isContextBound = queryObject.isContextBound;\n\
    isScopeBound = queryObject.isScopeBound;\n\
    if (isScopeBound) {\n\
      this.bindToScope(prop);\n\
    }\n\
    if (prop.indexOf(\"intrinsic-\") === 0) {\n\
      query.lastAddedIds.forEach(function(id) {\n\
        var elProp, engine, gid, k, register;\n\
        gid = \"$\" + id;\n\
        if (!_this.intrinsicRegistersById[gid]) {\n\
          _this.intrinsicRegistersById[gid] = {};\n\
        }\n\
        if (!_this.intrinsicRegistersById[gid][prop]) {\n\
          elProp = prop.split(\"intrinsic-\")[1];\n\
          k = \"\" + gid + \"[\" + prop + \"]\";\n\
          engine = _this.engine;\n\
          register = function() {\n\
            var val;\n\
            val = engine.measureByGssId(id, elProp);\n\
            if (engine.vars[k] !== val) {\n\
              engine.registerCommand(['suggest', ['get$', prop, gid, selector], ['number', val], 'required']);\n\
            }\n\
            return engine.setNeedsMeasure(true);\n\
          };\n\
          _this.intrinsicRegistersById[gid][prop] = register;\n\
          return register.call(_this);\n\
        }\n\
      });\n\
    }\n\
    if (isContextBound) {\n\
      idProcessor = queryObject.idProcessor;\n\
      return {\n\
        isQueryBound: true,\n\
        isPlural: false,\n\
        query: query,\n\
        spawn: function(id) {\n\
          if (idProcessor) {\n\
            id = idProcessor(id);\n\
          }\n\
          return ['get$', prop, \"$\" + id, selector];\n\
        }\n\
      };\n\
    }\n\
    return {\n\
      isQueryBound: true,\n\
      isPlural: isMulti,\n\
      query: query,\n\
      spawn: function() {\n\
        var id, nodes, _i, _len, _ref;\n\
        if (!isMulti) {\n\
          id = query.lastAddedIds[query.lastAddedIds.length - 1];\n\
          return ['get$', prop, \"$\" + id, selector];\n\
        }\n\
        nodes = [];\n\
        _ref = query.lastAddedIds;\n\
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n\
          id = _ref[_i];\n\
          nodes.push(['get$', prop, \"$\" + id, selector]);\n\
        }\n\
        return nodes;\n\
      }\n\
    };\n\
  };\n\
\n\
  Commander.prototype['number'] = function(root, num) {\n\
    return ['number', num];\n\
  };\n\
\n\
  Commander.prototype['plus'] = function(root, e1, e2) {\n\
    return this.makeNonRootSpawnableIfNeeded(['plus', e1, e2]);\n\
  };\n\
\n\
  Commander.prototype['minus'] = function(root, e1, e2) {\n\
    return this.makeNonRootSpawnableIfNeeded(['minus', e1, e2]);\n\
  };\n\
\n\
  Commander.prototype['multiply'] = function(root, e1, e2) {\n\
    return this.makeNonRootSpawnableIfNeeded(['multiply', e1, e2]);\n\
  };\n\
\n\
  Commander.prototype['divide'] = function(root, e1, e2, s, w) {\n\
    return this.makeNonRootSpawnableIfNeeded(['divide', e1, e2]);\n\
  };\n\
\n\
  Commander.prototype[\"cond\"] = function(self) {\n\
    return this.registerSpawn(self);\n\
  };\n\
\n\
  /*\n\
  \"where\": (root,name) =>\n\
    return ['where',name]\n\
  \n\
  \"clause\": (root,cond,label) =>\n\
    return @makeNonRootSpawnableIfNeeded [\"clause\",cond,label]\n\
  */\n\
\n\
\n\
  Commander.prototype[\"where\"] = function(root, name) {\n\
    var command;\n\
    if (root.isContextBound) {\n\
      command = [\n\
        \"where\", name, {\n\
          spawn: function(contextId) {\n\
            return \"-context-\" + contextId;\n\
          }\n\
        }\n\
      ];\n\
    } else {\n\
      command = [\"where\", name];\n\
    }\n\
    return this.makeNonRootSpawnableIfNeeded(command);\n\
  };\n\
\n\
  Commander.prototype[\"clause\"] = function(root, cond, name) {\n\
    var command;\n\
    if (root.isContextBound) {\n\
      command = [\n\
        \"clause\", cond, {\n\
          spawn: function(contextId) {\n\
            if (contextId) {\n\
              return name + \"-context-\" + contextId;\n\
            }\n\
            return name;\n\
          }\n\
        }\n\
      ];\n\
    } else {\n\
      command = [\"clause\", cond, name];\n\
    }\n\
    return this.makeNonRootSpawnableIfNeeded(command);\n\
  };\n\
\n\
  Commander.prototype[\"?>=\"] = function(root, e1, e2) {\n\
    return this.makeNonRootSpawnableIfNeeded([\"?>=\", e1, e2]);\n\
  };\n\
\n\
  Commander.prototype[\"?<=\"] = function(root, e1, e2) {\n\
    return this.makeNonRootSpawnableIfNeeded([\"?<=\", e1, e2]);\n\
  };\n\
\n\
  Commander.prototype[\"?==\"] = function(root, e1, e2) {\n\
    return this.makeNonRootSpawnableIfNeeded([\"?==\", e1, e2]);\n\
  };\n\
\n\
  Commander.prototype[\"?!=\"] = function(root, e1, e2) {\n\
    return this.makeNonRootSpawnableIfNeeded([\"?!=\", e1, e2]);\n\
  };\n\
\n\
  Commander.prototype[\"?>\"] = function(root, e1, e2) {\n\
    return this.makeNonRootSpawnableIfNeeded([\"?>\", e1, e2]);\n\
  };\n\
\n\
  Commander.prototype[\"?<\"] = function(root, e1, e2) {\n\
    return this.makeNonRootSpawnableIfNeeded([\"?<\", e1, e2]);\n\
  };\n\
\n\
  Commander.prototype[\"&&\"] = function(root, e1, e2) {\n\
    return this.makeNonRootSpawnableIfNeeded([\"&&\", e1, e2]);\n\
  };\n\
\n\
  Commander.prototype[\"||\"] = function(root, e1, e2) {\n\
    return this.makeNonRootSpawnableIfNeeded([\"||\", e1, e2]);\n\
  };\n\
\n\
  Commander.prototype['strength'] = function(root, s) {\n\
    return ['strength', s];\n\
  };\n\
\n\
  Commander.prototype['suggest'] = function() {\n\
    var args;\n\
    args = __slice.call(arguments);\n\
    return this.engine.registerCommand(['suggest'].concat(__slice.call(args.slice(1, args.length))));\n\
  };\n\
\n\
  Commander.prototype['eq'] = function(self, e1, e2, s, w) {\n\
    return this.registerSpawn(self);\n\
  };\n\
\n\
  Commander.prototype['lte'] = function(self, e1, e2, s, w) {\n\
    return this.registerSpawn(self);\n\
  };\n\
\n\
  Commander.prototype['gte'] = function(self, e1, e2, s, w) {\n\
    return this.registerSpawn(self);\n\
  };\n\
\n\
  Commander.prototype['lt'] = function(self, e1, e2, s, w) {\n\
    return this.registerSpawn(self);\n\
  };\n\
\n\
  Commander.prototype['gt'] = function(self, e1, e2, s, w) {\n\
    return this.registerSpawn(self);\n\
  };\n\
\n\
  Commander.prototype['stay'] = function(self) {\n\
    return this.registerSpawn(self);\n\
    /*\n\
    if !self._is_bound then return @registerSpawn(self)\n\
    # break up stays to allow multiple plural queries\n\
    args = [arguments...]\n\
    gets = args[1...args.length]    \n\
    for get in gets\n\
      stay = ['stay']\n\
      stay.push get\n\
      cloneBinds self, stay\n\
      @registerSpawn(stay)\n\
    */\n\
\n\
  };\n\
\n\
  Commander.prototype['virtual'] = function(self, namesssss) {\n\
    /* TODO: register virtuals to DOM elements\n\
    parentRule = self.parentRule\n\
    if !parentRule then throw new 'Error virtual element \"#{name}\" requires parent rule for context'\n\
    query = parentRule.getContextQuery()\n\
    args = [arguments...]\n\
    names = [args[1...args.length]...]\n\
    query.on 'afterChange', ->\n\
      for id in query.lastAddedIds\n\
        view = GSS.get.view(id)\n\
        view.addVirtuals names \n\
    for id in query.lastAddedIds\n\
      view = GSS.get.view(id)\n\
      view.addVirtuals names\n\
      \n\
    @registerSpawn(self)\n\
    */\n\
\n\
  };\n\
\n\
  Commander.prototype['$virtual'] = function(root, name) {\n\
    var o, parentRule, query, selector, selectorKey;\n\
    parentRule = root.parentRule;\n\
    if (!parentRule) {\n\
      throw new 'Error virtual element \"#{name}\" requires parent rule for context';\n\
    }\n\
    query = parentRule.getContextQuery();\n\
    selector = query.selector;\n\
    selectorKey = query.selector + (\" ::virtual(\" + name + \")\");\n\
    o = this.queryCommandCache[selectorKey];\n\
    if (!o) {\n\
      o = {\n\
        query: query,\n\
        selector: selector,\n\
        selectorKey: selectorKey,\n\
        isContextBound: true,\n\
        idProcessor: function(id) {\n\
          return id + '\"' + name + '\"';\n\
          /* TODO: allow virtual lookup from down DOM tree\n\
          # \n\
          console.log id\n\
          nearestWithV = GSS.get.view(id).nearestViewWithVirtual(name)\n\
          if nearestWithV\n\
            id = nearestWithV.id            \n\
            return id + '\"' + name + '\"'\n\
          else\n\
            console.error \"Virtual with name #{name} not found up tree\"\n\
          */\n\
\n\
        }\n\
      };\n\
      this.queryCommandCache[selectorKey] = o;\n\
    }\n\
    bindRootAsContext(root, query);\n\
    return o;\n\
  };\n\
\n\
  Commander.prototype['$class'] = function(root, sel) {\n\
    var o, query, selector,\n\
      _this = this;\n\
    selector = \".\" + sel;\n\
    o = this.queryCommandCache[selector];\n\
    if (!o) {\n\
      query = this.engine.registerDomQuery({\n\
        selector: selector,\n\
        isMulti: true,\n\
        isLive: false,\n\
        createNodeList: function() {\n\
          return _this.engine.queryScope.getElementsByClassName(sel);\n\
        }\n\
      });\n\
      o = {\n\
        query: query,\n\
        selector: selector\n\
      };\n\
      this.queryCommandCache[selector] = o;\n\
    }\n\
    bindRootAsMulti(root, o.query);\n\
    return o;\n\
  };\n\
\n\
  Commander.prototype['$tag'] = function(root, sel) {\n\
    var o, query, selector,\n\
      _this = this;\n\
    selector = sel;\n\
    o = this.queryCommandCache[selector];\n\
    if (!o) {\n\
      query = this.engine.registerDomQuery({\n\
        selector: selector,\n\
        isMulti: true,\n\
        isLive: false,\n\
        createNodeList: function() {\n\
          return _this.engine.queryScope.getElementsByTagName(sel);\n\
        }\n\
      });\n\
      o = {\n\
        query: query,\n\
        selector: selector\n\
      };\n\
      this.queryCommandCache[selector] = o;\n\
    }\n\
    bindRootAsMulti(root, o.query);\n\
    return o;\n\
  };\n\
\n\
  Commander.prototype['$id'] = function(root, sel) {\n\
    var o, query, selector,\n\
      _this = this;\n\
    selector = \"#\" + sel;\n\
    o = this.queryCommandCache[selector];\n\
    if (!o) {\n\
      query = this.engine.registerDomQuery({\n\
        selector: selector,\n\
        isMulti: false,\n\
        isLive: false,\n\
        createNodeList: function() {\n\
          var el;\n\
          el = document.getElementById(sel);\n\
          if (el) {\n\
            return [el];\n\
          } else {\n\
            return [];\n\
          }\n\
        }\n\
      });\n\
      o = {\n\
        query: query,\n\
        selector: selector\n\
      };\n\
      this.queryCommandCache[selector] = o;\n\
    }\n\
    bindRoot(root, o.query);\n\
    return o;\n\
  };\n\
\n\
  Commander.prototype['$reserved'] = function(root, sel) {\n\
    var engine, o, parentRule, query, selector, selectorKey;\n\
    if (sel === 'window') {\n\
      selector = 'window';\n\
      o = this.queryCommandCache[selector];\n\
      if (!o) {\n\
        o = {\n\
          selector: selector,\n\
          query: null\n\
        };\n\
        this.queryCommandCache[selector] = o;\n\
      }\n\
      return o;\n\
    }\n\
    engine = this.engine;\n\
    if (sel === '::this' || sel === 'this') {\n\
      parentRule = root.parentRule;\n\
      if (!parentRule) {\n\
        throw new Error(\"::this query requires parent rule for context\");\n\
      }\n\
      query = parentRule.getContextQuery();\n\
      selector = query.selector;\n\
      selectorKey = selector + \"::this\";\n\
      o = this.queryCommandCache[selectorKey];\n\
      if (!o) {\n\
        o = {\n\
          query: query,\n\
          selector: selector,\n\
          selectorKey: selectorKey,\n\
          isContextBound: true\n\
        };\n\
        this.queryCommandCache[selectorKey] = o;\n\
      }\n\
      bindRootAsContext(root, query);\n\
      return o;\n\
    } else if (sel === '::parent' || sel === 'parent') {\n\
      parentRule = root.parentRule;\n\
      if (!parentRule) {\n\
        throw new Error(\"::this query requires parent rule for context\");\n\
      }\n\
      query = parentRule.getContextQuery();\n\
      selector = query.selector + \"::parent\";\n\
      o = this.queryCommandCache[selector];\n\
      if (!o) {\n\
        o = {\n\
          query: query,\n\
          selector: selector,\n\
          isContextBound: true,\n\
          idProcessor: function(id) {\n\
            return GSS.setupId(GSS.getById(id).parentElement);\n\
          }\n\
        };\n\
        this.queryCommandCache[selector] = o;\n\
      }\n\
      bindRootAsContext(root, query);\n\
      return o;\n\
    } else if (sel === 'scope') {\n\
      selector = \"::\" + sel;\n\
      o = this.queryCommandCache[selector];\n\
      if (!o) {\n\
        query = engine.registerDomQuery({\n\
          selector: selector,\n\
          isMulti: false,\n\
          isLive: true,\n\
          createNodeList: function() {\n\
            return [engine.scope];\n\
          }\n\
        });\n\
        o = {\n\
          query: query,\n\
          selector: selector,\n\
          isScopeBound: true\n\
        };\n\
        this.queryCommandCache[selector] = o;\n\
      }\n\
      bindRoot(root, o.query);\n\
      return o;\n\
    }\n\
    throw new Error(\"$reserved selectors not yet handled: \" + sel);\n\
  };\n\
\n\
  Commander.prototype['chain'] = function(root, queryObject, bridgessssss) {\n\
    var args, bridge, bridges, engine, more, query, _i, _j, _len, _len1;\n\
    query = queryObject.query;\n\
    args = __slice.call(arguments);\n\
    bridges = __slice.call(args.slice(2, args.length));\n\
    engine = this.engine;\n\
    more = null;\n\
    for (_i = 0, _len = bridges.length; _i < _len; _i++) {\n\
      bridge = bridges[_i];\n\
      if (typeof bridge !== \"function\") {\n\
        if (!more) {\n\
          more = [];\n\
        }\n\
        more.push(bridge);\n\
        bridges.splice(bridges.indexOf(bridge), 1);\n\
      }\n\
    }\n\
    for (_j = 0, _len1 = bridges.length; _j < _len1; _j++) {\n\
      bridge = bridges[_j];\n\
      bridge.call(engine, query, engine, more);\n\
    }\n\
    return query.on('afterChange', function() {\n\
      var _k, _len2, _results;\n\
      _results = [];\n\
      for (_k = 0, _len2 = bridges.length; _k < _len2; _k++) {\n\
        bridge = bridges[_k];\n\
        _results.push(bridge.call(engine, query, engine, more));\n\
      }\n\
      return _results;\n\
    });\n\
  };\n\
\n\
  Commander.prototype['eq-chain'] = function(root, head, tail, s, w) {\n\
    return this._chainer('eq', head, tail, s, w);\n\
  };\n\
\n\
  Commander.prototype['lte-chain'] = function(root, head, tail, s, w) {\n\
    return this._chainer('lte', head, tail, s, w);\n\
  };\n\
\n\
  Commander.prototype['gte-chain'] = function(root, head, tail, s, w) {\n\
    return this._chainer('gte', head, tail, s, w);\n\
  };\n\
\n\
  Commander.prototype['lt-chain'] = function(root, head, tail, s, w) {\n\
    return this._chainer('lt', head, tail, s, w);\n\
  };\n\
\n\
  Commander.prototype['gt-chain'] = function(root, head, tail, s, w) {\n\
    return this._chainer('gt', head, tail, s, w);\n\
  };\n\
\n\
  Commander.prototype._chainer = function(op, head, tail, s, w) {\n\
    var engine, tracker, _e_for_chain;\n\
    tracker = \"eq-chain-\" + GSS.uid();\n\
    engine = this.engine;\n\
    _e_for_chain = this._e_for_chain;\n\
    return function(query, e, more) {\n\
      e.remove(tracker);\n\
      return query.forEach(function(el) {\n\
        var e1, e2, nextEl;\n\
        nextEl = query.next(el);\n\
        if (!nextEl) {\n\
          return;\n\
        }\n\
        e1 = _e_for_chain(el, head, query, tracker, el, nextEl);\n\
        e2 = _e_for_chain(nextEl, tail, query, tracker, el, nextEl);\n\
        return e[op](e1, e2, s, w, more);\n\
      });\n\
    };\n\
  };\n\
\n\
  Commander.prototype['plus-chain'] = function(root, head, tail) {\n\
    return this._chainer_math(head, tail, 'plus');\n\
  };\n\
\n\
  Commander.prototype['minus-chain'] = function(root, head, tail) {\n\
    return this._chainer_math(head, tail, 'minus');\n\
  };\n\
\n\
  Commander.prototype['multiply-chain'] = function(root, head, tail) {\n\
    return this._chainer_math(head, tail, 'multiply');\n\
  };\n\
\n\
  Commander.prototype['divide-chain'] = function(root, head, tail) {\n\
    return this._chainer_math(head, tail, 'divide');\n\
  };\n\
\n\
  Commander.prototype._chainer_math = function(head, tail, op) {\n\
    var engine, _e_for_chain;\n\
    engine = this.engine;\n\
    _e_for_chain = this._e_for_chain;\n\
    return function(el, nextEl, query, tracker) {\n\
      var e1, e2;\n\
      e1 = _e_for_chain(el, head, query, tracker);\n\
      e2 = _e_for_chain(nextEl, tail, query, tracker);\n\
      return engine[op](e1, e2);\n\
    };\n\
  };\n\
\n\
  Commander.prototype._e_for_chain = function(el, exp, query, tracker, currentEl, nextEl) {\n\
    var e1;\n\
    if (typeof exp === \"string\") {\n\
      e1 = this.engine.elVar(el, exp, query.selector);\n\
    } else if (typeof exp === \"function\") {\n\
      e1 = exp.call(this, currentEl, nextEl, query, tracker);\n\
    } else {\n\
      e1 = exp;\n\
    }\n\
    return e1;\n\
  };\n\
\n\
  Commander.prototype['for-each'] = function(root, queryObject, callback) {\n\
    var el, query, _i, _len, _ref;\n\
    query = queryObject.query;\n\
    _ref = query.nodeList;\n\
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n\
      el = _ref[_i];\n\
      callback.call(this.engine, el, query, this.engine);\n\
    }\n\
    return query.on('afterChange', function() {\n\
      var _j, _len1, _ref1, _results;\n\
      _ref1 = query.nodeList;\n\
      _results = [];\n\
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {\n\
        el = _ref1[_j];\n\
        _results.push(callback.call(this.engine, el, query));\n\
      }\n\
      return _results;\n\
    });\n\
  };\n\
\n\
  Commander.prototype['for-all'] = function(root, queryObject, callback) {\n\
    var query,\n\
      _this = this;\n\
    query = queryObject.query;\n\
    callback.call(this.engine, query, this.engine);\n\
    return query.on('afterChange', function() {\n\
      return callback.call(_this.engine, query, _this.engine);\n\
    });\n\
  };\n\
\n\
  Commander.prototype['js'] = function(root, js) {\n\
    eval(\"var callback =\" + js);\n\
    return callback;\n\
  };\n\
\n\
  return Commander;\n\
\n\
})();\n\
\n\
module.exports = Commander;\n\
//@ sourceURL=the-gss-engine/lib/Commander.js"
));
require.register("the-gss-engine/lib/Thread.js", Function("exports, require, module",
"var Thread,\n\
  __slice = [].slice;\n\
\n\
Thread = (function() {\n\
  function Thread(o) {\n\
    var defaultStrength;\n\
    if (o == null) {\n\
      o = {};\n\
    }\n\
    defaultStrength = o.defaultStrength || 'required';\n\
    this.defaultStrength = c.Strength[defaultStrength];\n\
    if (!this.defaultStrength) {\n\
      this.defaultStrength = c.Strength['required'];\n\
    }\n\
    this.defaultWeight = o.defaultWeight || 0;\n\
    this.setupIfNeeded();\n\
    this;\n\
  }\n\
\n\
  Thread.prototype.needsSetup = true;\n\
\n\
  Thread.prototype.setupIfNeeded = function() {\n\
    if (!this.needsSetup) {\n\
      return this;\n\
    }\n\
    this.needsSetup = false;\n\
    this.solver = new c.SimplexSolver();\n\
    this.solver.autoSolve = false;\n\
    this.cachedVars = {};\n\
    this.elements = {};\n\
    this.constraintsByTracker = {};\n\
    this.varIdsByTracker = {};\n\
    this.conditionals = [];\n\
    this.activeClauses = [];\n\
    this.__editVarNames = [];\n\
    return this;\n\
  };\n\
\n\
  Thread.prototype.postMessage = function(message) {\n\
    this.execute(message);\n\
    return this;\n\
  };\n\
\n\
  Thread.prototype.terminate = function() {\n\
    this.needsSetup = true;\n\
    this.solver = null;\n\
    this.cachedVars = null;\n\
    this.constraintsByTracker = null;\n\
    this.varIdsByTracker = null;\n\
    this.conditionals = null;\n\
    this.activeClauses = null;\n\
    this.__editVarNames = null;\n\
    return this;\n\
  };\n\
\n\
  Thread.prototype.output = function() {\n\
    return {\n\
      values: this.getValues(),\n\
      clauses: this.activeClauses\n\
    };\n\
  };\n\
\n\
  Thread.prototype.execute = function(message) {\n\
    var command, uuid, _i, _len, _ref;\n\
    this.setupIfNeeded();\n\
    uuid = null;\n\
    if (message.uuid) {\n\
      uuid = message.uuid;\n\
    }\n\
    _ref = message.commands;\n\
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n\
      command = _ref[_i];\n\
      this._trackRootIfNeeded(command, uuid);\n\
      this._execute(command, command);\n\
    }\n\
    return this;\n\
  };\n\
\n\
  Thread.prototype._execute = function(command, root) {\n\
    var func, i, node, sub, subResult;\n\
    node = command;\n\
    func = this[node[0]];\n\
    if (func == null) {\n\
      throw new Error(\"Thread.execute broke - couldn't find method: \" + node[0]);\n\
    }\n\
    i = node.length - 1;\n\
    while (i > 0) {\n\
      sub = node[i];\n\
      if (sub instanceof Array) {\n\
        subResult = this._execute(sub, root);\n\
        if (subResult === \"IGNORE\") {\n\
          node.splice(i, 1);\n\
        } else {\n\
          node.splice(i, 1, subResult);\n\
        }\n\
      }\n\
      i--;\n\
    }\n\
    return func.call.apply(func, [this, root].concat(__slice.call(node.slice(1, node.length))));\n\
  };\n\
\n\
  Thread.prototype.getValues = function() {\n\
    var id, o;\n\
    this._solve();\n\
    o = {};\n\
    for (id in this.cachedVars) {\n\
      o[id] = this.cachedVars[id].value;\n\
    }\n\
    return o;\n\
  };\n\
\n\
  Thread.prototype._solve = function(recurses) {\n\
    var conditional, _i, _len, _ref;\n\
    if (recurses == null) {\n\
      recurses = 0;\n\
    }\n\
    this.solver.solve();\n\
    if (this.conditionals.length > 0 && recurses === 0) {\n\
      _ref = this.conditionals;\n\
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n\
        conditional = _ref[_i];\n\
        conditional.update();\n\
      }\n\
      recurses++;\n\
      return this._solve(recurses);\n\
    }\n\
  };\n\
\n\
  Thread.prototype['virtual'] = function(self, id, names) {\n\
    return self;\n\
  };\n\
\n\
  Thread.prototype['track'] = function(root, tracker) {\n\
    this._trackRootIfNeeded(root, tracker);\n\
    return 'IGNORE';\n\
  };\n\
\n\
  Thread.prototype._trackRootIfNeeded = function(root, tracker) {\n\
    if (tracker) {\n\
      root._is_tracked = true;\n\
      if (!root._trackers) {\n\
        root._trackers = [];\n\
      }\n\
      if (root._trackers.indexOf(tracker) === -1) {\n\
        return root._trackers.push(tracker);\n\
      }\n\
    }\n\
  };\n\
\n\
  Thread.prototype['remove'] = function(self, trackersss) {\n\
    var args, tracker, trackers, _i, _len, _results;\n\
    args = __slice.call(arguments);\n\
    trackers = __slice.call(args.slice(1, args.length));\n\
    _results = [];\n\
    for (_i = 0, _len = trackers.length; _i < _len; _i++) {\n\
      tracker = trackers[_i];\n\
      _results.push(this._remove(tracker));\n\
    }\n\
    return _results;\n\
  };\n\
\n\
  Thread.prototype._remove = function(tracker) {\n\
    this._removeConstraintByTracker(tracker);\n\
    return this._removeVarByTracker(tracker);\n\
  };\n\
\n\
  Thread.prototype._removeVarByTracker = function(tracker) {\n\
    var id, _i, _len, _ref;\n\
    delete this.__editVarNames[tracker];\n\
    if (this.varIdsByTracker[tracker]) {\n\
      _ref = this.varIdsByTracker[tracker];\n\
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n\
        id = _ref[_i];\n\
        delete this.cachedVars[id];\n\
      }\n\
      return delete this.varIdsByTracker[tracker];\n\
    }\n\
  };\n\
\n\
  Thread.prototype._removeConstraintByTracker = function(tracker, permenant) {\n\
    var constraint, error, movealong, _i, _len, _ref;\n\
    if (permenant == null) {\n\
      permenant = true;\n\
    }\n\
    if (this.constraintsByTracker[tracker]) {\n\
      _ref = this.constraintsByTracker[tracker];\n\
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n\
        constraint = _ref[_i];\n\
        try {\n\
          this.solver.removeConstraint(constraint);\n\
        } catch (_error) {\n\
          error = _error;\n\
          movealong = 'please';\n\
        }\n\
      }\n\
      if (permenant) {\n\
        return this.constraintsByTracker[tracker] = null;\n\
      }\n\
    }\n\
  };\n\
\n\
  Thread.prototype._addConstraintByTracker = function(tracker) {\n\
    var constraint, _i, _len, _ref, _results;\n\
    if (this.constraintsByTracker[tracker]) {\n\
      _ref = this.constraintsByTracker[tracker];\n\
      _results = [];\n\
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n\
        constraint = _ref[_i];\n\
        _results.push(this.solver.addConstraint(constraint));\n\
      }\n\
      return _results;\n\
    }\n\
  };\n\
\n\
  Thread.prototype['where'] = function(root, label, labelSuffix) {\n\
    root._condition_bound = true;\n\
    this._trackRootIfNeeded(root, label);\n\
    this._trackRootIfNeeded(root, label + labelSuffix);\n\
    return \"IGNORE\";\n\
  };\n\
\n\
  Thread.prototype['cond'] = function(self, ifffff) {\n\
    var args, clause, clauses, that, _i, _len, _ref;\n\
    args = __slice.call(arguments);\n\
    clauses = [];\n\
    _ref = args.slice(1, args.length);\n\
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n\
      clause = _ref[_i];\n\
      clauses.push(clause);\n\
    }\n\
    that = this;\n\
    return this.conditionals.push({\n\
      clauses: clauses,\n\
      activeLabel: null,\n\
      update: function() {\n\
        var found, newLabel, oldLabel, _j, _len1;\n\
        found = false;\n\
        oldLabel = this.activeLabel;\n\
        for (_j = 0, _len1 = clauses.length; _j < _len1; _j++) {\n\
          clause = clauses[_j];\n\
          newLabel = clause.test();\n\
          if (newLabel) {\n\
            found = true;\n\
            break;\n\
          }\n\
        }\n\
        if (found) {\n\
          if (oldLabel !== newLabel) {\n\
            if (oldLabel != null) {\n\
              that.activeClauses.splice(that.activeClauses.indexOf(oldLabel), 1);\n\
              that._removeConstraintByTracker(oldLabel, false);\n\
            }\n\
            that._addConstraintByTracker(newLabel);\n\
            that.activeClauses.push(newLabel);\n\
            return this.activeLabel = newLabel;\n\
          }\n\
        } else {\n\
          if (oldLabel != null) {\n\
            that.activeClauses.splice(that.activeClauses.indexOf(oldLabel), 1);\n\
            return that._removeConstraintByTracker(oldLabel, false);\n\
          }\n\
        }\n\
      }\n\
    });\n\
  };\n\
\n\
  Thread.prototype['clause'] = function(root, condition, label) {\n\
    return {\n\
      label: label,\n\
      test: function() {\n\
        if (!label) {\n\
          return condition;\n\
        }\n\
        if (!condition) {\n\
          return label;\n\
        }\n\
        if (condition.call(this)) {\n\
          return label;\n\
        } else {\n\
          return null;\n\
        }\n\
      }\n\
    };\n\
  };\n\
\n\
  Thread.prototype._valueOf = function(e) {\n\
    var val;\n\
    val = e.value;\n\
    if (val) {\n\
      return val;\n\
    }\n\
    val = Number(e);\n\
    if (val) {\n\
      return val;\n\
    }\n\
  };\n\
\n\
  Thread.prototype['?>='] = function(root, e1, e2) {\n\
    var _valueOf;\n\
    _valueOf = this._valueOf;\n\
    return function() {\n\
      return _valueOf(e1) >= _valueOf(e2);\n\
    };\n\
  };\n\
\n\
  Thread.prototype['?<='] = function(root, e1, e2) {\n\
    var _valueOf;\n\
    _valueOf = this._valueOf;\n\
    return function() {\n\
      return _valueOf(e1) <= _valueOf(e2);\n\
    };\n\
  };\n\
\n\
  Thread.prototype['?=='] = function(root, e1, e2) {\n\
    var _valueOf;\n\
    _valueOf = this._valueOf;\n\
    return function() {\n\
      return _valueOf(e1) === _valueOf(e2);\n\
    };\n\
  };\n\
\n\
  Thread.prototype['?>'] = function(root, e1, e2) {\n\
    var _valueOf;\n\
    _valueOf = this._valueOf;\n\
    return function() {\n\
      return _valueOf(e1) > _valueOf(e2);\n\
    };\n\
  };\n\
\n\
  Thread.prototype['?<'] = function(root, e1, e2) {\n\
    var _valueOf;\n\
    _valueOf = this._valueOf;\n\
    return function() {\n\
      return _valueOf(e1) < _valueOf(e2);\n\
    };\n\
  };\n\
\n\
  Thread.prototype['?!='] = function(root, e1, e2) {\n\
    var _valueOf;\n\
    _valueOf = this._valueOf;\n\
    return function() {\n\
      return _valueOf(e1) !== _valueOf(e2);\n\
    };\n\
  };\n\
\n\
  Thread.prototype['&&'] = function(root, c1, c2) {\n\
    return c1 && c2;\n\
  };\n\
\n\
  Thread.prototype['||'] = function(root, c1, c2) {\n\
    return c1 || c2;\n\
  };\n\
\n\
  Thread.prototype.number = function(root, num) {\n\
    return Number(num);\n\
  };\n\
\n\
  Thread.prototype._trackVarId = function(id, tracker) {\n\
    if (!this.varIdsByTracker[tracker]) {\n\
      this.varIdsByTracker[tracker] = [];\n\
    }\n\
    if (this.varIdsByTracker[tracker].indexOf(id) === -1) {\n\
      return this.varIdsByTracker[tracker].push(id);\n\
    }\n\
  };\n\
\n\
  Thread.prototype[\"var\"] = function(self, id, tracker) {\n\
    var v;\n\
    if (this.cachedVars[id]) {\n\
      return this.cachedVars[id];\n\
    }\n\
    v = new c.Variable({\n\
      name: id\n\
    });\n\
    if (tracker) {\n\
      this._trackVarId(id, tracker);\n\
      v._tracker = tracker;\n\
      v._is_tracked = true;\n\
    }\n\
    this.cachedVars[id] = v;\n\
    return v;\n\
  };\n\
\n\
  Thread.prototype.varexp = function(self, id, expression, tracker) {\n\
    var cv, that;\n\
    cv = this.cachedVars;\n\
    if (cv[id]) {\n\
      return cv[id];\n\
    }\n\
    if (!(expression instanceof c.Expression)) {\n\
      throw new Error(\"Thread `varexp` requires an instance of c.Expression\");\n\
    }\n\
    that = this;\n\
    Object.defineProperty(cv, id, {\n\
      get: function() {\n\
        var clone;\n\
        clone = expression.clone();\n\
        if (tracker) {\n\
          that._trackVarId(id, tracker);\n\
          clone._tracker = tracker;\n\
          clone._is_tracked = true;\n\
        }\n\
        return clone;\n\
      }\n\
    });\n\
    return expression;\n\
  };\n\
\n\
  Thread.prototype.get$ = function(root, prop, elId, selector) {\n\
    this._trackRootIfNeeded(root, elId);\n\
    if (selector) {\n\
      this._trackRootIfNeeded(root, selector + elId);\n\
    }\n\
    return this._get$(prop, elId);\n\
  };\n\
\n\
  Thread.prototype._get$ = function(prop, elId) {\n\
    var exp, varId;\n\
    varId = elId + (\"[\" + prop + \"]\");\n\
    switch (prop) {\n\
      case \"right\":\n\
        exp = c.plus(this._get$(\"x\", elId), this._get$(\"width\", elId));\n\
        return this.varexp(null, varId, exp, elId);\n\
      case \"bottom\":\n\
        exp = c.plus(this._get$(\"y\", elId), this._get$(\"height\", elId));\n\
        return this.varexp(null, varId, exp, elId);\n\
      case \"center-x\":\n\
        exp = c.plus(this._get$(\"x\", elId), c.divide(this._get$(\"width\", elId), 2));\n\
        return this.varexp(null, varId, exp, elId);\n\
      case \"center-y\":\n\
        exp = c.plus(this._get$(\"y\", elId), c.divide(this._get$(\"height\", elId), 2));\n\
        return this.varexp(null, varId, exp, elId);\n\
      default:\n\
        return this[\"var\"](null, varId, elId);\n\
    }\n\
  };\n\
\n\
  Thread.prototype.get = function(root, id, tracker) {\n\
    var v;\n\
    if (tracker) {\n\
      this._trackRootIfNeeded(root, tracker);\n\
    }\n\
    v = this.cachedVars[id];\n\
    if (v) {\n\
      this._trackRootIfNeeded(root, v.tracker);\n\
      return v;\n\
    } else {\n\
      v = this[\"var\"](null, id);\n\
      return v;\n\
    }\n\
    throw new Error(\"AST method 'get' couldn't find var with id: \" + id);\n\
  };\n\
\n\
  Thread.prototype.plus = function(root, e1, e2) {\n\
    return c.plus(e1, e2);\n\
  };\n\
\n\
  Thread.prototype.minus = function(root, e1, e2) {\n\
    return c.minus(e1, e2);\n\
  };\n\
\n\
  Thread.prototype.multiply = function(root, e1, e2) {\n\
    return c.times(e1, e2);\n\
  };\n\
\n\
  Thread.prototype.divide = function(root, e1, e2, s, w) {\n\
    return c.divide(e1, e2);\n\
  };\n\
\n\
  Thread.prototype._strength = function(s) {\n\
    var strength;\n\
    if (typeof s === 'string') {\n\
      if (s === 'require') {\n\
        s = 'required';\n\
      }\n\
      strength = c.Strength[s];\n\
      if (strength) {\n\
        return strength;\n\
      }\n\
    }\n\
    return this.defaultStrength;\n\
  };\n\
\n\
  Thread.prototype._weight = function(w) {\n\
    if (typeof w === 'number') {\n\
      return w;\n\
    }\n\
    return this.defaultWeight;\n\
  };\n\
\n\
  Thread.prototype._addConstraint = function(root, constraint) {\n\
    var tracker, _i, _len, _ref;\n\
    if (!root._condition_bound) {\n\
      this.solver.addConstraint(constraint);\n\
    }\n\
    if (root._is_tracked) {\n\
      _ref = root._trackers;\n\
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n\
        tracker = _ref[_i];\n\
        if (!this.constraintsByTracker[tracker]) {\n\
          this.constraintsByTracker[tracker] = [];\n\
        }\n\
        this.constraintsByTracker[tracker].push(constraint);\n\
      }\n\
    }\n\
    return constraint;\n\
  };\n\
\n\
  Thread.prototype.eq = function(self, e1, e2, s, w) {\n\
    return this._addConstraint(self, new c.Equation(e1, e2, this._strength(s), this._weight(w)));\n\
  };\n\
\n\
  Thread.prototype.lte = function(self, e1, e2, s, w) {\n\
    return this._addConstraint(self, new c.Inequality(e1, c.LEQ, e2, this._strength(s), this._weight(w)));\n\
  };\n\
\n\
  Thread.prototype.gte = function(self, e1, e2, s, w) {\n\
    return this._addConstraint(self, new c.Inequality(e1, c.GEQ, e2, this._strength(s), this._weight(w)));\n\
  };\n\
\n\
  Thread.prototype.lt = function(self, e1, e2, s, w) {\n\
    return this._addConstraint(self, new c.Inequality(e1, c.LEQ, e2, this._strength(s), this._weight(w)));\n\
  };\n\
\n\
  Thread.prototype.gt = function(self, e1, e2, s, w) {\n\
    return this._addConstraint(self, new c.Inequality(e1, c.GEQ, e2, this._strength(s), this._weight(w)));\n\
  };\n\
\n\
  Thread.prototype._editvar = function(varr, s, w) {\n\
    if (this.__editVarNames.indexOf(varr.name) === -1) {\n\
      this.__editVarNames.push(varr.name);\n\
      this.solver.addEditVar(varr, this._strength(s), this._weight(w));\n\
    }\n\
    return this;\n\
  };\n\
\n\
  Thread.prototype.suggest = function(self, varr, val, s, w) {\n\
    if (s == null) {\n\
      s = 'strong';\n\
    }\n\
    if (typeof varr === 'string') {\n\
      varr = this.get(self, varr);\n\
    }\n\
    this._editvar(varr, s, w);\n\
    this.solver.suggestValue(varr, val);\n\
    return this.solver.resolve();\n\
  };\n\
\n\
  Thread.prototype.stay = function(self) {\n\
    var args, v, _i, _len, _ref;\n\
    args = __slice.call(arguments);\n\
    _ref = args.slice(1, args.length);\n\
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n\
      v = _ref[_i];\n\
      this.solver.addStay(v);\n\
    }\n\
    return this.solver;\n\
  };\n\
\n\
  return Thread;\n\
\n\
})();\n\
\n\
if (typeof module !== \"undefined\" && module !== null ? module.exports : void 0) {\n\
  module.exports = Thread;\n\
}\n\
//@ sourceURL=the-gss-engine/lib/Thread.js"
));
require.register("the-gss-engine/lib/dom/Getter.js", Function("exports, require, module",
"var Getter, getScrollbarWidth, scrollbarWidth;\n\
\n\
getScrollbarWidth = function() {\n\
  var inner, outer, w1, w2;\n\
  inner = document.createElement(\"p\");\n\
  inner.style.width = \"100%\";\n\
  inner.style.height = \"200px\";\n\
  outer = document.createElement(\"div\");\n\
  outer.style.position = \"absolute\";\n\
  outer.style.top = \"0px\";\n\
  outer.style.left = \"0px\";\n\
  outer.style.visibility = \"hidden\";\n\
  outer.style.width = \"200px\";\n\
  outer.style.height = \"150px\";\n\
  outer.style.overflow = \"hidden\";\n\
  outer.style.zoom = \"document\";\n\
  outer.appendChild(inner);\n\
  document.body.appendChild(outer);\n\
  w1 = inner.offsetWidth;\n\
  outer.style.overflow = \"scroll\";\n\
  w2 = inner.offsetWidth;\n\
  if (w1 === w2) {\n\
    w2 = outer.clientWidth;\n\
  }\n\
  document.body.removeChild(outer);\n\
  return w1 - w2;\n\
};\n\
\n\
scrollbarWidth = null;\n\
\n\
Getter = (function() {\n\
  function Getter(scope) {\n\
    this.scope = scope;\n\
    this.styleNodes = null;\n\
    if (!this.scope) {\n\
      this.scope = document;\n\
    }\n\
  }\n\
\n\
  Getter.prototype.clean = function() {};\n\
\n\
  Getter.prototype.destroy = function() {\n\
    this.scope = null;\n\
    return this.styleNodes = null;\n\
  };\n\
\n\
  Getter.prototype.scrollbarWidth = function() {\n\
    if (!scrollbarWidth) {\n\
      scrollbarWidth = getScrollbarWidth();\n\
    }\n\
    return scrollbarWidth;\n\
  };\n\
\n\
  Getter.prototype.get = function(selector) {\n\
    var identifier, method;\n\
    method = selector[0];\n\
    identifier = selector[1];\n\
    switch (method) {\n\
      case \"$reserved\":\n\
        if (identifier === 'this') {\n\
          return this.scope;\n\
        }\n\
        break;\n\
      case \"$id\":\n\
        if (identifier[0] === '#') {\n\
          identifier = identifier.substr(1);\n\
        }\n\
        return document.getElementById(identifier);\n\
      case \"$class\":\n\
        if (identifier[0] === '.') {\n\
          identifier = identifier.substr(1);\n\
        }\n\
        return this.scope.getElementsByClassName(identifier);\n\
      case \"$tag\":\n\
        return this.scope.getElementsByTagName(identifier);\n\
    }\n\
    return this.scope.querySelectorAll(identifier);\n\
  };\n\
\n\
  Getter.prototype.measure = function(node, dimension) {\n\
    var scroll;\n\
    switch (dimension) {\n\
      case 'width':\n\
      case 'w':\n\
        return node.getBoundingClientRect().width;\n\
      case 'height':\n\
      case 'h':\n\
        return node.getBoundingClientRect().height;\n\
      case 'left':\n\
      case 'x':\n\
        scroll = window.scrollX || window.scrollLeft || 0;\n\
        return node.getBoundingClientRect().left + scroll;\n\
      case 'top':\n\
      case 'y':\n\
        scroll = window.scrollY || window.scrollTop || 0;\n\
        return node.getBoundingClientRect().top + scroll;\n\
      case 'bottom':\n\
        return this.measure(node, 'top') + this.measure(node, 'height');\n\
      case 'right':\n\
        return this.measure(node, 'left') + this.measure(node, 'width');\n\
      case 'centerX':\n\
        return this.measure(node, 'left') + this.measure(node, 'width') / 2;\n\
      case 'centerY':\n\
        return this.measure(node, 'top') + this.measure(node, 'height') / 2;\n\
    }\n\
  };\n\
\n\
  Getter.prototype.offsets = function(element) {\n\
    var offsets;\n\
    offsets = {\n\
      x: 0,\n\
      y: 0\n\
    };\n\
    if (!element.offsetParent) {\n\
      return offsets;\n\
    }\n\
    element = element.offsetParent;\n\
    while (true) {\n\
      offsets.x += element.offsetLeft;\n\
      offsets.y += element.offsetTop;\n\
      if (!element.offsetParent) {\n\
        break;\n\
      }\n\
      element = element.offsetParent;\n\
    }\n\
    return offsets;\n\
  };\n\
\n\
  Getter.prototype.view = function(node) {\n\
    if (typeof node === \"string\") {\n\
      return GSS.View.byId[node];\n\
    }\n\
    return GSS.View.byId[GSS.getId(node)];\n\
  };\n\
\n\
  Getter.prototype.getAllStyleNodes = function() {\n\
    return this.scope.getElementsByTagName(\"style\");\n\
  };\n\
\n\
  Getter.prototype.readAllASTs = function() {\n\
    var AST, ASTs, node, _i, _len, _ref;\n\
    ASTs = [];\n\
    _ref = this.getAllStyleNodes();\n\
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n\
      node = _ref[_i];\n\
      AST = this.readAST(node);\n\
      if (AST) {\n\
        ASTs.push(AST);\n\
      }\n\
    }\n\
    return ASTs;\n\
  };\n\
\n\
  Getter.prototype.scopeFor = function(node) {\n\
    if (this.isStyleNode(node)) {\n\
      return this.scopeForStyleNode(node);\n\
    } else {\n\
      return this.nearestScope(node);\n\
    }\n\
  };\n\
\n\
  Getter.prototype.isStyleNode = function(node) {\n\
    var mime, tagName;\n\
    tagName = node != null ? node.tagName : void 0;\n\
    if (tagName === \"STYLE\" || tagName === \"LINK\") {\n\
      mime = typeof node.getAttribute === \"function\" ? node.getAttribute(\"type\") : void 0;\n\
      if (mime) {\n\
        return mime.indexOf(\"text/gss\") === 0;\n\
      }\n\
    }\n\
    return false;\n\
  };\n\
\n\
  Getter.prototype.scopeForStyleNode = function(node) {\n\
    var scoped;\n\
    scoped = node.getAttribute('scoped');\n\
    if ((scoped != null) && scoped !== \"false\") {\n\
      return node.parentElement;\n\
    } else {\n\
      return Getter.getRootScope();\n\
    }\n\
  };\n\
\n\
  Getter.prototype.isScope = function(el) {\n\
    return !!(el != null ? el._gss_is_scope : void 0);\n\
  };\n\
\n\
  Getter.prototype.nearestScope = function(el, skipSelf) {\n\
    if (skipSelf == null) {\n\
      skipSelf = false;\n\
    }\n\
    if (skipSelf) {\n\
      el = el.parentElement;\n\
    }\n\
    while (el.parentElement) {\n\
      if (this.isScope(el)) {\n\
        return el;\n\
      }\n\
      el = el.parentElement;\n\
    }\n\
    return null;\n\
  };\n\
\n\
  Getter.prototype.nearestEngine = function(el, skipSelf) {\n\
    var scope;\n\
    if (skipSelf == null) {\n\
      skipSelf = false;\n\
    }\n\
    scope = this.nearestScope(el, skipSelf);\n\
    if (scope) {\n\
      return this.engine(scope);\n\
    }\n\
    return null;\n\
  };\n\
\n\
  Getter.prototype.descdendantNodes = function(el) {\n\
    return el.getElementsByTagName(\"*\");\n\
  };\n\
\n\
  Getter.prototype.engine = function(el) {\n\
    return GSS.engines.byId[GSS.getId(el)];\n\
  };\n\
\n\
  Getter.prototype.readAST = function(node) {\n\
    var mime, reader;\n\
    mime = node.getAttribute(\"type\");\n\
    reader = this[\"readAST:\" + mime];\n\
    if (reader) {\n\
      return reader.call(this, node);\n\
    }\n\
    return null;\n\
  };\n\
\n\
  Getter.prototype['readAST:text/gss-ast'] = function(node) {\n\
    var ast, e, source;\n\
    source = node.textContent.trim();\n\
    if (source.length === 0) {\n\
      return {};\n\
    }\n\
    try {\n\
      ast = JSON.parse(source);\n\
    } catch (_error) {\n\
      e = _error;\n\
      console.error(\"Parsing compiled gss error\", console.dir(e));\n\
    }\n\
    return ast;\n\
  };\n\
\n\
  Getter.prototype['readAST:text/gss'] = function(node) {\n\
    throw new Error(\"did not include GSS's compilers\");\n\
  };\n\
\n\
  return Getter;\n\
\n\
})();\n\
\n\
Getter.getRootScope = function() {\n\
  if (typeof ShadowDOMPolyfill === \"undefined\" || ShadowDOMPolyfill === null) {\n\
    return document.body;\n\
  } else {\n\
    return ShadowDOMPolyfill.wrap(document.body);\n\
  }\n\
};\n\
\n\
module.exports = Getter;\n\
//@ sourceURL=the-gss-engine/lib/dom/Getter.js"
));
require.register("the-gss-engine/lib/dom/IdMixin.js", Function("exports, require, module",
"var IdMixin, boxSizingPrefix;\n\
\n\
boxSizingPrefix = GSS._.boxSizingPrefix;\n\
\n\
IdMixin = {\n\
  uid: function() {\n\
    return this._id_counter++;\n\
  },\n\
  _id_counter: 1,\n\
  _byIdCache: {},\n\
  _ids_killed: function(ids) {\n\
    var id, _i, _len, _results;\n\
    _results = [];\n\
    for (_i = 0, _len = ids.length; _i < _len; _i++) {\n\
      id = ids[_i];\n\
      _results.push(this._id_killed(id));\n\
    }\n\
    return _results;\n\
  },\n\
  _id_killed: function(id) {\n\
    var _ref;\n\
    this._byIdCache[id] = null;\n\
    delete this._byIdCache[id];\n\
    return (_ref = GSS.View.byId[id]) != null ? typeof _ref.recycle === \"function\" ? _ref.recycle() : void 0 : void 0;\n\
  },\n\
  getById: function(id) {\n\
    var el;\n\
    if (this._byIdCache[id]) {\n\
      return this._byIdCache[id];\n\
    }\n\
    el = document.querySelector('[data-gss-id=\"' + id + '\"]');\n\
    if (el) {\n\
      this._byIdCache[id] = el;\n\
    }\n\
    return el;\n\
  },\n\
  setupScopeId: function(el) {\n\
    el._gss_is_scope = true;\n\
    return this.setupId(el);\n\
  },\n\
  setupId: function(el) {\n\
    var gid, _id;\n\
    if (!el) {\n\
      return null;\n\
    }\n\
    gid = this.getId(el);\n\
    if (gid == null) {\n\
      _id = this.uid();\n\
      gid = String(el.id || _id);\n\
      el.setAttribute('data-gss-id', gid);\n\
      el.style[boxSizingPrefix] = 'border-box';\n\
      el._gss_id = gid;\n\
      GSS.View[\"new\"]({\n\
        el: el,\n\
        id: gid\n\
      });\n\
      if (this._byIdCache[gid] != null) {\n\
        GSS.warn(\"element by id cache replaced gss-id: \" + gid);\n\
      }\n\
    }\n\
    this._byIdCache[gid] = el;\n\
    return gid;\n\
  },\n\
  getId: function(el) {\n\
    if (el != null ? el._gss_id : void 0) {\n\
      return el != null ? el._gss_id : void 0;\n\
    }\n\
    return null;\n\
  }\n\
};\n\
\n\
module.exports = IdMixin;\n\
//@ sourceURL=the-gss-engine/lib/dom/IdMixin.js"
));
require.register("the-gss-engine/vendor/gl-matrix.js", Function("exports, require, module",
"/**\n\
 * @fileoverview gl-matrix - High performance matrix and vector operations\n\
 * @author Brandon Jones\n\
 * @author Colin MacKenzie IV\n\
 * @version 2.2.0\n\
 */\n\
\n\
/* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.\n\
\n\
Redistribution and use in source and binary forms, with or without modification,\n\
are permitted provided that the following conditions are met:\n\
\n\
  * Redistributions of source code must retain the above copyright notice, this\n\
    list of conditions and the following disclaimer.\n\
  * Redistributions in binary form must reproduce the above copyright notice,\n\
    this list of conditions and the following disclaimer in the documentation \n\
    and/or other materials provided with the distribution.\n\
\n\
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n\
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n\
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE \n\
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\n\
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n\
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n\
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n\
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n\
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n\
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */\n\
\n\
\n\
(function(_global) {\n\
  \"use strict\";\n\
\n\
  var shim = {};\n\
  if (typeof(exports) === 'undefined') {\n\
    if(typeof define == 'function' && typeof define.amd == 'object' && define.amd) {\n\
      shim.exports = {};\n\
      define(function() {\n\
        return shim.exports;\n\
      });\n\
    } else {\n\
      // gl-matrix lives in a browser, define its namespaces in global\n\
      shim.exports = typeof(window) !== 'undefined' ? window : _global;\n\
    }\n\
  }\n\
  else {\n\
    // gl-matrix lives in commonjs, define its namespaces in exports\n\
    shim.exports = exports;\n\
  }\n\
\n\
  (function(exports) {\n\
    /* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.\n\
\n\
Redistribution and use in source and binary forms, with or without modification,\n\
are permitted provided that the following conditions are met:\n\
\n\
  * Redistributions of source code must retain the above copyright notice, this\n\
    list of conditions and the following disclaimer.\n\
  * Redistributions in binary form must reproduce the above copyright notice,\n\
    this list of conditions and the following disclaimer in the documentation \n\
    and/or other materials provided with the distribution.\n\
\n\
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n\
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n\
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE \n\
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\n\
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n\
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n\
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n\
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n\
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n\
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */\n\
\n\
\n\
if(!GLMAT_EPSILON) {\n\
    var GLMAT_EPSILON = 0.000001;\n\
}\n\
\n\
if(!GLMAT_ARRAY_TYPE) {\n\
    var GLMAT_ARRAY_TYPE = (typeof Float32Array !== 'undefined') ? Float32Array : Array;\n\
}\n\
\n\
if(!GLMAT_RANDOM) {\n\
    var GLMAT_RANDOM = Math.random;\n\
}\n\
\n\
/**\n\
 * @class Common utilities\n\
 * @name glMatrix\n\
 */\n\
var glMatrix = {};\n\
\n\
/**\n\
 * Sets the type of array used when creating new vectors and matricies\n\
 *\n\
 * @param {Type} type Array type, such as Float32Array or Array\n\
 */\n\
glMatrix.setMatrixArrayType = function(type) {\n\
    GLMAT_ARRAY_TYPE = type;\n\
}\n\
\n\
if(typeof(exports) !== 'undefined') {\n\
    exports.glMatrix = glMatrix;\n\
}\n\
\n\
var degree = Math.PI / 180;\n\
\n\
/**\n\
* Convert Degree To Radian\n\
*\n\
* @param {Number} Angle in Degrees\n\
*/\n\
glMatrix.toRadian = function(a){\n\
     return a * degree;\n\
}\n\
;\n\
/* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.\n\
\n\
Redistribution and use in source and binary forms, with or without modification,\n\
are permitted provided that the following conditions are met:\n\
\n\
  * Redistributions of source code must retain the above copyright notice, this\n\
    list of conditions and the following disclaimer.\n\
  * Redistributions in binary form must reproduce the above copyright notice,\n\
    this list of conditions and the following disclaimer in the documentation \n\
    and/or other materials provided with the distribution.\n\
\n\
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n\
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n\
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE \n\
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\n\
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n\
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n\
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n\
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n\
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n\
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */\n\
\n\
/**\n\
 * @class 2 Dimensional Vector\n\
 * @name vec2\n\
 */\n\
\n\
var vec2 = {};\n\
\n\
/**\n\
 * Creates a new, empty vec2\n\
 *\n\
 * @returns {vec2} a new 2D vector\n\
 */\n\
vec2.create = function() {\n\
    var out = new GLMAT_ARRAY_TYPE(2);\n\
    out[0] = 0;\n\
    out[1] = 0;\n\
    return out;\n\
};\n\
\n\
/**\n\
 * Creates a new vec2 initialized with values from an existing vector\n\
 *\n\
 * @param {vec2} a vector to clone\n\
 * @returns {vec2} a new 2D vector\n\
 */\n\
vec2.clone = function(a) {\n\
    var out = new GLMAT_ARRAY_TYPE(2);\n\
    out[0] = a[0];\n\
    out[1] = a[1];\n\
    return out;\n\
};\n\
\n\
/**\n\
 * Creates a new vec2 initialized with the given values\n\
 *\n\
 * @param {Number} x X component\n\
 * @param {Number} y Y component\n\
 * @returns {vec2} a new 2D vector\n\
 */\n\
vec2.fromValues = function(x, y) {\n\
    var out = new GLMAT_ARRAY_TYPE(2);\n\
    out[0] = x;\n\
    out[1] = y;\n\
    return out;\n\
};\n\
\n\
/**\n\
 * Copy the values from one vec2 to another\n\
 *\n\
 * @param {vec2} out the receiving vector\n\
 * @param {vec2} a the source vector\n\
 * @returns {vec2} out\n\
 */\n\
vec2.copy = function(out, a) {\n\
    out[0] = a[0];\n\
    out[1] = a[1];\n\
    return out;\n\
};\n\
\n\
/**\n\
 * Set the components of a vec2 to the given values\n\
 *\n\
 * @param {vec2} out the receiving vector\n\
 * @param {Number} x X component\n\
 * @param {Number} y Y component\n\
 * @returns {vec2} out\n\
 */\n\
vec2.set = function(out, x, y) {\n\
    out[0] = x;\n\
    out[1] = y;\n\
    return out;\n\
};\n\
\n\
/**\n\
 * Adds two vec2's\n\
 *\n\
 * @param {vec2} out the receiving vector\n\
 * @param {vec2} a the first operand\n\
 * @param {vec2} b the second operand\n\
 * @returns {vec2} out\n\
 */\n\
vec2.add = function(out, a, b) {\n\
    out[0] = a[0] + b[0];\n\
    out[1] = a[1] + b[1];\n\
    return out;\n\
};\n\
\n\
/**\n\
 * Subtracts vector b from vector a\n\
 *\n\
 * @param {vec2} out the receiving vector\n\
 * @param {vec2} a the first operand\n\
 * @param {vec2} b the second operand\n\
 * @returns {vec2} out\n\
 */\n\
vec2.subtract = function(out, a, b) {\n\
    out[0] = a[0] - b[0];\n\
    out[1] = a[1] - b[1];\n\
    return out;\n\
};\n\
\n\
/**\n\
 * Alias for {@link vec2.subtract}\n\
 * @function\n\
 */\n\
vec2.sub = vec2.subtract;\n\
\n\
/**\n\
 * Multiplies two vec2's\n\
 *\n\
 * @param {vec2} out the receiving vector\n\
 * @param {vec2} a the first operand\n\
 * @param {vec2} b the second operand\n\
 * @returns {vec2} out\n\
 */\n\
vec2.multiply = function(out, a, b) {\n\
    out[0] = a[0] * b[0];\n\
    out[1] = a[1] * b[1];\n\
    return out;\n\
};\n\
\n\
/**\n\
 * Alias for {@link vec2.multiply}\n\
 * @function\n\
 */\n\
vec2.mul = vec2.multiply;\n\
\n\
/**\n\
 * Divides two vec2's\n\
 *\n\
 * @param {vec2} out the receiving vector\n\
 * @param {vec2} a the first operand\n\
 * @param {vec2} b the second operand\n\
 * @returns {vec2} out\n\
 */\n\
vec2.divide = function(out, a, b) {\n\
    out[0] = a[0] / b[0];\n\
    out[1] = a[1] / b[1];\n\
    return out;\n\
};\n\
\n\
/**\n\
 * Alias for {@link vec2.divide}\n\
 * @function\n\
 */\n\
vec2.div = vec2.divide;\n\
\n\
/**\n\
 * Returns the minimum of two vec2's\n\
 *\n\
 * @param {vec2} out the receiving vector\n\
 * @param {vec2} a the first operand\n\
 * @param {vec2} b the second operand\n\
 * @returns {vec2} out\n\
 */\n\
vec2.min = function(out, a, b) {\n\
    out[0] = Math.min(a[0], b[0]);\n\
    out[1] = Math.min(a[1], b[1]);\n\
    return out;\n\
};\n\
\n\
/**\n\
 * Returns the maximum of two vec2's\n\
 *\n\
 * @param {vec2} out the receiving vector\n\
 * @param {vec2} a the first operand\n\
 * @param {vec2} b the second operand\n\
 * @returns {vec2} out\n\
 */\n\
vec2.max = function(out, a, b) {\n\
    out[0] = Math.max(a[0], b[0]);\n\
    out[1] = Math.max(a[1], b[1]);\n\
    return out;\n\
};\n\
\n\
/**\n\
 * Scales a vec2 by a scalar number\n\
 *\n\
 * @param {vec2} out the receiving vector\n\
 * @param {vec2} a the vector to scale\n\
 * @param {Number} b amount to scale the vector by\n\
 * @returns {vec2} out\n\
 */\n\
vec2.scale = function(out, a, b) {\n\
    out[0] = a[0] * b;\n\
    out[1] = a[1] * b;\n\
    return out;\n\
};\n\
\n\
/**\n\
 * Adds two vec2's after scaling the second operand by a scalar value\n\
 *\n\
 * @param {vec2} out the receiving vector\n\
 * @param {vec2} a the first operand\n\
 * @param {vec2} b the second operand\n\
 * @param {Number} scale the amount to scale b by before adding\n\
 * @returns {vec2} out\n\
 */\n\
vec2.scaleAndAdd = function(out, a, b, scale) {\n\
    out[0] = a[0] + (b[0] * scale);\n\
    out[1] = a[1] + (b[1] * scale);\n\
    return out;\n\
};\n\
\n\
/**\n\
 * Calculates the euclidian distance between two vec2's\n\
 *\n\
 * @param {vec2} a the first operand\n\
 * @param {vec2} b the second operand\n\
 * @returns {Number} distance between a and b\n\
 */\n\
vec2.distance = function(a, b) {\n\
    var x = b[0] - a[0],\n\
        y = b[1] - a[1];\n\
    return Math.sqrt(x*x + y*y);\n\
};\n\
\n\
/**\n\
 * Alias for {@link vec2.distance}\n\
 * @function\n\
 */\n\
vec2.dist = vec2.distance;\n\
\n\
/**\n\
 * Calculates the squared euclidian distance between two vec2's\n\
 *\n\
 * @param {vec2} a the first operand\n\
 * @param {vec2} b the second operand\n\
 * @returns {Number} squared distance between a and b\n\
 */\n\
vec2.squaredDistance = function(a, b) {\n\
    var x = b[0] - a[0],\n\
        y = b[1] - a[1];\n\
    return x*x + y*y;\n\
};\n\
\n\
/**\n\
 * Alias for {@link vec2.squaredDistance}\n\
 * @function\n\
 */\n\
vec2.sqrDist = vec2.squaredDistance;\n\
\n\
/**\n\
 * Calculates the length of a vec2\n\
 *\n\
 * @param {vec2} a vector to calculate length of\n\
 * @returns {Number} length of a\n\
 */\n\
vec2.length = function (a) {\n\
    var x = a[0],\n\
        y = a[1];\n\
    return Math.sqrt(x*x + y*y);\n\
};\n\
\n\
/**\n\
 * Alias for {@link vec2.length}\n\
 * @function\n\
 */\n\
vec2.len = vec2.length;\n\
\n\
/**\n\
 * Calculates the squared length of a vec2\n\
 *\n\
 * @param {vec2} a vector to calculate squared length of\n\
 * @returns {Number} squared length of a\n\
 */\n\
vec2.squaredLength = function (a) {\n\
    var x = a[0],\n\
        y = a[1];\n\
    return x*x + y*y;\n\
};\n\
\n\
/**\n\
 * Alias for {@link vec2.squaredLength}\n\
 * @function\n\
 */\n\
vec2.sqrLen = vec2.squaredLength;\n\
\n\
/**\n\
 * Negates the components of a vec2\n\
 *\n\
 * @param {vec2} out the receiving vector\n\
 * @param {vec2} a vector to negate\n\
 * @returns {vec2} out\n\
 */\n\
vec2.negate = function(out, a) {\n\
    out[0] = -a[0];\n\
    out[1] = -a[1];\n\
    return out;\n\
};\n\
\n\
/**\n\
 * Normalize a vec2\n\
 *\n\
 * @param {vec2} out the receiving vector\n\
 * @param {vec2} a vector to normalize\n\
 * @returns {vec2} out\n\
 */\n\
vec2.normalize = function(out, a) {\n\
    var x = a[0],\n\
        y = a[1];\n\
    var len = x*x + y*y;\n\
    if (len > 0) {\n\
        //TODO: evaluate use of glm_invsqrt here?\n\
        len = 1 / Math.sqrt(len);\n\
        out[0] = a[0] * len;\n\
        out[1] = a[1] * len;\n\
    }\n\
    return out;\n\
};\n\
\n\
/**\n\
 * Calculates the dot product of two vec2's\n\
 *\n\
 * @param {vec2} a the first operand\n\
 * @param {vec2} b the second operand\n\
 * @returns {Number} dot product of a and b\n\
 */\n\
vec2.dot = function (a, b) {\n\
    return a[0] * b[0] + a[1] * b[1];\n\
};\n\
\n\
/**\n\
 * Computes the cross product of two vec2's\n\
 * Note that the cross product must by definition produce a 3D vector\n\
 *\n\
 * @param {vec3} out the receiving vector\n\
 * @param {vec2} a the first operand\n\
 * @param {vec2} b the second operand\n\
 * @returns {vec3} out\n\
 */\n\
vec2.cross = function(out, a, b) {\n\
    var z = a[0] * b[1] - a[1] * b[0];\n\
    out[0] = out[1] = 0;\n\
    out[2] = z;\n\
    return out;\n\
};\n\
\n\
/**\n\
 * Performs a linear interpolation between two vec2's\n\
 *\n\
 * @param {vec2} out the receiving vector\n\
 * @param {vec2} a the first operand\n\
 * @param {vec2} b the second operand\n\
 * @param {Number} t interpolation amount between the two inputs\n\
 * @returns {vec2} out\n\
 */\n\
vec2.lerp = function (out, a, b, t) {\n\
    var ax = a[0],\n\
        ay = a[1];\n\
    out[0] = ax + t * (b[0] - ax);\n\
    out[1] = ay + t * (b[1] - ay);\n\
    return out;\n\
};\n\
\n\
/**\n\
 * Generates a random vector with the given scale\n\
 *\n\
 * @param {vec2} out the receiving vector\n\
 * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n\
 * @returns {vec2} out\n\
 */\n\
vec2.random = function (out, scale) {\n\
    scale = scale || 1.0;\n\
    var r = GLMAT_RANDOM() * 2.0 * Math.PI;\n\
    out[0] = Math.cos(r) * scale;\n\
    out[1] = Math.sin(r) * scale;\n\
    return out;\n\
};\n\
\n\
/**\n\
 * Transforms the vec2 with a mat2\n\
 *\n\
 * @param {vec2} out the receiving vector\n\
 * @param {vec2} a the vector to transform\n\
 * @param {mat2} m matrix to transform with\n\
 * @returns {vec2} out\n\
 */\n\
vec2.transformMat2 = function(out, a, m) {\n\
    var x = a[0],\n\
        y = a[1];\n\
    out[0] = m[0] * x + m[2] * y;\n\
    out[1] = m[1] * x + m[3] * y;\n\
    return out;\n\
};\n\
\n\
/**\n\
 * Transforms the vec2 with a mat2d\n\
 *\n\
 * @param {vec2} out the receiving vector\n\
 * @param {vec2} a the vector to transform\n\
 * @param {mat2d} m matrix to transform with\n\
 * @returns {vec2} out\n\
 */\n\
vec2.transformMat2d = function(out, a, m) {\n\
    var x = a[0],\n\
        y = a[1];\n\
    out[0] = m[0] * x + m[2] * y + m[4];\n\
    out[1] = m[1] * x + m[3] * y + m[5];\n\
    return out;\n\
};\n\
\n\
/**\n\
 * Transforms the vec2 with a mat3\n\
 * 3rd vector component is implicitly '1'\n\
 *\n\
 * @param {vec2} out the receiving vector\n\
 * @param {vec2} a the vector to transform\n\
 * @param {mat3} m matrix to transform with\n\
 * @returns {vec2} out\n\
 */\n\
vec2.transformMat3 = function(out, a, m) {\n\
    var x = a[0],\n\
        y = a[1];\n\
    out[0] = m[0] * x + m[3] * y + m[6];\n\
    out[1] = m[1] * x + m[4] * y + m[7];\n\
    return out;\n\
};\n\
\n\
/**\n\
 * Transforms the vec2 with a mat4\n\
 * 3rd vector component is implicitly '0'\n\
 * 4th vector component is implicitly '1'\n\
 *\n\
 * @param {vec2} out the receiving vector\n\
 * @param {vec2} a the vector to transform\n\
 * @param {mat4} m matrix to transform with\n\
 * @returns {vec2} out\n\
 */\n\
vec2.transformMat4 = function(out, a, m) {\n\
    var x = a[0], \n\
        y = a[1];\n\
    out[0] = m[0] * x + m[4] * y + m[12];\n\
    out[1] = m[1] * x + m[5] * y + m[13];\n\
    return out;\n\
};\n\
\n\
/**\n\
 * Perform some operation over an array of vec2s.\n\
 *\n\
 * @param {Array} a the array of vectors to iterate over\n\
 * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\n\
 * @param {Number} offset Number of elements to skip at the beginning of the array\n\
 * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\n\
 * @param {Function} fn Function to call for each vector in the array\n\
 * @param {Object} [arg] additional argument to pass to fn\n\
 * @returns {Array} a\n\
 * @function\n\
 */\n\
vec2.forEach = (function() {\n\
    var vec = vec2.create();\n\
\n\
    return function(a, stride, offset, count, fn, arg) {\n\
        var i, l;\n\
        if(!stride) {\n\
            stride = 2;\n\
        }\n\
\n\
        if(!offset) {\n\
            offset = 0;\n\
        }\n\
        \n\
        if(count) {\n\
            l = Math.min((count * stride) + offset, a.length);\n\
        } else {\n\
            l = a.length;\n\
        }\n\
\n\
        for(i = offset; i < l; i += stride) {\n\
            vec[0] = a[i]; vec[1] = a[i+1];\n\
            fn(vec, vec, arg);\n\
            a[i] = vec[0]; a[i+1] = vec[1];\n\
        }\n\
        \n\
        return a;\n\
    };\n\
})();\n\
\n\
/**\n\
 * Returns a string representation of a vector\n\
 *\n\
 * @param {vec2} vec vector to represent as a string\n\
 * @returns {String} string representation of the vector\n\
 */\n\
vec2.str = function (a) {\n\
    return 'vec2(' + a[0] + ', ' + a[1] + ')';\n\
};\n\
\n\
if(typeof(exports) !== 'undefined') {\n\
    exports.vec2 = vec2;\n\
}\n\
;\n\
/* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.\n\
\n\
Redistribution and use in source and binary forms, with or without modification,\n\
are permitted provided that the following conditions are met:\n\
\n\
  * Redistributions of source code must retain the above copyright notice, this\n\
    list of conditions and the following disclaimer.\n\
  * Redistributions in binary form must reproduce the above copyright notice,\n\
    this list of conditions and the following disclaimer in the documentation \n\
    and/or other materials provided with the distribution.\n\
\n\
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n\
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n\
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE \n\
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\n\
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n\
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n\
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n\
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n\
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n\
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */\n\
\n\
/**\n\
 * @class 3 Dimensional Vector\n\
 * @name vec3\n\
 */\n\
\n\
var vec3 = {};\n\
\n\
/**\n\
 * Creates a new, empty vec3\n\
 *\n\
 * @returns {vec3} a new 3D vector\n\
 */\n\
vec3.create = function() {\n\
    var out = new GLMAT_ARRAY_TYPE(3);\n\
    out[0] = 0;\n\
    out[1] = 0;\n\
    out[2] = 0;\n\
    return out;\n\
};\n\
\n\
/**\n\
 * Creates a new vec3 initialized with values from an existing vector\n\
 *\n\
 * @param {vec3} a vector to clone\n\
 * @returns {vec3} a new 3D vector\n\
 */\n\
vec3.clone = function(a) {\n\
    var out = new GLMAT_ARRAY_TYPE(3);\n\
    out[0] = a[0];\n\
    out[1] = a[1];\n\
    out[2] = a[2];\n\
    return out;\n\
};\n\
\n\
/**\n\
 * Creates a new vec3 initialized with the given values\n\
 *\n\
 * @param {Number} x X component\n\
 * @param {Number} y Y component\n\
 * @param {Number} z Z component\n\
 * @returns {vec3} a new 3D vector\n\
 */\n\
vec3.fromValues = function(x, y, z) {\n\
    var out = new GLMAT_ARRAY_TYPE(3);\n\
    out[0] = x;\n\
    out[1] = y;\n\
    out[2] = z;\n\
    return out;\n\
};\n\
\n\
/**\n\
 * Copy the values from one vec3 to another\n\
 *\n\
 * @param {vec3} out the receiving vector\n\
 * @param {vec3} a the source vector\n\
 * @returns {vec3} out\n\
 */\n\
vec3.copy = function(out, a) {\n\
    out[0] = a[0];\n\
    out[1] = a[1];\n\
    out[2] = a[2];\n\
    return out;\n\
};\n\
\n\
/**\n\
 * Set the components of a vec3 to the given values\n\
 *\n\
 * @param {vec3} out the receiving vector\n\
 * @param {Number} x X component\n\
 * @param {Number} y Y component\n\
 * @param {Number} z Z component\n\
 * @returns {vec3} out\n\
 */\n\
vec3.set = function(out, x, y, z) {\n\
    out[0] = x;\n\
    out[1] = y;\n\
    out[2] = z;\n\
    return out;\n\
};\n\
\n\
/**\n\
 * Adds two vec3's\n\
 *\n\
 * @param {vec3} out the receiving vector\n\
 * @param {vec3} a the first operand\n\
 * @param {vec3} b the second operand\n\
 * @returns {vec3} out\n\
 */\n\
vec3.add = function(out, a, b) {\n\
    out[0] = a[0] + b[0];\n\
    out[1] = a[1] + b[1];\n\
    out[2] = a[2] + b[2];\n\
    return out;\n\
};\n\
\n\
/**\n\
 * Subtracts vector b from vector a\n\
 *\n\
 * @param {vec3} out the receiving vector\n\
 * @param {vec3} a the first operand\n\
 * @param {vec3} b the second operand\n\
 * @returns {vec3} out\n\
 */\n\
vec3.subtract = function(out, a, b) {\n\
    out[0] = a[0] - b[0];\n\
    out[1] = a[1] - b[1];\n\
    out[2] = a[2] - b[2];\n\
    return out;\n\
};\n\
\n\
/**\n\
 * Alias for {@link vec3.subtract}\n\
 * @function\n\
 */\n\
vec3.sub = vec3.subtract;\n\
\n\
/**\n\
 * Multiplies two vec3's\n\
 *\n\
 * @param {vec3} out the receiving vector\n\
 * @param {vec3} a the first operand\n\
 * @param {vec3} b the second operand\n\
 * @returns {vec3} out\n\
 */\n\
vec3.multiply = function(out, a, b) {\n\
    out[0] = a[0] * b[0];\n\
    out[1] = a[1] * b[1];\n\
    out[2] = a[2] * b[2];\n\
    return out;\n\
};\n\
\n\
/**\n\
 * Alias for {@link vec3.multiply}\n\
 * @function\n\
 */\n\
vec3.mul = vec3.multiply;\n\
\n\
/**\n\
 * Divides two vec3's\n\
 *\n\
 * @param {vec3} out the receiving vector\n\
 * @param {vec3} a the first operand\n\
 * @param {vec3} b the second operand\n\
 * @returns {vec3} out\n\
 */\n\
vec3.divide = function(out, a, b) {\n\
    out[0] = a[0] / b[0];\n\
    out[1] = a[1] / b[1];\n\
    out[2] = a[2] / b[2];\n\
    return out;\n\
};\n\
\n\
/**\n\
 * Alias for {@link vec3.divide}\n\
 * @function\n\
 */\n\
vec3.div = vec3.divide;\n\
\n\
/**\n\
 * Returns the minimum of two vec3's\n\
 *\n\
 * @param {vec3} out the receiving vector\n\
 * @param {vec3} a the first operand\n\
 * @param {vec3} b the second operand\n\
 * @returns {vec3} out\n\
 */\n\
vec3.min = function(out, a, b) {\n\
    out[0] = Math.min(a[0], b[0]);\n\
    out[1] = Math.min(a[1], b[1]);\n\
    out[2] = Math.min(a[2], b[2]);\n\
    return out;\n\
};\n\
\n\
/**\n\
 * Returns the maximum of two vec3's\n\
 *\n\
 * @param {vec3} out the receiving vector\n\
 * @param {vec3} a the first operand\n\
 * @param {vec3} b the second operand\n\
 * @returns {vec3} out\n\
 */\n\
vec3.max = function(out, a, b) {\n\
    out[0] = Math.max(a[0], b[0]);\n\
    out[1] = Math.max(a[1], b[1]);\n\
    out[2] = Math.max(a[2], b[2]);\n\
    return out;\n\
};\n\
\n\
/**\n\
 * Scales a vec3 by a scalar number\n\
 *\n\
 * @param {vec3} out the receiving vector\n\
 * @param {vec3} a the vector to scale\n\
 * @param {Number} b amount to scale the vector by\n\
 * @returns {vec3} out\n\
 */\n\
vec3.scale = function(out, a, b) {\n\
    out[0] = a[0] * b;\n\
    out[1] = a[1] * b;\n\
    out[2] = a[2] * b;\n\
    return out;\n\
};\n\
\n\
/**\n\
 * Adds two vec3's after scaling the second operand by a scalar value\n\
 *\n\
 * @param {vec3} out the receiving vector\n\
 * @param {vec3} a the first operand\n\
 * @param {vec3} b the second operand\n\
 * @param {Number} scale the amount to scale b by before adding\n\
 * @returns {vec3} out\n\
 */\n\
vec3.scaleAndAdd = function(out, a, b, scale) {\n\
    out[0] = a[0] + (b[0] * scale);\n\
    out[1] = a[1] + (b[1] * scale);\n\
    out[2] = a[2] + (b[2] * scale);\n\
    return out;\n\
};\n\
\n\
/**\n\
 * Calculates the euclidian distance between two vec3's\n\
 *\n\
 * @param {vec3} a the first operand\n\
 * @param {vec3} b the second operand\n\
 * @returns {Number} distance between a and b\n\
 */\n\
vec3.distance = function(a, b) {\n\
    var x = b[0] - a[0],\n\
        y = b[1] - a[1],\n\
        z = b[2] - a[2];\n\
    return Math.sqrt(x*x + y*y + z*z);\n\
};\n\
\n\
/**\n\
 * Alias for {@link vec3.distance}\n\
 * @function\n\
 */\n\
vec3.dist = vec3.distance;\n\
\n\
/**\n\
 * Calculates the squared euclidian distance between two vec3's\n\
 *\n\
 * @param {vec3} a the first operand\n\
 * @param {vec3} b the second operand\n\
 * @returns {Number} squared distance between a and b\n\
 */\n\
vec3.squaredDistance = function(a, b) {\n\
    var x = b[0] - a[0],\n\
        y = b[1] - a[1],\n\
        z = b[2] - a[2];\n\
    return x*x + y*y + z*z;\n\
};\n\
\n\
/**\n\
 * Alias for {@link vec3.squaredDistance}\n\
 * @function\n\
 */\n\
vec3.sqrDist = vec3.squaredDistance;\n\
\n\
/**\n\
 * Calculates the length of a vec3\n\
 *\n\
 * @param {vec3} a vector to calculate length of\n\
 * @returns {Number} length of a\n\
 */\n\
vec3.length = function (a) {\n\
    var x = a[0],\n\
        y = a[1],\n\
        z = a[2];\n\
    return Math.sqrt(x*x + y*y + z*z);\n\
};\n\
\n\
/**\n\
 * Alias for {@link vec3.length}\n\
 * @function\n\
 */\n\
vec3.len = vec3.length;\n\
\n\
/**\n\
 * Calculates the squared length of a vec3\n\
 *\n\
 * @param {vec3} a vector to calculate squared length of\n\
 * @returns {Number} squared length of a\n\
 */\n\
vec3.squaredLength = function (a) {\n\
    var x = a[0],\n\
        y = a[1],\n\
        z = a[2];\n\
    return x*x + y*y + z*z;\n\
};\n\
\n\
/**\n\
 * Alias for {@link vec3.squaredLength}\n\
 * @function\n\
 */\n\
vec3.sqrLen = vec3.squaredLength;\n\
\n\
/**\n\
 * Negates the components of a vec3\n\
 *\n\
 * @param {vec3} out the receiving vector\n\
 * @param {vec3} a vector to negate\n\
 * @returns {vec3} out\n\
 */\n\
vec3.negate = function(out, a) {\n\
    out[0] = -a[0];\n\
    out[1] = -a[1];\n\
    out[2] = -a[2];\n\
    return out;\n\
};\n\
\n\
/**\n\
 * Normalize a vec3\n\
 *\n\
 * @param {vec3} out the receiving vector\n\
 * @param {vec3} a vector to normalize\n\
 * @returns {vec3} out\n\
 */\n\
vec3.normalize = function(out, a) {\n\
    var x = a[0],\n\
        y = a[1],\n\
        z = a[2];\n\
    var len = x*x + y*y + z*z;\n\
    if (len > 0) {\n\
        //TODO: evaluate use of glm_invsqrt here?\n\
        len = 1 / Math.sqrt(len);\n\
        out[0] = a[0] * len;\n\
        out[1] = a[1] * len;\n\
        out[2] = a[2] * len;\n\
    }\n\
    return out;\n\
};\n\
\n\
/**\n\
 * Calculates the dot product of two vec3's\n\
 *\n\
 * @param {vec3} a the first operand\n\
 * @param {vec3} b the second operand\n\
 * @returns {Number} dot product of a and b\n\
 */\n\
vec3.dot = function (a, b) {\n\
    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n\
};\n\
\n\
/**\n\
 * Computes the cross product of two vec3's\n\
 *\n\
 * @param {vec3} out the receiving vector\n\
 * @param {vec3} a the first operand\n\
 * @param {vec3} b the second operand\n\
 * @returns {vec3} out\n\
 */\n\
vec3.cross = function(out, a, b) {\n\
    var ax = a[0], ay = a[1], az = a[2],\n\
        bx = b[0], by = b[1], bz = b[2];\n\
\n\
    out[0] = ay * bz - az * by;\n\
    out[1] = az * bx - ax * bz;\n\
    out[2] = ax * by - ay * bx;\n\
    return out;\n\
};\n\
\n\
/**\n\
 * Performs a linear interpolation between two vec3's\n\
 *\n\
 * @param {vec3} out the receiving vector\n\
 * @param {vec3} a the first operand\n\
 * @param {vec3} b the second operand\n\
 * @param {Number} t interpolation amount between the two inputs\n\
 * @returns {vec3} out\n\
 */\n\
vec3.lerp = function (out, a, b, t) {\n\
    var ax = a[0],\n\
        ay = a[1],\n\
        az = a[2];\n\
    out[0] = ax + t * (b[0] - ax);\n\
    out[1] = ay + t * (b[1] - ay);\n\
    out[2] = az + t * (b[2] - az);\n\
    return out;\n\
};\n\
\n\
/**\n\
 * Generates a random vector with the given scale\n\
 *\n\
 * @param {vec3} out the receiving vector\n\
 * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n\
 * @returns {vec3} out\n\
 */\n\
vec3.random = function (out, scale) {\n\
    scale = scale || 1.0;\n\
\n\
    var r = GLMAT_RANDOM() * 2.0 * Math.PI;\n\
    var z = (GLMAT_RANDOM() * 2.0) - 1.0;\n\
    var zScale = Math.sqrt(1.0-z*z) * scale;\n\
\n\
    out[0] = Math.cos(r) * zScale;\n\
    out[1] = Math.sin(r) * zScale;\n\
    out[2] = z * scale;\n\
    return out;\n\
};\n\
\n\
/**\n\
 * Transforms the vec3 with a mat4.\n\
 * 4th vector component is implicitly '1'\n\
 *\n\
 * @param {vec3} out the receiving vector\n\
 * @param {vec3} a the vector to transform\n\
 * @param {mat4} m matrix to transform with\n\
 * @returns {vec3} out\n\
 */\n\
vec3.transformMat4 = function(out, a, m) {\n\
    var x = a[0], y = a[1], z = a[2];\n\
    out[0] = m[0] * x + m[4] * y + m[8] * z + m[12];\n\
    out[1] = m[1] * x + m[5] * y + m[9] * z + m[13];\n\
    out[2] = m[2] * x + m[6] * y + m[10] * z + m[14];\n\
    return out;\n\
};\n\
\n\
/**\n\
 * Transforms the vec3 with a mat3.\n\
 *\n\
 * @param {vec3} out the receiving vector\n\
 * @param {vec3} a the vector to transform\n\
 * @param {mat4} m the 3x3 matrix to transform with\n\
 * @returns {vec3} out\n\
 */\n\
vec3.transformMat3 = function(out, a, m) {\n\
    var x = a[0], y = a[1], z = a[2];\n\
    out[0] = x * m[0] + y * m[3] + z * m[6];\n\
    out[1] = x * m[1] + y * m[4] + z * m[7];\n\
    out[2] = x * m[2] + y * m[5] + z * m[8];\n\
    return out;\n\
};\n\
\n\
/**\n\
 * Transforms the vec3 with a quat\n\
 *\n\
 * @param {vec3} out the receiving vector\n\
 * @param {vec3} a the vector to transform\n\
 * @param {quat} q quaternion to transform with\n\
 * @returns {vec3} out\n\
 */\n\
vec3.transformQuat = function(out, a, q) {\n\
    // benchmarks: http://jsperf.com/quaternion-transform-vec3-implementations\n\
\n\
    var x = a[0], y = a[1], z = a[2],\n\
        qx = q[0], qy = q[1], qz = q[2], qw = q[3],\n\
\n\
        // calculate quat * vec\n\
        ix = qw * x + qy * z - qz * y,\n\
        iy = qw * y + qz * x - qx * z,\n\
        iz = qw * z + qx * y - qy * x,\n\
        iw = -qx * x - qy * y - qz * z;\n\
\n\
    // calculate result * inverse quat\n\
    out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n\
    out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n\
    out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n\
    return out;\n\
};\n\
\n\
/**\n\
 * Perform some operation over an array of vec3s.\n\
 *\n\
 * @param {Array} a the array of vectors to iterate over\n\
 * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\n\
 * @param {Number} offset Number of elements to skip at the beginning of the array\n\
 * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\n\
 * @param {Function} fn Function to call for each vector in the array\n\
 * @param {Object} [arg] additional argument to pass to fn\n\
 * @returns {Array} a\n\
 * @function\n\
 */\n\
vec3.forEach = (function() {\n\
    var vec = vec3.create();\n\
\n\
    return function(a, stride, offset, count, fn, arg) {\n\
        var i, l;\n\
        if(!stride) {\n\
            stride = 3;\n\
        }\n\
\n\
        if(!offset) {\n\
            offset = 0;\n\
        }\n\
        \n\
        if(count) {\n\
            l = Math.min((count * stride) + offset, a.length);\n\
        } else {\n\
            l = a.length;\n\
        }\n\
\n\
        for(i = offset; i < l; i += stride) {\n\
            vec[0] = a[i]; vec[1] = a[i+1]; vec[2] = a[i+2];\n\
            fn(vec, vec, arg);\n\
            a[i] = vec[0]; a[i+1] = vec[1]; a[i+2] = vec[2];\n\
        }\n\
        \n\
        return a;\n\
    };\n\
})();\n\
\n\
/**\n\
 * Returns a string representation of a vector\n\
 *\n\
 * @param {vec3} vec vector to represent as a string\n\
 * @returns {String} string representation of the vector\n\
 */\n\
vec3.str = function (a) {\n\
    return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';\n\
};\n\
\n\
if(typeof(exports) !== 'undefined') {\n\
    exports.vec3 = vec3;\n\
}\n\
;\n\
/* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.\n\
\n\
Redistribution and use in source and binary forms, with or without modification,\n\
are permitted provided that the following conditions are met:\n\
\n\
  * Redistributions of source code must retain the above copyright notice, this\n\
    list of conditions and the following disclaimer.\n\
  * Redistributions in binary form must reproduce the above copyright notice,\n\
    this list of conditions and the following disclaimer in the documentation \n\
    and/or other materials provided with the distribution.\n\
\n\
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n\
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n\
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE \n\
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\n\
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n\
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n\
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n\
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n\
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n\
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */\n\
\n\
/**\n\
 * @class 4 Dimensional Vector\n\
 * @name vec4\n\
 */\n\
\n\
var vec4 = {};\n\
\n\
/**\n\
 * Creates a new, empty vec4\n\
 *\n\
 * @returns {vec4} a new 4D vector\n\
 */\n\
vec4.create = function() {\n\
    var out = new GLMAT_ARRAY_TYPE(4);\n\
    out[0] = 0;\n\
    out[1] = 0;\n\
    out[2] = 0;\n\
    out[3] = 0;\n\
    return out;\n\
};\n\
\n\
/**\n\
 * Creates a new vec4 initialized with values from an existing vector\n\
 *\n\
 * @param {vec4} a vector to clone\n\
 * @returns {vec4} a new 4D vector\n\
 */\n\
vec4.clone = function(a) {\n\
    var out = new GLMAT_ARRAY_TYPE(4);\n\
    out[0] = a[0];\n\
    out[1] = a[1];\n\
    out[2] = a[2];\n\
    out[3] = a[3];\n\
    return out;\n\
};\n\
\n\
/**\n\
 * Creates a new vec4 initialized with the given values\n\
 *\n\
 * @param {Number} x X component\n\
 * @param {Number} y Y component\n\
 * @param {Number} z Z component\n\
 * @param {Number} w W component\n\
 * @returns {vec4} a new 4D vector\n\
 */\n\
vec4.fromValues = function(x, y, z, w) {\n\
    var out = new GLMAT_ARRAY_TYPE(4);\n\
    out[0] = x;\n\
    out[1] = y;\n\
    out[2] = z;\n\
    out[3] = w;\n\
    return out;\n\
};\n\
\n\
/**\n\
 * Copy the values from one vec4 to another\n\
 *\n\
 * @param {vec4} out the receiving vector\n\
 * @param {vec4} a the source vector\n\
 * @returns {vec4} out\n\
 */\n\
vec4.copy = function(out, a) {\n\
    out[0] = a[0];\n\
    out[1] = a[1];\n\
    out[2] = a[2];\n\
    out[3] = a[3];\n\
    return out;\n\
};\n\
\n\
/**\n\
 * Set the components of a vec4 to the given values\n\
 *\n\
 * @param {vec4} out the receiving vector\n\
 * @param {Number} x X component\n\
 * @param {Number} y Y component\n\
 * @param {Number} z Z component\n\
 * @param {Number} w W component\n\
 * @returns {vec4} out\n\
 */\n\
vec4.set = function(out, x, y, z, w) {\n\
    out[0] = x;\n\
    out[1] = y;\n\
    out[2] = z;\n\
    out[3] = w;\n\
    return out;\n\
};\n\
\n\
/**\n\
 * Adds two vec4's\n\
 *\n\
 * @param {vec4} out the receiving vector\n\
 * @param {vec4} a the first operand\n\
 * @param {vec4} b the second operand\n\
 * @returns {vec4} out\n\
 */\n\
vec4.add = function(out, a, b) {\n\
    out[0] = a[0] + b[0];\n\
    out[1] = a[1] + b[1];\n\
    out[2] = a[2] + b[2];\n\
    out[3] = a[3] + b[3];\n\
    return out;\n\
};\n\
\n\
/**\n\
 * Subtracts vector b from vector a\n\
 *\n\
 * @param {vec4} out the receiving vector\n\
 * @param {vec4} a the first operand\n\
 * @param {vec4} b the second operand\n\
 * @returns {vec4} out\n\
 */\n\
vec4.subtract = function(out, a, b) {\n\
    out[0] = a[0] - b[0];\n\
    out[1] = a[1] - b[1];\n\
    out[2] = a[2] - b[2];\n\
    out[3] = a[3] - b[3];\n\
    return out;\n\
};\n\
\n\
/**\n\
 * Alias for {@link vec4.subtract}\n\
 * @function\n\
 */\n\
vec4.sub = vec4.subtract;\n\
\n\
/**\n\
 * Multiplies two vec4's\n\
 *\n\
 * @param {vec4} out the receiving vector\n\
 * @param {vec4} a the first operand\n\
 * @param {vec4} b the second operand\n\
 * @returns {vec4} out\n\
 */\n\
vec4.multiply = function(out, a, b) {\n\
    out[0] = a[0] * b[0];\n\
    out[1] = a[1] * b[1];\n\
    out[2] = a[2] * b[2];\n\
    out[3] = a[3] * b[3];\n\
    return out;\n\
};\n\
\n\
/**\n\
 * Alias for {@link vec4.multiply}\n\
 * @function\n\
 */\n\
vec4.mul = vec4.multiply;\n\
\n\
/**\n\
 * Divides two vec4's\n\
 *\n\
 * @param {vec4} out the receiving vector\n\
 * @param {vec4} a the first operand\n\
 * @param {vec4} b the second operand\n\
 * @returns {vec4} out\n\
 */\n\
vec4.divide = function(out, a, b) {\n\
    out[0] = a[0] / b[0];\n\
    out[1] = a[1] / b[1];\n\
    out[2] = a[2] / b[2];\n\
    out[3] = a[3] / b[3];\n\
    return out;\n\
};\n\
\n\
/**\n\
 * Alias for {@link vec4.divide}\n\
 * @function\n\
 */\n\
vec4.div = vec4.divide;\n\
\n\
/**\n\
 * Returns the minimum of two vec4's\n\
 *\n\
 * @param {vec4} out the receiving vector\n\
 * @param {vec4} a the first operand\n\
 * @param {vec4} b the second operand\n\
 * @returns {vec4} out\n\
 */\n\
vec4.min = function(out, a, b) {\n\
    out[0] = Math.min(a[0], b[0]);\n\
    out[1] = Math.min(a[1], b[1]);\n\
    out[2] = Math.min(a[2], b[2]);\n\
    out[3] = Math.min(a[3], b[3]);\n\
    return out;\n\
};\n\
\n\
/**\n\
 * Returns the maximum of two vec4's\n\
 *\n\
 * @param {vec4} out the receiving vector\n\
 * @param {vec4} a the first operand\n\
 * @param {vec4} b the second operand\n\
 * @returns {vec4} out\n\
 */\n\
vec4.max = function(out, a, b) {\n\
    out[0] = Math.max(a[0], b[0]);\n\
    out[1] = Math.max(a[1], b[1]);\n\
    out[2] = Math.max(a[2], b[2]);\n\
    out[3] = Math.max(a[3], b[3]);\n\
    return out;\n\
};\n\
\n\
/**\n\
 * Scales a vec4 by a scalar number\n\
 *\n\
 * @param {vec4} out the receiving vector\n\
 * @param {vec4} a the vector to scale\n\
 * @param {Number} b amount to scale the vector by\n\
 * @returns {vec4} out\n\
 */\n\
vec4.scale = function(out, a, b) {\n\
    out[0] = a[0] * b;\n\
    out[1] = a[1] * b;\n\
    out[2] = a[2] * b;\n\
    out[3] = a[3] * b;\n\
    return out;\n\
};\n\
\n\
/**\n\
 * Adds two vec4's after scaling the second operand by a scalar value\n\
 *\n\
 * @param {vec4} out the receiving vector\n\
 * @param {vec4} a the first operand\n\
 * @param {vec4} b the second operand\n\
 * @param {Number} scale the amount to scale b by before adding\n\
 * @returns {vec4} out\n\
 */\n\
vec4.scaleAndAdd = function(out, a, b, scale) {\n\
    out[0] = a[0] + (b[0] * scale);\n\
    out[1] = a[1] + (b[1] * scale);\n\
    out[2] = a[2] + (b[2] * scale);\n\
    out[3] = a[3] + (b[3] * scale);\n\
    return out;\n\
};\n\
\n\
/**\n\
 * Calculates the euclidian distance between two vec4's\n\
 *\n\
 * @param {vec4} a the first operand\n\
 * @param {vec4} b the second operand\n\
 * @returns {Number} distance between a and b\n\
 */\n\
vec4.distance = function(a, b) {\n\
    var x = b[0] - a[0],\n\
        y = b[1] - a[1],\n\
        z = b[2] - a[2],\n\
        w = b[3] - a[3];\n\
    return Math.sqrt(x*x + y*y + z*z + w*w);\n\
};\n\
\n\
/**\n\
 * Alias for {@link vec4.distance}\n\
 * @function\n\
 */\n\
vec4.dist = vec4.distance;\n\
\n\
/**\n\
 * Calculates the squared euclidian distance between two vec4's\n\
 *\n\
 * @param {vec4} a the first operand\n\
 * @param {vec4} b the second operand\n\
 * @returns {Number} squared distance between a and b\n\
 */\n\
vec4.squaredDistance = function(a, b) {\n\
    var x = b[0] - a[0],\n\
        y = b[1] - a[1],\n\
        z = b[2] - a[2],\n\
        w = b[3] - a[3];\n\
    return x*x + y*y + z*z + w*w;\n\
};\n\
\n\
/**\n\
 * Alias for {@link vec4.squaredDistance}\n\
 * @function\n\
 */\n\
vec4.sqrDist = vec4.squaredDistance;\n\
\n\
/**\n\
 * Calculates the length of a vec4\n\
 *\n\
 * @param {vec4} a vector to calculate length of\n\
 * @returns {Number} length of a\n\
 */\n\
vec4.length = function (a) {\n\
    var x = a[0],\n\
        y = a[1],\n\
        z = a[2],\n\
        w = a[3];\n\
    return Math.sqrt(x*x + y*y + z*z + w*w);\n\
};\n\
\n\
/**\n\
 * Alias for {@link vec4.length}\n\
 * @function\n\
 */\n\
vec4.len = vec4.length;\n\
\n\
/**\n\
 * Calculates the squared length of a vec4\n\
 *\n\
 * @param {vec4} a vector to calculate squared length of\n\
 * @returns {Number} squared length of a\n\
 */\n\
vec4.squaredLength = function (a) {\n\
    var x = a[0],\n\
        y = a[1],\n\
        z = a[2],\n\
        w = a[3];\n\
    return x*x + y*y + z*z + w*w;\n\
};\n\
\n\
/**\n\
 * Alias for {@link vec4.squaredLength}\n\
 * @function\n\
 */\n\
vec4.sqrLen = vec4.squaredLength;\n\
\n\
/**\n\
 * Negates the components of a vec4\n\
 *\n\
 * @param {vec4} out the receiving vector\n\
 * @param {vec4} a vector to negate\n\
 * @returns {vec4} out\n\
 */\n\
vec4.negate = function(out, a) {\n\
    out[0] = -a[0];\n\
    out[1] = -a[1];\n\
    out[2] = -a[2];\n\
    out[3] = -a[3];\n\
    return out;\n\
};\n\
\n\
/**\n\
 * Normalize a vec4\n\
 *\n\
 * @param {vec4} out the receiving vector\n\
 * @param {vec4} a vector to normalize\n\
 * @returns {vec4} out\n\
 */\n\
vec4.normalize = function(out, a) {\n\
    var x = a[0],\n\
        y = a[1],\n\
        z = a[2],\n\
        w = a[3];\n\
    var len = x*x + y*y + z*z + w*w;\n\
    if (len > 0) {\n\
        len = 1 / Math.sqrt(len);\n\
        out[0] = a[0] * len;\n\
        out[1] = a[1] * len;\n\
        out[2] = a[2] * len;\n\
        out[3] = a[3] * len;\n\
    }\n\
    return out;\n\
};\n\
\n\
/**\n\
 * Calculates the dot product of two vec4's\n\
 *\n\
 * @param {vec4} a the first operand\n\
 * @param {vec4} b the second operand\n\
 * @returns {Number} dot product of a and b\n\
 */\n\
vec4.dot = function (a, b) {\n\
    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n\
};\n\
\n\
/**\n\
 * Performs a linear interpolation between two vec4's\n\
 *\n\
 * @param {vec4} out the receiving vector\n\
 * @param {vec4} a the first operand\n\
 * @param {vec4} b the second operand\n\
 * @param {Number} t interpolation amount between the two inputs\n\
 * @returns {vec4} out\n\
 */\n\
vec4.lerp = function (out, a, b, t) {\n\
    var ax = a[0],\n\
        ay = a[1],\n\
        az = a[2],\n\
        aw = a[3];\n\
    out[0] = ax + t * (b[0] - ax);\n\
    out[1] = ay + t * (b[1] - ay);\n\
    out[2] = az + t * (b[2] - az);\n\
    out[3] = aw + t * (b[3] - aw);\n\
    return out;\n\
};\n\
\n\
/**\n\
 * Generates a random vector with the given scale\n\
 *\n\
 * @param {vec4} out the receiving vector\n\
 * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n\
 * @returns {vec4} out\n\
 */\n\
vec4.random = function (out, scale) {\n\
    scale = scale || 1.0;\n\
\n\
    //TODO: This is a pretty awful way of doing this. Find something better.\n\
    out[0] = GLMAT_RANDOM();\n\
    out[1] = GLMAT_RANDOM();\n\
    out[2] = GLMAT_RANDOM();\n\
    out[3] = GLMAT_RANDOM();\n\
    vec4.normalize(out, out);\n\
    vec4.scale(out, out, scale);\n\
    return out;\n\
};\n\
\n\
/**\n\
 * Transforms the vec4 with a mat4.\n\
 *\n\
 * @param {vec4} out the receiving vector\n\
 * @param {vec4} a the vector to transform\n\
 * @param {mat4} m matrix to transform with\n\
 * @returns {vec4} out\n\
 */\n\
vec4.transformMat4 = function(out, a, m) {\n\
    var x = a[0], y = a[1], z = a[2], w = a[3];\n\
    out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n\
    out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n\
    out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n\
    out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n\
    return out;\n\
};\n\
\n\
/**\n\
 * Transforms the vec4 with a quat\n\
 *\n\
 * @param {vec4} out the receiving vector\n\
 * @param {vec4} a the vector to transform\n\
 * @param {quat} q quaternion to transform with\n\
 * @returns {vec4} out\n\
 */\n\
vec4.transformQuat = function(out, a, q) {\n\
    var x = a[0], y = a[1], z = a[2],\n\
        qx = q[0], qy = q[1], qz = q[2], qw = q[3],\n\
\n\
        // calculate quat * vec\n\
        ix = qw * x + qy * z - qz * y,\n\
        iy = qw * y + qz * x - qx * z,\n\
        iz = qw * z + qx * y - qy * x,\n\
        iw = -qx * x - qy * y - qz * z;\n\
\n\
    // calculate result * inverse quat\n\
    out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n\
    out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n\
    out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n\
    return out;\n\
};\n\
\n\
/**\n\
 * Perform some operation over an array of vec4s.\n\
 *\n\
 * @param {Array} a the array of vectors to iterate over\n\
 * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\n\
 * @param {Number} offset Number of elements to skip at the beginning of the array\n\
 * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\n\
 * @param {Function} fn Function to call for each vector in the array\n\
 * @param {Object} [arg] additional argument to pass to fn\n\
 * @returns {Array} a\n\
 * @function\n\
 */\n\
vec4.forEach = (function() {\n\
    var vec = vec4.create();\n\
\n\
    return function(a, stride, offset, count, fn, arg) {\n\
        var i, l;\n\
        if(!stride) {\n\
            stride = 4;\n\
        }\n\
\n\
        if(!offset) {\n\
            offset = 0;\n\
        }\n\
        \n\
        if(count) {\n\
            l = Math.min((count * stride) + offset, a.length);\n\
        } else {\n\
            l = a.length;\n\
        }\n\
\n\
        for(i = offset; i < l; i += stride) {\n\
            vec[0] = a[i]; vec[1] = a[i+1]; vec[2] = a[i+2]; vec[3] = a[i+3];\n\
            fn(vec, vec, arg);\n\
            a[i] = vec[0]; a[i+1] = vec[1]; a[i+2] = vec[2]; a[i+3] = vec[3];\n\
        }\n\
        \n\
        return a;\n\
    };\n\
})();\n\
\n\
/**\n\
 * Returns a string representation of a vector\n\
 *\n\
 * @param {vec4} vec vector to represent as a string\n\
 * @returns {String} string representation of the vector\n\
 */\n\
vec4.str = function (a) {\n\
    return 'vec4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n\
};\n\
\n\
if(typeof(exports) !== 'undefined') {\n\
    exports.vec4 = vec4;\n\
}\n\
;\n\
/* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.\n\
\n\
Redistribution and use in source and binary forms, with or without modification,\n\
are permitted provided that the following conditions are met:\n\
\n\
  * Redistributions of source code must retain the above copyright notice, this\n\
    list of conditions and the following disclaimer.\n\
  * Redistributions in binary form must reproduce the above copyright notice,\n\
    this list of conditions and the following disclaimer in the documentation \n\
    and/or other materials provided with the distribution.\n\
\n\
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n\
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n\
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE \n\
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\n\
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n\
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n\
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n\
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n\
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n\
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */\n\
\n\
/**\n\
 * @class 2x2 Matrix\n\
 * @name mat2\n\
 */\n\
\n\
var mat2 = {};\n\
\n\
/**\n\
 * Creates a new identity mat2\n\
 *\n\
 * @returns {mat2} a new 2x2 matrix\n\
 */\n\
mat2.create = function() {\n\
    var out = new GLMAT_ARRAY_TYPE(4);\n\
    out[0] = 1;\n\
    out[1] = 0;\n\
    out[2] = 0;\n\
    out[3] = 1;\n\
    return out;\n\
};\n\
\n\
/**\n\
 * Creates a new mat2 initialized with values from an existing matrix\n\
 *\n\
 * @param {mat2} a matrix to clone\n\
 * @returns {mat2} a new 2x2 matrix\n\
 */\n\
mat2.clone = function(a) {\n\
    var out = new GLMAT_ARRAY_TYPE(4);\n\
    out[0] = a[0];\n\
    out[1] = a[1];\n\
    out[2] = a[2];\n\
    out[3] = a[3];\n\
    return out;\n\
};\n\
\n\
/**\n\
 * Copy the values from one mat2 to another\n\
 *\n\
 * @param {mat2} out the receiving matrix\n\
 * @param {mat2} a the source matrix\n\
 * @returns {mat2} out\n\
 */\n\
mat2.copy = function(out, a) {\n\
    out[0] = a[0];\n\
    out[1] = a[1];\n\
    out[2] = a[2];\n\
    out[3] = a[3];\n\
    return out;\n\
};\n\
\n\
/**\n\
 * Set a mat2 to the identity matrix\n\
 *\n\
 * @param {mat2} out the receiving matrix\n\
 * @returns {mat2} out\n\
 */\n\
mat2.identity = function(out) {\n\
    out[0] = 1;\n\
    out[1] = 0;\n\
    out[2] = 0;\n\
    out[3] = 1;\n\
    return out;\n\
};\n\
\n\
/**\n\
 * Transpose the values of a mat2\n\
 *\n\
 * @param {mat2} out the receiving matrix\n\
 * @param {mat2} a the source matrix\n\
 * @returns {mat2} out\n\
 */\n\
mat2.transpose = function(out, a) {\n\
    // If we are transposing ourselves we can skip a few steps but have to cache some values\n\
    if (out === a) {\n\
        var a1 = a[1];\n\
        out[1] = a[2];\n\
        out[2] = a1;\n\
    } else {\n\
        out[0] = a[0];\n\
        out[1] = a[2];\n\
        out[2] = a[1];\n\
        out[3] = a[3];\n\
    }\n\
    \n\
    return out;\n\
};\n\
\n\
/**\n\
 * Inverts a mat2\n\
 *\n\
 * @param {mat2} out the receiving matrix\n\
 * @param {mat2} a the source matrix\n\
 * @returns {mat2} out\n\
 */\n\
mat2.invert = function(out, a) {\n\
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],\n\
\n\
        // Calculate the determinant\n\
        det = a0 * a3 - a2 * a1;\n\
\n\
    if (!det) {\n\
        return null;\n\
    }\n\
    det = 1.0 / det;\n\
    \n\
    out[0] =  a3 * det;\n\
    out[1] = -a1 * det;\n\
    out[2] = -a2 * det;\n\
    out[3] =  a0 * det;\n\
\n\
    return out;\n\
};\n\
\n\
/**\n\
 * Calculates the adjugate of a mat2\n\
 *\n\
 * @param {mat2} out the receiving matrix\n\
 * @param {mat2} a the source matrix\n\
 * @returns {mat2} out\n\
 */\n\
mat2.adjoint = function(out, a) {\n\
    // Caching this value is nessecary if out == a\n\
    var a0 = a[0];\n\
    out[0] =  a[3];\n\
    out[1] = -a[1];\n\
    out[2] = -a[2];\n\
    out[3] =  a0;\n\
\n\
    return out;\n\
};\n\
\n\
/**\n\
 * Calculates the determinant of a mat2\n\
 *\n\
 * @param {mat2} a the source matrix\n\
 * @returns {Number} determinant of a\n\
 */\n\
mat2.determinant = function (a) {\n\
    return a[0] * a[3] - a[2] * a[1];\n\
};\n\
\n\
/**\n\
 * Multiplies two mat2's\n\
 *\n\
 * @param {mat2} out the receiving matrix\n\
 * @param {mat2} a the first operand\n\
 * @param {mat2} b the second operand\n\
 * @returns {mat2} out\n\
 */\n\
mat2.multiply = function (out, a, b) {\n\
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n\
    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n\
    out[0] = a0 * b0 + a1 * b2;\n\
    out[1] = a0 * b1 + a1 * b3;\n\
    out[2] = a2 * b0 + a3 * b2;\n\
    out[3] = a2 * b1 + a3 * b3;\n\
    return out;\n\
};\n\
\n\
/**\n\
 * Alias for {@link mat2.multiply}\n\
 * @function\n\
 */\n\
mat2.mul = mat2.multiply;\n\
\n\
/**\n\
 * Rotates a mat2 by the given angle\n\
 *\n\
 * @param {mat2} out the receiving matrix\n\
 * @param {mat2} a the matrix to rotate\n\
 * @param {Number} rad the angle to rotate the matrix by\n\
 * @returns {mat2} out\n\
 */\n\
mat2.rotate = function (out, a, rad) {\n\
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],\n\
        s = Math.sin(rad),\n\
        c = Math.cos(rad);\n\
    out[0] = a0 *  c + a1 * s;\n\
    out[1] = a0 * -s + a1 * c;\n\
    out[2] = a2 *  c + a3 * s;\n\
    out[3] = a2 * -s + a3 * c;\n\
    return out;\n\
};\n\
\n\
/**\n\
 * Scales the mat2 by the dimensions in the given vec2\n\
 *\n\
 * @param {mat2} out the receiving matrix\n\
 * @param {mat2} a the matrix to rotate\n\
 * @param {vec2} v the vec2 to scale the matrix by\n\
 * @returns {mat2} out\n\
 **/\n\
mat2.scale = function(out, a, v) {\n\
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],\n\
        v0 = v[0], v1 = v[1];\n\
    out[0] = a0 * v0;\n\
    out[1] = a1 * v1;\n\
    out[2] = a2 * v0;\n\
    out[3] = a3 * v1;\n\
    return out;\n\
};\n\
\n\
/**\n\
 * Returns a string representation of a mat2\n\
 *\n\
 * @param {mat2} mat matrix to represent as a string\n\
 * @returns {String} string representation of the matrix\n\
 */\n\
mat2.str = function (a) {\n\
    return 'mat2(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n\
};\n\
\n\
if(typeof(exports) !== 'undefined') {\n\
    exports.mat2 = mat2;\n\
}\n\
;\n\
/* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.\n\
\n\
Redistribution and use in source and binary forms, with or without modification,\n\
are permitted provided that the following conditions are met:\n\
\n\
  * Redistributions of source code must retain the above copyright notice, this\n\
    list of conditions and the following disclaimer.\n\
  * Redistributions in binary form must reproduce the above copyright notice,\n\
    this list of conditions and the following disclaimer in the documentation \n\
    and/or other materials provided with the distribution.\n\
\n\
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n\
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n\
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE \n\
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\n\
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n\
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n\
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n\
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n\
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n\
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */\n\
\n\
/**\n\
 * @class 2x3 Matrix\n\
 * @name mat2d\n\
 * \n\
 * @description \n\
 * A mat2d contains six elements defined as:\n\
 * <pre>\n\
 * [a, b,\n\
 *  c, d,\n\
 *  tx,ty]\n\
 * </pre>\n\
 * This is a short form for the 3x3 matrix:\n\
 * <pre>\n\
 * [a, b, 0\n\
 *  c, d, 0\n\
 *  tx,ty,1]\n\
 * </pre>\n\
 * The last column is ignored so the array is shorter and operations are faster.\n\
 */\n\
\n\
var mat2d = {};\n\
\n\
/**\n\
 * Creates a new identity mat2d\n\
 *\n\
 * @returns {mat2d} a new 2x3 matrix\n\
 */\n\
mat2d.create = function() {\n\
    var out = new GLMAT_ARRAY_TYPE(6);\n\
    out[0] = 1;\n\
    out[1] = 0;\n\
    out[2] = 0;\n\
    out[3] = 1;\n\
    out[4] = 0;\n\
    out[5] = 0;\n\
    return out;\n\
};\n\
\n\
/**\n\
 * Creates a new mat2d initialized with values from an existing matrix\n\
 *\n\
 * @param {mat2d} a matrix to clone\n\
 * @returns {mat2d} a new 2x3 matrix\n\
 */\n\
mat2d.clone = function(a) {\n\
    var out = new GLMAT_ARRAY_TYPE(6);\n\
    out[0] = a[0];\n\
    out[1] = a[1];\n\
    out[2] = a[2];\n\
    out[3] = a[3];\n\
    out[4] = a[4];\n\
    out[5] = a[5];\n\
    return out;\n\
};\n\
\n\
/**\n\
 * Copy the values from one mat2d to another\n\
 *\n\
 * @param {mat2d} out the receiving matrix\n\
 * @param {mat2d} a the source matrix\n\
 * @returns {mat2d} out\n\
 */\n\
mat2d.copy = function(out, a) {\n\
    out[0] = a[0];\n\
    out[1] = a[1];\n\
    out[2] = a[2];\n\
    out[3] = a[3];\n\
    out[4] = a[4];\n\
    out[5] = a[5];\n\
    return out;\n\
};\n\
\n\
/**\n\
 * Set a mat2d to the identity matrix\n\
 *\n\
 * @param {mat2d} out the receiving matrix\n\
 * @returns {mat2d} out\n\
 */\n\
mat2d.identity = function(out) {\n\
    out[0] = 1;\n\
    out[1] = 0;\n\
    out[2] = 0;\n\
    out[3] = 1;\n\
    out[4] = 0;\n\
    out[5] = 0;\n\
    return out;\n\
};\n\
\n\
/**\n\
 * Inverts a mat2d\n\
 *\n\
 * @param {mat2d} out the receiving matrix\n\
 * @param {mat2d} a the source matrix\n\
 * @returns {mat2d} out\n\
 */\n\
mat2d.invert = function(out, a) {\n\
    var aa = a[0], ab = a[1], ac = a[2], ad = a[3],\n\
        atx = a[4], aty = a[5];\n\
\n\
    var det = aa * ad - ab * ac;\n\
    if(!det){\n\
        return null;\n\
    }\n\
    det = 1.0 / det;\n\
\n\
    out[0] = ad * det;\n\
    out[1] = -ab * det;\n\
    out[2] = -ac * det;\n\
    out[3] = aa * det;\n\
    out[4] = (ac * aty - ad * atx) * det;\n\
    out[5] = (ab * atx - aa * aty) * det;\n\
    return out;\n\
};\n\
\n\
/**\n\
 * Calculates the determinant of a mat2d\n\
 *\n\
 * @param {mat2d} a the source matrix\n\
 * @returns {Number} determinant of a\n\
 */\n\
mat2d.determinant = function (a) {\n\
    return a[0] * a[3] - a[1] * a[2];\n\
};\n\
\n\
/**\n\
 * Multiplies two mat2d's\n\
 *\n\
 * @param {mat2d} out the receiving matrix\n\
 * @param {mat2d} a the first operand\n\
 * @param {mat2d} b the second operand\n\
 * @returns {mat2d} out\n\
 */\n\
mat2d.multiply = function (out, a, b) {\n\
    var aa = a[0], ab = a[1], ac = a[2], ad = a[3],\n\
        atx = a[4], aty = a[5],\n\
        ba = b[0], bb = b[1], bc = b[2], bd = b[3],\n\
        btx = b[4], bty = b[5];\n\
\n\
    out[0] = aa*ba + ab*bc;\n\
    out[1] = aa*bb + ab*bd;\n\
    out[2] = ac*ba + ad*bc;\n\
    out[3] = ac*bb + ad*bd;\n\
    out[4] = ba*atx + bc*aty + btx;\n\
    out[5] = bb*atx + bd*aty + bty;\n\
    return out;\n\
};\n\
\n\
/**\n\
 * Alias for {@link mat2d.multiply}\n\
 * @function\n\
 */\n\
mat2d.mul = mat2d.multiply;\n\
\n\
\n\
/**\n\
 * Rotates a mat2d by the given angle\n\
 *\n\
 * @param {mat2d} out the receiving matrix\n\
 * @param {mat2d} a the matrix to rotate\n\
 * @param {Number} rad the angle to rotate the matrix by\n\
 * @returns {mat2d} out\n\
 */\n\
mat2d.rotate = function (out, a, rad) {\n\
    var aa = a[0],\n\
        ab = a[1],\n\
        ac = a[2],\n\
        ad = a[3],\n\
        atx = a[4],\n\
        aty = a[5],\n\
        st = Math.sin(rad),\n\
        ct = Math.cos(rad);\n\
\n\
    out[0] = aa*ct + ab*st;\n\
    out[1] = -aa*st + ab*ct;\n\
    out[2] = ac*ct + ad*st;\n\
    out[3] = -ac*st + ct*ad;\n\
    out[4] = ct*atx + st*aty;\n\
    out[5] = ct*aty - st*atx;\n\
    return out;\n\
};\n\
\n\
/**\n\
 * Scales the mat2d by the dimensions in the given vec2\n\
 *\n\
 * @param {mat2d} out the receiving matrix\n\
 * @param {mat2d} a the matrix to translate\n\
 * @param {vec2} v the vec2 to scale the matrix by\n\
 * @returns {mat2d} out\n\
 **/\n\
mat2d.scale = function(out, a, v) {\n\
    var vx = v[0], vy = v[1];\n\
    out[0] = a[0] * vx;\n\
    out[1] = a[1] * vy;\n\
    out[2] = a[2] * vx;\n\
    out[3] = a[3] * vy;\n\
    out[4] = a[4] * vx;\n\
    out[5] = a[5] * vy;\n\
    return out;\n\
};\n\
\n\
/**\n\
 * Translates the mat2d by the dimensions in the given vec2\n\
 *\n\
 * @param {mat2d} out the receiving matrix\n\
 * @param {mat2d} a the matrix to translate\n\
 * @param {vec2} v the vec2 to translate the matrix by\n\
 * @returns {mat2d} out\n\
 **/\n\
mat2d.translate = function(out, a, v) {\n\
    out[0] = a[0];\n\
    out[1] = a[1];\n\
    out[2] = a[2];\n\
    out[3] = a[3];\n\
    out[4] = a[4] + v[0];\n\
    out[5] = a[5] + v[1];\n\
    return out;\n\
};\n\
\n\
/**\n\
 * Returns a string representation of a mat2d\n\
 *\n\
 * @param {mat2d} a matrix to represent as a string\n\
 * @returns {String} string representation of the matrix\n\
 */\n\
mat2d.str = function (a) {\n\
    return 'mat2d(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + \n\
                    a[3] + ', ' + a[4] + ', ' + a[5] + ')';\n\
};\n\
\n\
if(typeof(exports) !== 'undefined') {\n\
    exports.mat2d = mat2d;\n\
}\n\
;\n\
/* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.\n\
\n\
Redistribution and use in source and binary forms, with or without modification,\n\
are permitted provided that the following conditions are met:\n\
\n\
  * Redistributions of source code must retain the above copyright notice, this\n\
    list of conditions and the following disclaimer.\n\
  * Redistributions in binary form must reproduce the above copyright notice,\n\
    this list of conditions and the following disclaimer in the documentation \n\
    and/or other materials provided with the distribution.\n\
\n\
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n\
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n\
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE \n\
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\n\
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n\
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n\
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n\
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n\
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n\
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */\n\
\n\
/**\n\
 * @class 3x3 Matrix\n\
 * @name mat3\n\
 */\n\
\n\
var mat3 = {};\n\
\n\
/**\n\
 * Creates a new identity mat3\n\
 *\n\
 * @returns {mat3} a new 3x3 matrix\n\
 */\n\
mat3.create = function() {\n\
    var out = new GLMAT_ARRAY_TYPE(9);\n\
    out[0] = 1;\n\
    out[1] = 0;\n\
    out[2] = 0;\n\
    out[3] = 0;\n\
    out[4] = 1;\n\
    out[5] = 0;\n\
    out[6] = 0;\n\
    out[7] = 0;\n\
    out[8] = 1;\n\
    return out;\n\
};\n\
\n\
/**\n\
 * Copies the upper-left 3x3 values into the given mat3.\n\
 *\n\
 * @param {mat3} out the receiving 3x3 matrix\n\
 * @param {mat4} a   the source 4x4 matrix\n\
 * @returns {mat3} out\n\
 */\n\
mat3.fromMat4 = function(out, a) {\n\
    out[0] = a[0];\n\
    out[1] = a[1];\n\
    out[2] = a[2];\n\
    out[3] = a[4];\n\
    out[4] = a[5];\n\
    out[5] = a[6];\n\
    out[6] = a[8];\n\
    out[7] = a[9];\n\
    out[8] = a[10];\n\
    return out;\n\
};\n\
\n\
/**\n\
 * Creates a new mat3 initialized with values from an existing matrix\n\
 *\n\
 * @param {mat3} a matrix to clone\n\
 * @returns {mat3} a new 3x3 matrix\n\
 */\n\
mat3.clone = function(a) {\n\
    var out = new GLMAT_ARRAY_TYPE(9);\n\
    out[0] = a[0];\n\
    out[1] = a[1];\n\
    out[2] = a[2];\n\
    out[3] = a[3];\n\
    out[4] = a[4];\n\
    out[5] = a[5];\n\
    out[6] = a[6];\n\
    out[7] = a[7];\n\
    out[8] = a[8];\n\
    return out;\n\
};\n\
\n\
/**\n\
 * Copy the values from one mat3 to another\n\
 *\n\
 * @param {mat3} out the receiving matrix\n\
 * @param {mat3} a the source matrix\n\
 * @returns {mat3} out\n\
 */\n\
mat3.copy = function(out, a) {\n\
    out[0] = a[0];\n\
    out[1] = a[1];\n\
    out[2] = a[2];\n\
    out[3] = a[3];\n\
    out[4] = a[4];\n\
    out[5] = a[5];\n\
    out[6] = a[6];\n\
    out[7] = a[7];\n\
    out[8] = a[8];\n\
    return out;\n\
};\n\
\n\
/**\n\
 * Set a mat3 to the identity matrix\n\
 *\n\
 * @param {mat3} out the receiving matrix\n\
 * @returns {mat3} out\n\
 */\n\
mat3.identity = function(out) {\n\
    out[0] = 1;\n\
    out[1] = 0;\n\
    out[2] = 0;\n\
    out[3] = 0;\n\
    out[4] = 1;\n\
    out[5] = 0;\n\
    out[6] = 0;\n\
    out[7] = 0;\n\
    out[8] = 1;\n\
    return out;\n\
};\n\
\n\
/**\n\
 * Transpose the values of a mat3\n\
 *\n\
 * @param {mat3} out the receiving matrix\n\
 * @param {mat3} a the source matrix\n\
 * @returns {mat3} out\n\
 */\n\
mat3.transpose = function(out, a) {\n\
    // If we are transposing ourselves we can skip a few steps but have to cache some values\n\
    if (out === a) {\n\
        var a01 = a[1], a02 = a[2], a12 = a[5];\n\
        out[1] = a[3];\n\
        out[2] = a[6];\n\
        out[3] = a01;\n\
        out[5] = a[7];\n\
        out[6] = a02;\n\
        out[7] = a12;\n\
    } else {\n\
        out[0] = a[0];\n\
        out[1] = a[3];\n\
        out[2] = a[6];\n\
        out[3] = a[1];\n\
        out[4] = a[4];\n\
        out[5] = a[7];\n\
        out[6] = a[2];\n\
        out[7] = a[5];\n\
        out[8] = a[8];\n\
    }\n\
    \n\
    return out;\n\
};\n\
\n\
/**\n\
 * Inverts a mat3\n\
 *\n\
 * @param {mat3} out the receiving matrix\n\
 * @param {mat3} a the source matrix\n\
 * @returns {mat3} out\n\
 */\n\
mat3.invert = function(out, a) {\n\
    var a00 = a[0], a01 = a[1], a02 = a[2],\n\
        a10 = a[3], a11 = a[4], a12 = a[5],\n\
        a20 = a[6], a21 = a[7], a22 = a[8],\n\
\n\
        b01 = a22 * a11 - a12 * a21,\n\
        b11 = -a22 * a10 + a12 * a20,\n\
        b21 = a21 * a10 - a11 * a20,\n\
\n\
        // Calculate the determinant\n\
        det = a00 * b01 + a01 * b11 + a02 * b21;\n\
\n\
    if (!det) { \n\
        return null; \n\
    }\n\
    det = 1.0 / det;\n\
\n\
    out[0] = b01 * det;\n\
    out[1] = (-a22 * a01 + a02 * a21) * det;\n\
    out[2] = (a12 * a01 - a02 * a11) * det;\n\
    out[3] = b11 * det;\n\
    out[4] = (a22 * a00 - a02 * a20) * det;\n\
    out[5] = (-a12 * a00 + a02 * a10) * det;\n\
    out[6] = b21 * det;\n\
    out[7] = (-a21 * a00 + a01 * a20) * det;\n\
    out[8] = (a11 * a00 - a01 * a10) * det;\n\
    return out;\n\
};\n\
\n\
/**\n\
 * Calculates the adjugate of a mat3\n\
 *\n\
 * @param {mat3} out the receiving matrix\n\
 * @param {mat3} a the source matrix\n\
 * @returns {mat3} out\n\
 */\n\
mat3.adjoint = function(out, a) {\n\
    var a00 = a[0], a01 = a[1], a02 = a[2],\n\
        a10 = a[3], a11 = a[4], a12 = a[5],\n\
        a20 = a[6], a21 = a[7], a22 = a[8];\n\
\n\
    out[0] = (a11 * a22 - a12 * a21);\n\
    out[1] = (a02 * a21 - a01 * a22);\n\
    out[2] = (a01 * a12 - a02 * a11);\n\
    out[3] = (a12 * a20 - a10 * a22);\n\
    out[4] = (a00 * a22 - a02 * a20);\n\
    out[5] = (a02 * a10 - a00 * a12);\n\
    out[6] = (a10 * a21 - a11 * a20);\n\
    out[7] = (a01 * a20 - a00 * a21);\n\
    out[8] = (a00 * a11 - a01 * a10);\n\
    return out;\n\
};\n\
\n\
/**\n\
 * Calculates the determinant of a mat3\n\
 *\n\
 * @param {mat3} a the source matrix\n\
 * @returns {Number} determinant of a\n\
 */\n\
mat3.determinant = function (a) {\n\
    var a00 = a[0], a01 = a[1], a02 = a[2],\n\
        a10 = a[3], a11 = a[4], a12 = a[5],\n\
        a20 = a[6], a21 = a[7], a22 = a[8];\n\
\n\
    return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n\
};\n\
\n\
/**\n\
 * Multiplies two mat3's\n\
 *\n\
 * @param {mat3} out the receiving matrix\n\
 * @param {mat3} a the first operand\n\
 * @param {mat3} b the second operand\n\
 * @returns {mat3} out\n\
 */\n\
mat3.multiply = function (out, a, b) {\n\
    var a00 = a[0], a01 = a[1], a02 = a[2],\n\
        a10 = a[3], a11 = a[4], a12 = a[5],\n\
        a20 = a[6], a21 = a[7], a22 = a[8],\n\
\n\
        b00 = b[0], b01 = b[1], b02 = b[2],\n\
        b10 = b[3], b11 = b[4], b12 = b[5],\n\
        b20 = b[6], b21 = b[7], b22 = b[8];\n\
\n\
    out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n\
    out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n\
    out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n\
\n\
    out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n\
    out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n\
    out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n\
\n\
    out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n\
    out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n\
    out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n\
    return out;\n\
};\n\
\n\
/**\n\
 * Alias for {@link mat3.multiply}\n\
 * @function\n\
 */\n\
mat3.mul = mat3.multiply;\n\
\n\
/**\n\
 * Translate a mat3 by the given vector\n\
 *\n\
 * @param {mat3} out the receiving matrix\n\
 * @param {mat3} a the matrix to translate\n\
 * @param {vec2} v vector to translate by\n\
 * @returns {mat3} out\n\
 */\n\
mat3.translate = function(out, a, v) {\n\
    var a00 = a[0], a01 = a[1], a02 = a[2],\n\
        a10 = a[3], a11 = a[4], a12 = a[5],\n\
        a20 = a[6], a21 = a[7], a22 = a[8],\n\
        x = v[0], y = v[1];\n\
\n\
    out[0] = a00;\n\
    out[1] = a01;\n\
    out[2] = a02;\n\
\n\
    out[3] = a10;\n\
    out[4] = a11;\n\
    out[5] = a12;\n\
\n\
    out[6] = x * a00 + y * a10 + a20;\n\
    out[7] = x * a01 + y * a11 + a21;\n\
    out[8] = x * a02 + y * a12 + a22;\n\
    return out;\n\
};\n\
\n\
/**\n\
 * Rotates a mat3 by the given angle\n\
 *\n\
 * @param {mat3} out the receiving matrix\n\
 * @param {mat3} a the matrix to rotate\n\
 * @param {Number} rad the angle to rotate the matrix by\n\
 * @returns {mat3} out\n\
 */\n\
mat3.rotate = function (out, a, rad) {\n\
    var a00 = a[0], a01 = a[1], a02 = a[2],\n\
        a10 = a[3], a11 = a[4], a12 = a[5],\n\
        a20 = a[6], a21 = a[7], a22 = a[8],\n\
\n\
        s = Math.sin(rad),\n\
        c = Math.cos(rad);\n\
\n\
    out[0] = c * a00 + s * a10;\n\
    out[1] = c * a01 + s * a11;\n\
    out[2] = c * a02 + s * a12;\n\
\n\
    out[3] = c * a10 - s * a00;\n\
    out[4] = c * a11 - s * a01;\n\
    out[5] = c * a12 - s * a02;\n\
\n\
    out[6] = a20;\n\
    out[7] = a21;\n\
    out[8] = a22;\n\
    return out;\n\
};\n\
\n\
/**\n\
 * Scales the mat3 by the dimensions in the given vec2\n\
 *\n\
 * @param {mat3} out the receiving matrix\n\
 * @param {mat3} a the matrix to rotate\n\
 * @param {vec2} v the vec2 to scale the matrix by\n\
 * @returns {mat3} out\n\
 **/\n\
mat3.scale = function(out, a, v) {\n\
    var x = v[0], y = v[1];\n\
\n\
    out[0] = x * a[0];\n\
    out[1] = x * a[1];\n\
    out[2] = x * a[2];\n\
\n\
    out[3] = y * a[3];\n\
    out[4] = y * a[4];\n\
    out[5] = y * a[5];\n\
\n\
    out[6] = a[6];\n\
    out[7] = a[7];\n\
    out[8] = a[8];\n\
    return out;\n\
};\n\
\n\
/**\n\
 * Copies the values from a mat2d into a mat3\n\
 *\n\
 * @param {mat3} out the receiving matrix\n\
 * @param {mat2d} a the matrix to copy\n\
 * @returns {mat3} out\n\
 **/\n\
mat3.fromMat2d = function(out, a) {\n\
    out[0] = a[0];\n\
    out[1] = a[1];\n\
    out[2] = 0;\n\
\n\
    out[3] = a[2];\n\
    out[4] = a[3];\n\
    out[5] = 0;\n\
\n\
    out[6] = a[4];\n\
    out[7] = a[5];\n\
    out[8] = 1;\n\
    return out;\n\
};\n\
\n\
/**\n\
* Calculates a 3x3 matrix from the given quaternion\n\
*\n\
* @param {mat3} out mat3 receiving operation result\n\
* @param {quat} q Quaternion to create matrix from\n\
*\n\
* @returns {mat3} out\n\
*/\n\
mat3.fromQuat = function (out, q) {\n\
    var x = q[0], y = q[1], z = q[2], w = q[3],\n\
        x2 = x + x,\n\
        y2 = y + y,\n\
        z2 = z + z,\n\
\n\
        xx = x * x2,\n\
        yx = y * x2,\n\
        yy = y * y2,\n\
        zx = z * x2,\n\
        zy = z * y2,\n\
        zz = z * z2,\n\
        wx = w * x2,\n\
        wy = w * y2,\n\
        wz = w * z2;\n\
\n\
    out[0] = 1 - yy - zz;\n\
    out[3] = yx - wz;\n\
    out[6] = zx + wy;\n\
\n\
    out[1] = yx + wz;\n\
    out[4] = 1 - xx - zz;\n\
    out[7] = zy - wx;\n\
\n\
    out[2] = zx - wy;\n\
    out[5] = zy + wx;\n\
    out[8] = 1 - xx - yy;\n\
\n\
    return out;\n\
};\n\
\n\
/**\n\
* Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\n\
*\n\
* @param {mat3} out mat3 receiving operation result\n\
* @param {mat4} a Mat4 to derive the normal matrix from\n\
*\n\
* @returns {mat3} out\n\
*/\n\
mat3.normalFromMat4 = function (out, a) {\n\
    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],\n\
        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],\n\
        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],\n\
        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],\n\
\n\
        b00 = a00 * a11 - a01 * a10,\n\
        b01 = a00 * a12 - a02 * a10,\n\
        b02 = a00 * a13 - a03 * a10,\n\
        b03 = a01 * a12 - a02 * a11,\n\
        b04 = a01 * a13 - a03 * a11,\n\
        b05 = a02 * a13 - a03 * a12,\n\
        b06 = a20 * a31 - a21 * a30,\n\
        b07 = a20 * a32 - a22 * a30,\n\
        b08 = a20 * a33 - a23 * a30,\n\
        b09 = a21 * a32 - a22 * a31,\n\
        b10 = a21 * a33 - a23 * a31,\n\
        b11 = a22 * a33 - a23 * a32,\n\
\n\
        // Calculate the determinant\n\
        det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\
\n\
    if (!det) { \n\
        return null; \n\
    }\n\
    det = 1.0 / det;\n\
\n\
    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n\
    out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n\
    out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n\
\n\
    out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n\
    out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n\
    out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n\
\n\
    out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n\
    out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n\
    out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n\
\n\
    return out;\n\
};\n\
\n\
/**\n\
 * Returns a string representation of a mat3\n\
 *\n\
 * @param {mat3} mat matrix to represent as a string\n\
 * @returns {String} string representation of the matrix\n\
 */\n\
mat3.str = function (a) {\n\
    return 'mat3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + \n\
                    a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + \n\
                    a[6] + ', ' + a[7] + ', ' + a[8] + ')';\n\
};\n\
\n\
if(typeof(exports) !== 'undefined') {\n\
    exports.mat3 = mat3;\n\
}\n\
;\n\
/* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.\n\
\n\
Redistribution and use in source and binary forms, with or without modification,\n\
are permitted provided that the following conditions are met:\n\
\n\
  * Redistributions of source code must retain the above copyright notice, this\n\
    list of conditions and the following disclaimer.\n\
  * Redistributions in binary form must reproduce the above copyright notice,\n\
    this list of conditions and the following disclaimer in the documentation \n\
    and/or other materials provided with the distribution.\n\
\n\
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n\
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n\
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE \n\
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\n\
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n\
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n\
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n\
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n\
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n\
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */\n\
\n\
/**\n\
 * @class 4x4 Matrix\n\
 * @name mat4\n\
 */\n\
\n\
var mat4 = {};\n\
\n\
/**\n\
 * Creates a new identity mat4\n\
 *\n\
 * @returns {mat4} a new 4x4 matrix\n\
 */\n\
mat4.create = function() {\n\
    var out = new GLMAT_ARRAY_TYPE(16);\n\
    out[0] = 1;\n\
    out[1] = 0;\n\
    out[2] = 0;\n\
    out[3] = 0;\n\
    out[4] = 0;\n\
    out[5] = 1;\n\
    out[6] = 0;\n\
    out[7] = 0;\n\
    out[8] = 0;\n\
    out[9] = 0;\n\
    out[10] = 1;\n\
    out[11] = 0;\n\
    out[12] = 0;\n\
    out[13] = 0;\n\
    out[14] = 0;\n\
    out[15] = 1;\n\
    return out;\n\
};\n\
\n\
/**\n\
 * Creates a new mat4 initialized with values from an existing matrix\n\
 *\n\
 * @param {mat4} a matrix to clone\n\
 * @returns {mat4} a new 4x4 matrix\n\
 */\n\
mat4.clone = function(a) {\n\
    var out = new GLMAT_ARRAY_TYPE(16);\n\
    out[0] = a[0];\n\
    out[1] = a[1];\n\
    out[2] = a[2];\n\
    out[3] = a[3];\n\
    out[4] = a[4];\n\
    out[5] = a[5];\n\
    out[6] = a[6];\n\
    out[7] = a[7];\n\
    out[8] = a[8];\n\
    out[9] = a[9];\n\
    out[10] = a[10];\n\
    out[11] = a[11];\n\
    out[12] = a[12];\n\
    out[13] = a[13];\n\
    out[14] = a[14];\n\
    out[15] = a[15];\n\
    return out;\n\
};\n\
\n\
/**\n\
 * Copy the values from one mat4 to another\n\
 *\n\
 * @param {mat4} out the receiving matrix\n\
 * @param {mat4} a the source matrix\n\
 * @returns {mat4} out\n\
 */\n\
mat4.copy = function(out, a) {\n\
    out[0] = a[0];\n\
    out[1] = a[1];\n\
    out[2] = a[2];\n\
    out[3] = a[3];\n\
    out[4] = a[4];\n\
    out[5] = a[5];\n\
    out[6] = a[6];\n\
    out[7] = a[7];\n\
    out[8] = a[8];\n\
    out[9] = a[9];\n\
    out[10] = a[10];\n\
    out[11] = a[11];\n\
    out[12] = a[12];\n\
    out[13] = a[13];\n\
    out[14] = a[14];\n\
    out[15] = a[15];\n\
    return out;\n\
};\n\
\n\
/**\n\
 * Set a mat4 to the identity matrix\n\
 *\n\
 * @param {mat4} out the receiving matrix\n\
 * @returns {mat4} out\n\
 */\n\
mat4.identity = function(out) {\n\
    out[0] = 1;\n\
    out[1] = 0;\n\
    out[2] = 0;\n\
    out[3] = 0;\n\
    out[4] = 0;\n\
    out[5] = 1;\n\
    out[6] = 0;\n\
    out[7] = 0;\n\
    out[8] = 0;\n\
    out[9] = 0;\n\
    out[10] = 1;\n\
    out[11] = 0;\n\
    out[12] = 0;\n\
    out[13] = 0;\n\
    out[14] = 0;\n\
    out[15] = 1;\n\
    return out;\n\
};\n\
\n\
/**\n\
 * Transpose the values of a mat4\n\
 *\n\
 * @param {mat4} out the receiving matrix\n\
 * @param {mat4} a the source matrix\n\
 * @returns {mat4} out\n\
 */\n\
mat4.transpose = function(out, a) {\n\
    // If we are transposing ourselves we can skip a few steps but have to cache some values\n\
    if (out === a) {\n\
        var a01 = a[1], a02 = a[2], a03 = a[3],\n\
            a12 = a[6], a13 = a[7],\n\
            a23 = a[11];\n\
\n\
        out[1] = a[4];\n\
        out[2] = a[8];\n\
        out[3] = a[12];\n\
        out[4] = a01;\n\
        out[6] = a[9];\n\
        out[7] = a[13];\n\
        out[8] = a02;\n\
        out[9] = a12;\n\
        out[11] = a[14];\n\
        out[12] = a03;\n\
        out[13] = a13;\n\
        out[14] = a23;\n\
    } else {\n\
        out[0] = a[0];\n\
        out[1] = a[4];\n\
        out[2] = a[8];\n\
        out[3] = a[12];\n\
        out[4] = a[1];\n\
        out[5] = a[5];\n\
        out[6] = a[9];\n\
        out[7] = a[13];\n\
        out[8] = a[2];\n\
        out[9] = a[6];\n\
        out[10] = a[10];\n\
        out[11] = a[14];\n\
        out[12] = a[3];\n\
        out[13] = a[7];\n\
        out[14] = a[11];\n\
        out[15] = a[15];\n\
    }\n\
    \n\
    return out;\n\
};\n\
\n\
/**\n\
 * Inverts a mat4\n\
 *\n\
 * @param {mat4} out the receiving matrix\n\
 * @param {mat4} a the source matrix\n\
 * @returns {mat4} out\n\
 */\n\
mat4.invert = function(out, a) {\n\
    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],\n\
        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],\n\
        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],\n\
        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],\n\
\n\
        b00 = a00 * a11 - a01 * a10,\n\
        b01 = a00 * a12 - a02 * a10,\n\
        b02 = a00 * a13 - a03 * a10,\n\
        b03 = a01 * a12 - a02 * a11,\n\
        b04 = a01 * a13 - a03 * a11,\n\
        b05 = a02 * a13 - a03 * a12,\n\
        b06 = a20 * a31 - a21 * a30,\n\
        b07 = a20 * a32 - a22 * a30,\n\
        b08 = a20 * a33 - a23 * a30,\n\
        b09 = a21 * a32 - a22 * a31,\n\
        b10 = a21 * a33 - a23 * a31,\n\
        b11 = a22 * a33 - a23 * a32,\n\
\n\
        // Calculate the determinant\n\
        det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\
\n\
    if (!det) { \n\
        return null; \n\
    }\n\
    det = 1.0 / det;\n\
\n\
    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n\
    out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n\
    out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n\
    out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n\
    out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n\
    out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n\
    out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n\
    out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n\
    out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n\
    out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n\
    out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n\
    out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n\
    out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n\
    out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n\
    out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n\
    out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n\
\n\
    return out;\n\
};\n\
\n\
/**\n\
 * Calculates the adjugate of a mat4\n\
 *\n\
 * @param {mat4} out the receiving matrix\n\
 * @param {mat4} a the source matrix\n\
 * @returns {mat4} out\n\
 */\n\
mat4.adjoint = function(out, a) {\n\
    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],\n\
        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],\n\
        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],\n\
        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\
\n\
    out[0]  =  (a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22));\n\
    out[1]  = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n\
    out[2]  =  (a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12));\n\
    out[3]  = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n\
    out[4]  = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n\
    out[5]  =  (a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22));\n\
    out[6]  = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n\
    out[7]  =  (a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12));\n\
    out[8]  =  (a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21));\n\
    out[9]  = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n\
    out[10] =  (a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11));\n\
    out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n\
    out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n\
    out[13] =  (a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21));\n\
    out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n\
    out[15] =  (a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11));\n\
    return out;\n\
};\n\
\n\
/**\n\
 * Calculates the determinant of a mat4\n\
 *\n\
 * @param {mat4} a the source matrix\n\
 * @returns {Number} determinant of a\n\
 */\n\
mat4.determinant = function (a) {\n\
    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],\n\
        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],\n\
        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],\n\
        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],\n\
\n\
        b00 = a00 * a11 - a01 * a10,\n\
        b01 = a00 * a12 - a02 * a10,\n\
        b02 = a00 * a13 - a03 * a10,\n\
        b03 = a01 * a12 - a02 * a11,\n\
        b04 = a01 * a13 - a03 * a11,\n\
        b05 = a02 * a13 - a03 * a12,\n\
        b06 = a20 * a31 - a21 * a30,\n\
        b07 = a20 * a32 - a22 * a30,\n\
        b08 = a20 * a33 - a23 * a30,\n\
        b09 = a21 * a32 - a22 * a31,\n\
        b10 = a21 * a33 - a23 * a31,\n\
        b11 = a22 * a33 - a23 * a32;\n\
\n\
    // Calculate the determinant\n\
    return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\
};\n\
\n\
/**\n\
 * Multiplies two mat4's\n\
 *\n\
 * @param {mat4} out the receiving matrix\n\
 * @param {mat4} a the first operand\n\
 * @param {mat4} b the second operand\n\
 * @returns {mat4} out\n\
 */\n\
mat4.multiply = function (out, a, b) {\n\
    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],\n\
        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],\n\
        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],\n\
        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\
\n\
    // Cache only the current line of the second matrix\n\
    var b0  = b[0], b1 = b[1], b2 = b[2], b3 = b[3];  \n\
    out[0] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n\
    out[1] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n\
    out[2] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n\
    out[3] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\
\n\
    b0 = b[4]; b1 = b[5]; b2 = b[6]; b3 = b[7];\n\
    out[4] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n\
    out[5] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n\
    out[6] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n\
    out[7] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\
\n\
    b0 = b[8]; b1 = b[9]; b2 = b[10]; b3 = b[11];\n\
    out[8] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n\
    out[9] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n\
    out[10] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n\
    out[11] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\
\n\
    b0 = b[12]; b1 = b[13]; b2 = b[14]; b3 = b[15];\n\
    out[12] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n\
    out[13] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n\
    out[14] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n\
    out[15] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\
    return out;\n\
};\n\
\n\
/**\n\
 * Alias for {@link mat4.multiply}\n\
 * @function\n\
 */\n\
mat4.mul = mat4.multiply;\n\
\n\
/**\n\
 * Translate a mat4 by the given vector\n\
 *\n\
 * @param {mat4} out the receiving matrix\n\
 * @param {mat4} a the matrix to translate\n\
 * @param {vec3} v vector to translate by\n\
 * @returns {mat4} out\n\
 */\n\
mat4.translate = function (out, a, v) {\n\
    var x = v[0], y = v[1], z = v[2],\n\
        a00, a01, a02, a03,\n\
        a10, a11, a12, a13,\n\
        a20, a21, a22, a23,\n\
        a30, a31, a32, a33;\n\
\n\
        a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];\n\
        a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];\n\
        a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];\n\
        a30 = a[12]; a31 = a[13]; a32 = a[14]; a33 = a[15];\n\
    \n\
    out[0] = a00 + a03*x;\n\
    out[1] = a01 + a03*y;\n\
    out[2] = a02 + a03*z;\n\
    out[3] = a03;\n\
\n\
    out[4] = a10 + a13*x;\n\
    out[5] = a11 + a13*y;\n\
    out[6] = a12 + a13*z;\n\
    out[7] = a13;\n\
\n\
    out[8] = a20 + a23*x;\n\
    out[9] = a21 + a23*y;\n\
    out[10] = a22 + a23*z;\n\
    out[11] = a23;\n\
    out[12] = a30 + a33*x;\n\
    out[13] = a31 + a33*y;\n\
    out[14] = a32 + a33*z;\n\
    out[15] = a33;\n\
\n\
    return out;\n\
};\n\
/**\n\
 * Scales the mat4 by the dimensions in the given vec3\n\
 *\n\
 * @param {mat4} out the receiving matrix\n\
 * @param {mat4} a the matrix to scale\n\
 * @param {vec3} v the vec3 to scale the matrix by\n\
 * @returns {mat4} out\n\
 **/\n\
mat4.scale = function(out, a, v) {\n\
    var x = v[0], y = v[1], z = v[2];\n\
\n\
    out[0] = a[0] * x;\n\
    out[1] = a[1] * x;\n\
    out[2] = a[2] * x;\n\
    out[3] = a[3] * x;\n\
    out[4] = a[4] * y;\n\
    out[5] = a[5] * y;\n\
    out[6] = a[6] * y;\n\
    out[7] = a[7] * y;\n\
    out[8] = a[8] * z;\n\
    out[9] = a[9] * z;\n\
    out[10] = a[10] * z;\n\
    out[11] = a[11] * z;\n\
    out[12] = a[12];\n\
    out[13] = a[13];\n\
    out[14] = a[14];\n\
    out[15] = a[15];\n\
    return out;\n\
};\n\
\n\
/**\n\
 * Rotates a mat4 by the given angle\n\
 *\n\
 * @param {mat4} out the receiving matrix\n\
 * @param {mat4} a the matrix to rotate\n\
 * @param {Number} rad the angle to rotate the matrix by\n\
 * @param {vec3} axis the axis to rotate around\n\
 * @returns {mat4} out\n\
 */\n\
mat4.rotate = function (out, a, rad, axis) {\n\
    var x = axis[0], y = axis[1], z = axis[2],\n\
        len = Math.sqrt(x * x + y * y + z * z),\n\
        s, c, t,\n\
        a00, a01, a02, a03,\n\
        a10, a11, a12, a13,\n\
        a20, a21, a22, a23,\n\
        b00, b01, b02,\n\
        b10, b11, b12,\n\
        b20, b21, b22;\n\
\n\
    if (Math.abs(len) < GLMAT_EPSILON) { return null; }\n\
    \n\
    len = 1 / len;\n\
    x *= len;\n\
    y *= len;\n\
    z *= len;\n\
\n\
    s = Math.sin(rad);\n\
    c = Math.cos(rad);\n\
    t = 1 - c;\n\
\n\
    a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];\n\
    a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];\n\
    a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];\n\
\n\
    // Construct the elements of the rotation matrix\n\
    b00 = x * x * t + c; b01 = y * x * t + z * s; b02 = z * x * t - y * s;\n\
    b10 = x * y * t - z * s; b11 = y * y * t + c; b12 = z * y * t + x * s;\n\
    b20 = x * z * t + y * s; b21 = y * z * t - x * s; b22 = z * z * t + c;\n\
\n\
    // Perform rotation-specific matrix multiplication\n\
    out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n\
    out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n\
    out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n\
    out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n\
    out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n\
    out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n\
    out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n\
    out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n\
    out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n\
    out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n\
    out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n\
    out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\
\n\
    if (a !== out) { // If the source and destination differ, copy the unchanged last row\n\
        out[12] = a[12];\n\
        out[13] = a[13];\n\
        out[14] = a[14];\n\
        out[15] = a[15];\n\
    }\n\
    return out;\n\
};\n\
\n\
/**\n\
 * Rotates a matrix by the given angle around the X axis\n\
 *\n\
 * @param {mat4} out the receiving matrix\n\
 * @param {mat4} a the matrix to rotate\n\
 * @param {Number} rad the angle to rotate the matrix by\n\
 * @returns {mat4} out\n\
 */\n\
mat4.rotateX = function (out, a, rad) {\n\
    var s = Math.sin(rad),\n\
        c = Math.cos(rad),\n\
        a10 = a[4],\n\
        a11 = a[5],\n\
        a12 = a[6],\n\
        a13 = a[7],\n\
        a20 = a[8],\n\
        a21 = a[9],\n\
        a22 = a[10],\n\
        a23 = a[11];\n\
\n\
    if (a !== out) { // If the source and destination differ, copy the unchanged rows\n\
        out[0]  = a[0];\n\
        out[1]  = a[1];\n\
        out[2]  = a[2];\n\
        out[3]  = a[3];\n\
        out[12] = a[12];\n\
        out[13] = a[13];\n\
        out[14] = a[14];\n\
        out[15] = a[15];\n\
    }\n\
\n\
    // Perform axis-specific matrix multiplication\n\
    out[4] = a10 * c + a20 * s;\n\
    out[5] = a11 * c + a21 * s;\n\
    out[6] = a12 * c + a22 * s;\n\
    out[7] = a13 * c + a23 * s;\n\
    out[8] = a20 * c - a10 * s;\n\
    out[9] = a21 * c - a11 * s;\n\
    out[10] = a22 * c - a12 * s;\n\
    out[11] = a23 * c - a13 * s;\n\
    return out;\n\
};\n\
\n\
/**\n\
 * Rotates a matrix by the given angle around the Y axis\n\
 *\n\
 * @param {mat4} out the receiving matrix\n\
 * @param {mat4} a the matrix to rotate\n\
 * @param {Number} rad the angle to rotate the matrix by\n\
 * @returns {mat4} out\n\
 */\n\
mat4.rotateY = function (out, a, rad) {\n\
    var s = Math.sin(rad),\n\
        c = Math.cos(rad),\n\
        a00 = a[0],\n\
        a01 = a[1],\n\
        a02 = a[2],\n\
        a03 = a[3],\n\
        a20 = a[8],\n\
        a21 = a[9],\n\
        a22 = a[10],\n\
        a23 = a[11];\n\
\n\
    if (a !== out) { // If the source and destination differ, copy the unchanged rows\n\
        out[4]  = a[4];\n\
        out[5]  = a[5];\n\
        out[6]  = a[6];\n\
        out[7]  = a[7];\n\
        out[12] = a[12];\n\
        out[13] = a[13];\n\
        out[14] = a[14];\n\
        out[15] = a[15];\n\
    }\n\
\n\
    // Perform axis-specific matrix multiplication\n\
    out[0] = a00 * c - a20 * s;\n\
    out[1] = a01 * c - a21 * s;\n\
    out[2] = a02 * c - a22 * s;\n\
    out[3] = a03 * c - a23 * s;\n\
    out[8] = a00 * s + a20 * c;\n\
    out[9] = a01 * s + a21 * c;\n\
    out[10] = a02 * s + a22 * c;\n\
    out[11] = a03 * s + a23 * c;\n\
    return out;\n\
};\n\
\n\
/**\n\
 * Rotates a matrix by the given angle around the Z axis\n\
 *\n\
 * @param {mat4} out the receiving matrix\n\
 * @param {mat4} a the matrix to rotate\n\
 * @param {Number} rad the angle to rotate the matrix by\n\
 * @returns {mat4} out\n\
 */\n\
mat4.rotateZ = function (out, a, rad) {\n\
    var s = Math.sin(rad),\n\
        c = Math.cos(rad),\n\
        a00 = a[0],\n\
        a01 = a[1],\n\
        a02 = a[2],\n\
        a03 = a[3],\n\
        a10 = a[4],\n\
        a11 = a[5],\n\
        a12 = a[6],\n\
        a13 = a[7];\n\
\n\
    if (a !== out) { // If the source and destination differ, copy the unchanged last row\n\
        out[8]  = a[8];\n\
        out[9]  = a[9];\n\
        out[10] = a[10];\n\
        out[11] = a[11];\n\
        out[12] = a[12];\n\
        out[13] = a[13];\n\
        out[14] = a[14];\n\
        out[15] = a[15];\n\
    }\n\
\n\
    // Perform axis-specific matrix multiplication\n\
    out[0] = a00 * c + a10 * s;\n\
    out[1] = a01 * c + a11 * s;\n\
    out[2] = a02 * c + a12 * s;\n\
    out[3] = a03 * c + a13 * s;\n\
    out[4] = a10 * c - a00 * s;\n\
    out[5] = a11 * c - a01 * s;\n\
    out[6] = a12 * c - a02 * s;\n\
    out[7] = a13 * c - a03 * s;\n\
    return out;\n\
};\n\
\n\
/**\n\
 * Creates a matrix from a quaternion rotation and vector translation\n\
 * This is equivalent to (but much faster than):\n\
 *\n\
 *     mat4.identity(dest);\n\
 *     mat4.translate(dest, vec);\n\
 *     var quatMat = mat4.create();\n\
 *     quat4.toMat4(quat, quatMat);\n\
 *     mat4.multiply(dest, quatMat);\n\
 *\n\
 * @param {mat4} out mat4 receiving operation result\n\
 * @param {quat4} q Rotation quaternion\n\
 * @param {vec3} v Translation vector\n\
 * @returns {mat4} out\n\
 */\n\
mat4.fromRotationTranslation = function (out, q, v) {\n\
    // Quaternion math\n\
    var x = q[0], y = q[1], z = q[2], w = q[3],\n\
        x2 = x + x,\n\
        y2 = y + y,\n\
        z2 = z + z,\n\
\n\
        xx = x * x2,\n\
        xy = x * y2,\n\
        xz = x * z2,\n\
        yy = y * y2,\n\
        yz = y * z2,\n\
        zz = z * z2,\n\
        wx = w * x2,\n\
        wy = w * y2,\n\
        wz = w * z2;\n\
\n\
    out[0] = 1 - (yy + zz);\n\
    out[1] = xy + wz;\n\
    out[2] = xz - wy;\n\
    out[3] = 0;\n\
    out[4] = xy - wz;\n\
    out[5] = 1 - (xx + zz);\n\
    out[6] = yz + wx;\n\
    out[7] = 0;\n\
    out[8] = xz + wy;\n\
    out[9] = yz - wx;\n\
    out[10] = 1 - (xx + yy);\n\
    out[11] = 0;\n\
    out[12] = v[0];\n\
    out[13] = v[1];\n\
    out[14] = v[2];\n\
    out[15] = 1;\n\
    \n\
    return out;\n\
};\n\
\n\
mat4.fromQuat = function (out, q) {\n\
    var x = q[0], y = q[1], z = q[2], w = q[3],\n\
        x2 = x + x,\n\
        y2 = y + y,\n\
        z2 = z + z,\n\
\n\
        xx = x * x2,\n\
        yx = y * x2,\n\
        yy = y * y2,\n\
        zx = z * x2,\n\
        zy = z * y2,\n\
        zz = z * z2,\n\
        wx = w * x2,\n\
        wy = w * y2,\n\
        wz = w * z2;\n\
\n\
    out[0] = 1 - yy - zz;\n\
    out[1] = yx + wz;\n\
    out[2] = zx - wy;\n\
    out[3] = 0;\n\
\n\
    out[4] = yx - wz;\n\
    out[5] = 1 - xx - zz;\n\
    out[6] = zy + wx;\n\
    out[7] = 0;\n\
\n\
    out[8] = zx + wy;\n\
    out[9] = zy - wx;\n\
    out[10] = 1 - xx - yy;\n\
    out[11] = 0;\n\
\n\
    out[12] = 0;\n\
    out[13] = 0;\n\
    out[14] = 0;\n\
    out[15] = 1;\n\
\n\
    return out;\n\
};\n\
\n\
/**\n\
 * Generates a frustum matrix with the given bounds\n\
 *\n\
 * @param {mat4} out mat4 frustum matrix will be written into\n\
 * @param {Number} left Left bound of the frustum\n\
 * @param {Number} right Right bound of the frustum\n\
 * @param {Number} bottom Bottom bound of the frustum\n\
 * @param {Number} top Top bound of the frustum\n\
 * @param {Number} near Near bound of the frustum\n\
 * @param {Number} far Far bound of the frustum\n\
 * @returns {mat4} out\n\
 */\n\
mat4.frustum = function (out, left, right, bottom, top, near, far) {\n\
    var rl = 1 / (right - left),\n\
        tb = 1 / (top - bottom),\n\
        nf = 1 / (near - far);\n\
    out[0] = (near * 2) * rl;\n\
    out[1] = 0;\n\
    out[2] = 0;\n\
    out[3] = 0;\n\
    out[4] = 0;\n\
    out[5] = (near * 2) * tb;\n\
    out[6] = 0;\n\
    out[7] = 0;\n\
    out[8] = (right + left) * rl;\n\
    out[9] = (top + bottom) * tb;\n\
    out[10] = (far + near) * nf;\n\
    out[11] = -1;\n\
    out[12] = 0;\n\
    out[13] = 0;\n\
    out[14] = (far * near * 2) * nf;\n\
    out[15] = 0;\n\
    return out;\n\
};\n\
\n\
/**\n\
 * Generates a perspective projection matrix with the given bounds\n\
 *\n\
 * @param {mat4} out mat4 frustum matrix will be written into\n\
 * @param {number} fovy Vertical field of view in radians\n\
 * @param {number} aspect Aspect ratio. typically viewport width/height\n\
 * @param {number} near Near bound of the frustum\n\
 * @param {number} far Far bound of the frustum\n\
 * @returns {mat4} out\n\
 */\n\
mat4.perspective = function (out, fovy, aspect, near, far) {\n\
    var f = 1.0 / Math.tan(fovy / 2),\n\
        nf = 1 / (near - far);\n\
    out[0] = f / aspect;\n\
    out[1] = 0;\n\
    out[2] = 0;\n\
    out[3] = 0;\n\
    out[4] = 0;\n\
    out[5] = f;\n\
    out[6] = 0;\n\
    out[7] = 0;\n\
    out[8] = 0;\n\
    out[9] = 0;\n\
    out[10] = (far + near) * nf;\n\
    out[11] = -1;\n\
    out[12] = 0;\n\
    out[13] = 0;\n\
    out[14] = (2 * far * near) * nf;\n\
    out[15] = 0;\n\
    return out;\n\
};\n\
\n\
/**\n\
 * Generates a orthogonal projection matrix with the given bounds\n\
 *\n\
 * @param {mat4} out mat4 frustum matrix will be written into\n\
 * @param {number} left Left bound of the frustum\n\
 * @param {number} right Right bound of the frustum\n\
 * @param {number} bottom Bottom bound of the frustum\n\
 * @param {number} top Top bound of the frustum\n\
 * @param {number} near Near bound of the frustum\n\
 * @param {number} far Far bound of the frustum\n\
 * @returns {mat4} out\n\
 */\n\
mat4.ortho = function (out, left, right, bottom, top, near, far) {\n\
    var lr = 1 / (left - right),\n\
        bt = 1 / (bottom - top),\n\
        nf = 1 / (near - far);\n\
    out[0] = -2 * lr;\n\
    out[1] = 0;\n\
    out[2] = 0;\n\
    out[3] = 0;\n\
    out[4] = 0;\n\
    out[5] = -2 * bt;\n\
    out[6] = 0;\n\
    out[7] = 0;\n\
    out[8] = 0;\n\
    out[9] = 0;\n\
    out[10] = 2 * nf;\n\
    out[11] = 0;\n\
    out[12] = (left + right) * lr;\n\
    out[13] = (top + bottom) * bt;\n\
    out[14] = (far + near) * nf;\n\
    out[15] = 1;\n\
    return out;\n\
};\n\
\n\
/**\n\
 * Generates a look-at matrix with the given eye position, focal point, and up axis\n\
 *\n\
 * @param {mat4} out mat4 frustum matrix will be written into\n\
 * @param {vec3} eye Position of the viewer\n\
 * @param {vec3} center Point the viewer is looking at\n\
 * @param {vec3} up vec3 pointing up\n\
 * @returns {mat4} out\n\
 */\n\
mat4.lookAt = function (out, eye, center, up) {\n\
    var x0, x1, x2, y0, y1, y2, z0, z1, z2, len,\n\
        eyex = eye[0],\n\
        eyey = eye[1],\n\
        eyez = eye[2],\n\
        upx = up[0],\n\
        upy = up[1],\n\
        upz = up[2],\n\
        centerx = center[0],\n\
        centery = center[1],\n\
        centerz = center[2];\n\
\n\
    if (Math.abs(eyex - centerx) < GLMAT_EPSILON &&\n\
        Math.abs(eyey - centery) < GLMAT_EPSILON &&\n\
        Math.abs(eyez - centerz) < GLMAT_EPSILON) {\n\
        return mat4.identity(out);\n\
    }\n\
\n\
    z0 = eyex - centerx;\n\
    z1 = eyey - centery;\n\
    z2 = eyez - centerz;\n\
\n\
    len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);\n\
    z0 *= len;\n\
    z1 *= len;\n\
    z2 *= len;\n\
\n\
    x0 = upy * z2 - upz * z1;\n\
    x1 = upz * z0 - upx * z2;\n\
    x2 = upx * z1 - upy * z0;\n\
    len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);\n\
    if (!len) {\n\
        x0 = 0;\n\
        x1 = 0;\n\
        x2 = 0;\n\
    } else {\n\
        len = 1 / len;\n\
        x0 *= len;\n\
        x1 *= len;\n\
        x2 *= len;\n\
    }\n\
\n\
    y0 = z1 * x2 - z2 * x1;\n\
    y1 = z2 * x0 - z0 * x2;\n\
    y2 = z0 * x1 - z1 * x0;\n\
\n\
    len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);\n\
    if (!len) {\n\
        y0 = 0;\n\
        y1 = 0;\n\
        y2 = 0;\n\
    } else {\n\
        len = 1 / len;\n\
        y0 *= len;\n\
        y1 *= len;\n\
        y2 *= len;\n\
    }\n\
\n\
    out[0] = x0;\n\
    out[1] = y0;\n\
    out[2] = z0;\n\
    out[3] = 0;\n\
    out[4] = x1;\n\
    out[5] = y1;\n\
    out[6] = z1;\n\
    out[7] = 0;\n\
    out[8] = x2;\n\
    out[9] = y2;\n\
    out[10] = z2;\n\
    out[11] = 0;\n\
    out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n\
    out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n\
    out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n\
    out[15] = 1;\n\
\n\
    return out;\n\
};\n\
\n\
/**\n\
 * Returns a string representation of a mat4\n\
 *\n\
 * @param {mat4} mat matrix to represent as a string\n\
 * @returns {String} string representation of the matrix\n\
 */\n\
mat4.str = function (a) {\n\
    return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' +\n\
                    a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' +\n\
                    a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' + \n\
                    a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';\n\
};\n\
\n\
if(typeof(exports) !== 'undefined') {\n\
    exports.mat4 = mat4;\n\
}\n\
;\n\
/* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.\n\
\n\
Redistribution and use in source and binary forms, with or without modification,\n\
are permitted provided that the following conditions are met:\n\
\n\
  * Redistributions of source code must retain the above copyright notice, this\n\
    list of conditions and the following disclaimer.\n\
  * Redistributions in binary form must reproduce the above copyright notice,\n\
    this list of conditions and the following disclaimer in the documentation \n\
    and/or other materials provided with the distribution.\n\
\n\
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n\
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n\
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE \n\
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\n\
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n\
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n\
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n\
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n\
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n\
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */\n\
\n\
/**\n\
 * @class Quaternion\n\
 * @name quat\n\
 */\n\
\n\
var quat = {};\n\
\n\
/**\n\
 * Creates a new identity quat\n\
 *\n\
 * @returns {quat} a new quaternion\n\
 */\n\
quat.create = function() {\n\
    var out = new GLMAT_ARRAY_TYPE(4);\n\
    out[0] = 0;\n\
    out[1] = 0;\n\
    out[2] = 0;\n\
    out[3] = 1;\n\
    return out;\n\
};\n\
\n\
/**\n\
 * Sets a quaternion to represent the shortest rotation from one\n\
 * vector to another.\n\
 *\n\
 * Both vectors are assumed to be unit length.\n\
 *\n\
 * @param {quat} out the receiving quaternion.\n\
 * @param {vec3} a the initial vector\n\
 * @param {vec3} b the destination vector\n\
 * @returns {quat} out\n\
 */\n\
quat.rotationTo = (function() {\n\
    var tmpvec3 = vec3.create();\n\
    var xUnitVec3 = vec3.fromValues(1,0,0);\n\
    var yUnitVec3 = vec3.fromValues(0,1,0);\n\
\n\
    return function(out, a, b) {\n\
        var dot = vec3.dot(a, b);\n\
        if (dot < -0.999999) {\n\
            vec3.cross(tmpvec3, xUnitVec3, a);\n\
            if (vec3.length(tmpvec3) < 0.000001)\n\
                vec3.cross(tmpvec3, yUnitVec3, a);\n\
            vec3.normalize(tmpvec3, tmpvec3);\n\
            quat.setAxisAngle(out, tmpvec3, Math.PI);\n\
            return out;\n\
        } else if (dot > 0.999999) {\n\
            out[0] = 0;\n\
            out[1] = 0;\n\
            out[2] = 0;\n\
            out[3] = 1;\n\
            return out;\n\
        } else {\n\
            vec3.cross(tmpvec3, a, b);\n\
            out[0] = tmpvec3[0];\n\
            out[1] = tmpvec3[1];\n\
            out[2] = tmpvec3[2];\n\
            out[3] = 1 + dot;\n\
            return quat.normalize(out, out);\n\
        }\n\
    };\n\
})();\n\
\n\
/**\n\
 * Sets the specified quaternion with values corresponding to the given\n\
 * axes. Each axis is a vec3 and is expected to be unit length and\n\
 * perpendicular to all other specified axes.\n\
 *\n\
 * @param {vec3} view  the vector representing the viewing direction\n\
 * @param {vec3} right the vector representing the local \"right\" direction\n\
 * @param {vec3} up    the vector representing the local \"up\" direction\n\
 * @returns {quat} out\n\
 */\n\
quat.setAxes = (function() {\n\
    var matr = mat3.create();\n\
\n\
    return function(out, view, right, up) {\n\
        matr[0] = right[0];\n\
        matr[3] = right[1];\n\
        matr[6] = right[2];\n\
\n\
        matr[1] = up[0];\n\
        matr[4] = up[1];\n\
        matr[7] = up[2];\n\
\n\
        matr[2] = -view[0];\n\
        matr[5] = -view[1];\n\
        matr[8] = -view[2];\n\
\n\
        return quat.normalize(out, quat.fromMat3(out, matr));\n\
    };\n\
})();\n\
\n\
/**\n\
 * Creates a new quat initialized with values from an existing quaternion\n\
 *\n\
 * @param {quat} a quaternion to clone\n\
 * @returns {quat} a new quaternion\n\
 * @function\n\
 */\n\
quat.clone = vec4.clone;\n\
\n\
/**\n\
 * Creates a new quat initialized with the given values\n\
 *\n\
 * @param {Number} x X component\n\
 * @param {Number} y Y component\n\
 * @param {Number} z Z component\n\
 * @param {Number} w W component\n\
 * @returns {quat} a new quaternion\n\
 * @function\n\
 */\n\
quat.fromValues = vec4.fromValues;\n\
\n\
/**\n\
 * Copy the values from one quat to another\n\
 *\n\
 * @param {quat} out the receiving quaternion\n\
 * @param {quat} a the source quaternion\n\
 * @returns {quat} out\n\
 * @function\n\
 */\n\
quat.copy = vec4.copy;\n\
\n\
/**\n\
 * Set the components of a quat to the given values\n\
 *\n\
 * @param {quat} out the receiving quaternion\n\
 * @param {Number} x X component\n\
 * @param {Number} y Y component\n\
 * @param {Number} z Z component\n\
 * @param {Number} w W component\n\
 * @returns {quat} out\n\
 * @function\n\
 */\n\
quat.set = vec4.set;\n\
\n\
/**\n\
 * Set a quat to the identity quaternion\n\
 *\n\
 * @param {quat} out the receiving quaternion\n\
 * @returns {quat} out\n\
 */\n\
quat.identity = function(out) {\n\
    out[0] = 0;\n\
    out[1] = 0;\n\
    out[2] = 0;\n\
    out[3] = 1;\n\
    return out;\n\
};\n\
\n\
/**\n\
 * Sets a quat from the given angle and rotation axis,\n\
 * then returns it.\n\
 *\n\
 * @param {quat} out the receiving quaternion\n\
 * @param {vec3} axis the axis around which to rotate\n\
 * @param {Number} rad the angle in radians\n\
 * @returns {quat} out\n\
 **/\n\
quat.setAxisAngle = function(out, axis, rad) {\n\
    rad = rad * 0.5;\n\
    var s = Math.sin(rad);\n\
    out[0] = s * axis[0];\n\
    out[1] = s * axis[1];\n\
    out[2] = s * axis[2];\n\
    out[3] = Math.cos(rad);\n\
    return out;\n\
};\n\
\n\
/**\n\
 * Adds two quat's\n\
 *\n\
 * @param {quat} out the receiving quaternion\n\
 * @param {quat} a the first operand\n\
 * @param {quat} b the second operand\n\
 * @returns {quat} out\n\
 * @function\n\
 */\n\
quat.add = vec4.add;\n\
\n\
/**\n\
 * Multiplies two quat's\n\
 *\n\
 * @param {quat} out the receiving quaternion\n\
 * @param {quat} a the first operand\n\
 * @param {quat} b the second operand\n\
 * @returns {quat} out\n\
 */\n\
quat.multiply = function(out, a, b) {\n\
    var ax = a[0], ay = a[1], az = a[2], aw = a[3],\n\
        bx = b[0], by = b[1], bz = b[2], bw = b[3];\n\
\n\
    out[0] = ax * bw + aw * bx + ay * bz - az * by;\n\
    out[1] = ay * bw + aw * by + az * bx - ax * bz;\n\
    out[2] = az * bw + aw * bz + ax * by - ay * bx;\n\
    out[3] = aw * bw - ax * bx - ay * by - az * bz;\n\
    return out;\n\
};\n\
\n\
/**\n\
 * Alias for {@link quat.multiply}\n\
 * @function\n\
 */\n\
quat.mul = quat.multiply;\n\
\n\
/**\n\
 * Scales a quat by a scalar number\n\
 *\n\
 * @param {quat} out the receiving vector\n\
 * @param {quat} a the vector to scale\n\
 * @param {Number} b amount to scale the vector by\n\
 * @returns {quat} out\n\
 * @function\n\
 */\n\
quat.scale = vec4.scale;\n\
\n\
/**\n\
 * Rotates a quaternion by the given angle about the X axis\n\
 *\n\
 * @param {quat} out quat receiving operation result\n\
 * @param {quat} a quat to rotate\n\
 * @param {number} rad angle (in radians) to rotate\n\
 * @returns {quat} out\n\
 */\n\
quat.rotateX = function (out, a, rad) {\n\
    rad *= 0.5; \n\
\n\
    var ax = a[0], ay = a[1], az = a[2], aw = a[3],\n\
        bx = Math.sin(rad), bw = Math.cos(rad);\n\
\n\
    out[0] = ax * bw + aw * bx;\n\
    out[1] = ay * bw + az * bx;\n\
    out[2] = az * bw - ay * bx;\n\
    out[3] = aw * bw - ax * bx;\n\
    return out;\n\
};\n\
\n\
/**\n\
 * Rotates a quaternion by the given angle about the Y axis\n\
 *\n\
 * @param {quat} out quat receiving operation result\n\
 * @param {quat} a quat to rotate\n\
 * @param {number} rad angle (in radians) to rotate\n\
 * @returns {quat} out\n\
 */\n\
quat.rotateY = function (out, a, rad) {\n\
    rad *= 0.5; \n\
\n\
    var ax = a[0], ay = a[1], az = a[2], aw = a[3],\n\
        by = Math.sin(rad), bw = Math.cos(rad);\n\
\n\
    out[0] = ax * bw - az * by;\n\
    out[1] = ay * bw + aw * by;\n\
    out[2] = az * bw + ax * by;\n\
    out[3] = aw * bw - ay * by;\n\
    return out;\n\
};\n\
\n\
/**\n\
 * Rotates a quaternion by the given angle about the Z axis\n\
 *\n\
 * @param {quat} out quat receiving operation result\n\
 * @param {quat} a quat to rotate\n\
 * @param {number} rad angle (in radians) to rotate\n\
 * @returns {quat} out\n\
 */\n\
quat.rotateZ = function (out, a, rad) {\n\
    rad *= 0.5; \n\
\n\
    var ax = a[0], ay = a[1], az = a[2], aw = a[3],\n\
        bz = Math.sin(rad), bw = Math.cos(rad);\n\
\n\
    out[0] = ax * bw + ay * bz;\n\
    out[1] = ay * bw - ax * bz;\n\
    out[2] = az * bw + aw * bz;\n\
    out[3] = aw * bw - az * bz;\n\
    return out;\n\
};\n\
\n\
/**\n\
 * Calculates the W component of a quat from the X, Y, and Z components.\n\
 * Assumes that quaternion is 1 unit in length.\n\
 * Any existing W component will be ignored.\n\
 *\n\
 * @param {quat} out the receiving quaternion\n\
 * @param {quat} a quat to calculate W component of\n\
 * @returns {quat} out\n\
 */\n\
quat.calculateW = function (out, a) {\n\
    var x = a[0], y = a[1], z = a[2];\n\
\n\
    out[0] = x;\n\
    out[1] = y;\n\
    out[2] = z;\n\
    out[3] = -Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\n\
    return out;\n\
};\n\
\n\
/**\n\
 * Calculates the dot product of two quat's\n\
 *\n\
 * @param {quat} a the first operand\n\
 * @param {quat} b the second operand\n\
 * @returns {Number} dot product of a and b\n\
 * @function\n\
 */\n\
quat.dot = vec4.dot;\n\
\n\
/**\n\
 * Performs a linear interpolation between two quat's\n\
 *\n\
 * @param {quat} out the receiving quaternion\n\
 * @param {quat} a the first operand\n\
 * @param {quat} b the second operand\n\
 * @param {Number} t interpolation amount between the two inputs\n\
 * @returns {quat} out\n\
 * @function\n\
 */\n\
quat.lerp = vec4.lerp;\n\
\n\
/**\n\
 * Performs a spherical linear interpolation between two quat\n\
 *\n\
 * @param {quat} out the receiving quaternion\n\
 * @param {quat} a the first operand\n\
 * @param {quat} b the second operand\n\
 * @param {Number} t interpolation amount between the two inputs\n\
 * @returns {quat} out\n\
 */\n\
quat.slerp = function (out, a, b, t) {\n\
    // benchmarks:\n\
    //    http://jsperf.com/quaternion-slerp-implementations\n\
\n\
    var ax = a[0], ay = a[1], az = a[2], aw = a[3],\n\
        bx = b[0], by = b[1], bz = b[2], bw = b[3];\n\
\n\
    var        omega, cosom, sinom, scale0, scale1;\n\
\n\
    // calc cosine\n\
    cosom = ax * bx + ay * by + az * bz + aw * bw;\n\
    // adjust signs (if necessary)\n\
    if ( cosom < 0.0 ) {\n\
        cosom = -cosom;\n\
        bx = - bx;\n\
        by = - by;\n\
        bz = - bz;\n\
        bw = - bw;\n\
    }\n\
    // calculate coefficients\n\
    if ( (1.0 - cosom) > 0.000001 ) {\n\
        // standard case (slerp)\n\
        omega  = Math.acos(cosom);\n\
        sinom  = Math.sin(omega);\n\
        scale0 = Math.sin((1.0 - t) * omega) / sinom;\n\
        scale1 = Math.sin(t * omega) / sinom;\n\
    } else {        \n\
        // \"from\" and \"to\" quaternions are very close \n\
        //  ... so we can do a linear interpolation\n\
        scale0 = 1.0 - t;\n\
        scale1 = t;\n\
    }\n\
    // calculate final values\n\
    out[0] = scale0 * ax + scale1 * bx;\n\
    out[1] = scale0 * ay + scale1 * by;\n\
    out[2] = scale0 * az + scale1 * bz;\n\
    out[3] = scale0 * aw + scale1 * bw;\n\
    \n\
    return out;\n\
};\n\
\n\
/**\n\
 * Calculates the inverse of a quat\n\
 *\n\
 * @param {quat} out the receiving quaternion\n\
 * @param {quat} a quat to calculate inverse of\n\
 * @returns {quat} out\n\
 */\n\
quat.invert = function(out, a) {\n\
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],\n\
        dot = a0*a0 + a1*a1 + a2*a2 + a3*a3,\n\
        invDot = dot ? 1.0/dot : 0;\n\
    \n\
    // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\
\n\
    out[0] = -a0*invDot;\n\
    out[1] = -a1*invDot;\n\
    out[2] = -a2*invDot;\n\
    out[3] = a3*invDot;\n\
    return out;\n\
};\n\
\n\
/**\n\
 * Calculates the conjugate of a quat\n\
 * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\n\
 *\n\
 * @param {quat} out the receiving quaternion\n\
 * @param {quat} a quat to calculate conjugate of\n\
 * @returns {quat} out\n\
 */\n\
quat.conjugate = function (out, a) {\n\
    out[0] = -a[0];\n\
    out[1] = -a[1];\n\
    out[2] = -a[2];\n\
    out[3] = a[3];\n\
    return out;\n\
};\n\
\n\
/**\n\
 * Calculates the length of a quat\n\
 *\n\
 * @param {quat} a vector to calculate length of\n\
 * @returns {Number} length of a\n\
 * @function\n\
 */\n\
quat.length = vec4.length;\n\
\n\
/**\n\
 * Alias for {@link quat.length}\n\
 * @function\n\
 */\n\
quat.len = quat.length;\n\
\n\
/**\n\
 * Calculates the squared length of a quat\n\
 *\n\
 * @param {quat} a vector to calculate squared length of\n\
 * @returns {Number} squared length of a\n\
 * @function\n\
 */\n\
quat.squaredLength = vec4.squaredLength;\n\
\n\
/**\n\
 * Alias for {@link quat.squaredLength}\n\
 * @function\n\
 */\n\
quat.sqrLen = quat.squaredLength;\n\
\n\
/**\n\
 * Normalize a quat\n\
 *\n\
 * @param {quat} out the receiving quaternion\n\
 * @param {quat} a quaternion to normalize\n\
 * @returns {quat} out\n\
 * @function\n\
 */\n\
quat.normalize = vec4.normalize;\n\
\n\
/**\n\
 * Creates a quaternion from the given 3x3 rotation matrix.\n\
 *\n\
 * NOTE: The resultant quaternion is not normalized, so you should be sure\n\
 * to renormalize the quaternion yourself where necessary.\n\
 *\n\
 * @param {quat} out the receiving quaternion\n\
 * @param {mat3} m rotation matrix\n\
 * @returns {quat} out\n\
 * @function\n\
 */\n\
quat.fromMat3 = function(out, m) {\n\
    // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n\
    // article \"Quaternion Calculus and Fast Animation\".\n\
    var fTrace = m[0] + m[4] + m[8];\n\
    var fRoot;\n\
\n\
    if ( fTrace > 0.0 ) {\n\
        // |w| > 1/2, may as well choose w > 1/2\n\
        fRoot = Math.sqrt(fTrace + 1.0);  // 2w\n\
        out[3] = 0.5 * fRoot;\n\
        fRoot = 0.5/fRoot;  // 1/(4w)\n\
        out[0] = (m[7]-m[5])*fRoot;\n\
        out[1] = (m[2]-m[6])*fRoot;\n\
        out[2] = (m[3]-m[1])*fRoot;\n\
    } else {\n\
        // |w| <= 1/2\n\
        var i = 0;\n\
        if ( m[4] > m[0] )\n\
          i = 1;\n\
        if ( m[8] > m[i*3+i] )\n\
          i = 2;\n\
        var j = (i+1)%3;\n\
        var k = (i+2)%3;\n\
        \n\
        fRoot = Math.sqrt(m[i*3+i]-m[j*3+j]-m[k*3+k] + 1.0);\n\
        out[i] = 0.5 * fRoot;\n\
        fRoot = 0.5 / fRoot;\n\
        out[3] = (m[k*3+j] - m[j*3+k]) * fRoot;\n\
        out[j] = (m[j*3+i] + m[i*3+j]) * fRoot;\n\
        out[k] = (m[k*3+i] + m[i*3+k]) * fRoot;\n\
    }\n\
    \n\
    return out;\n\
};\n\
\n\
/**\n\
 * Returns a string representation of a quatenion\n\
 *\n\
 * @param {quat} vec vector to represent as a string\n\
 * @returns {String} string representation of the vector\n\
 */\n\
quat.str = function (a) {\n\
    return 'quat(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n\
};\n\
\n\
if(typeof(exports) !== 'undefined') {\n\
    exports.quat = quat;\n\
}\n\
;\n\
\n\
\n\
\n\
\n\
\n\
\n\
\n\
\n\
\n\
\n\
\n\
\n\
\n\
  })(shim.exports);\n\
})(this);\n\
//@ sourceURL=the-gss-engine/vendor/gl-matrix.js"
));
require.register("boot/index.js", Function("exports, require, module",
"'use strict';\n\
\n\
\n\
\n\
window.GSS_CONFIG = {\n\
  worker: 'dist/worker.js'\n\
};\n\
\n\
require('gss');//@ sourceURL=boot/index.js"
));












require.alias("the-gss-engine/lib/GSS-with-compiler.js", "boot/deps/gss/lib/GSS-with-compiler.js");
require.alias("the-gss-engine/lib/GSS.js", "boot/deps/gss/lib/GSS.js");
require.alias("the-gss-engine/lib/_.js", "boot/deps/gss/lib/_.js");
require.alias("the-gss-engine/lib/EventTrigger.js", "boot/deps/gss/lib/EventTrigger.js");
require.alias("the-gss-engine/lib/dom/Query.js", "boot/deps/gss/lib/dom/Query.js");
require.alias("the-gss-engine/lib/dom/View.js", "boot/deps/gss/lib/dom/View.js");
require.alias("the-gss-engine/lib/dom/Observer.js", "boot/deps/gss/lib/dom/Observer.js");
require.alias("the-gss-engine/lib/gssom/Node.js", "boot/deps/gss/lib/gssom/Node.js");
require.alias("the-gss-engine/lib/gssom/StyleSheet.js", "boot/deps/gss/lib/gssom/StyleSheet.js");
require.alias("the-gss-engine/lib/gssom/Rule.js", "boot/deps/gss/lib/gssom/Rule.js");
require.alias("the-gss-engine/lib/Engine.js", "boot/deps/gss/lib/Engine.js");
require.alias("the-gss-engine/lib/Commander.js", "boot/deps/gss/lib/Commander.js");
require.alias("the-gss-engine/lib/Thread.js", "boot/deps/gss/lib/Thread.js");
require.alias("the-gss-engine/lib/dom/Getter.js", "boot/deps/gss/lib/dom/Getter.js");
require.alias("the-gss-engine/lib/dom/IdMixin.js", "boot/deps/gss/lib/dom/IdMixin.js");
require.alias("the-gss-engine/vendor/gl-matrix.js", "boot/deps/gss/vendor/gl-matrix.js");
require.alias("the-gss-engine/lib/GSS-with-compiler.js", "boot/deps/gss/index.js");
require.alias("the-gss-engine/lib/GSS-with-compiler.js", "gss/index.js");
require.alias("the-gss-compiler/lib/gss-compiler.js", "the-gss-engine/deps/gss-compiler/lib/gss-compiler.js");
require.alias("the-gss-compiler/lib/gss-compiler.js", "the-gss-engine/deps/gss-compiler/index.js");
require.alias("the-gss-preparser/lib/gss-preparser.js", "the-gss-compiler/deps/gss-preparser/lib/gss-preparser.js");
require.alias("the-gss-preparser/lib/gss-preparser.js", "the-gss-compiler/deps/gss-preparser/index.js");
require.alias("the-gss-preparser/lib/gss-preparser.js", "the-gss-preparser/index.js");
require.alias("the-gss-ccss-compiler/lib/ccss-compiler.js", "the-gss-compiler/deps/ccss-compiler/lib/ccss-compiler.js");
require.alias("the-gss-ccss-compiler/lib/ccss-compiler.js", "the-gss-compiler/deps/ccss-compiler/index.js");
require.alias("the-gss-ccss-compiler/lib/ccss-compiler.js", "the-gss-ccss-compiler/index.js");
require.alias("the-gss-vfl-compiler/lib/vfl-compiler.js", "the-gss-compiler/deps/vfl-compiler/lib/vfl-compiler.js");
require.alias("the-gss-vfl-compiler/lib/compiler.js", "the-gss-compiler/deps/vfl-compiler/lib/compiler.js");
require.alias("the-gss-vfl-compiler/lib/compiler.js", "the-gss-compiler/deps/vfl-compiler/index.js");
require.alias("the-gss-vfl-compiler/lib/compiler.js", "the-gss-vfl-compiler/index.js");
require.alias("the-gss-vgl-compiler/lib/vgl-compiler.js", "the-gss-compiler/deps/vgl-compiler/lib/vgl-compiler.js");
require.alias("the-gss-vgl-compiler/lib/compiler.js", "the-gss-compiler/deps/vgl-compiler/lib/compiler.js");
require.alias("the-gss-vgl-compiler/lib/compiler.js", "the-gss-compiler/deps/vgl-compiler/index.js");
require.alias("the-gss-vgl-compiler/lib/compiler.js", "the-gss-vgl-compiler/index.js");
require.alias("the-gss-compiler/lib/gss-compiler.js", "the-gss-compiler/index.js");
require.alias("d4tocchini-customevent-polyfill/CustomEvent.js", "the-gss-engine/deps/customevent-polyfill/CustomEvent.js");
require.alias("d4tocchini-customevent-polyfill/CustomEvent.js", "the-gss-engine/deps/customevent-polyfill/index.js");
require.alias("d4tocchini-customevent-polyfill/CustomEvent.js", "d4tocchini-customevent-polyfill/index.js");
require.alias("slightlyoff-cassowary.js/index.js", "the-gss-engine/deps/cassowary/index.js");
require.alias("slightlyoff-cassowary.js/src/c.js", "the-gss-engine/deps/cassowary/src/c.js");
require.alias("slightlyoff-cassowary.js/src/HashTable.js", "the-gss-engine/deps/cassowary/src/HashTable.js");
require.alias("slightlyoff-cassowary.js/src/HashSet.js", "the-gss-engine/deps/cassowary/src/HashSet.js");
require.alias("slightlyoff-cassowary.js/src/Error.js", "the-gss-engine/deps/cassowary/src/Error.js");
require.alias("slightlyoff-cassowary.js/src/SymbolicWeight.js", "the-gss-engine/deps/cassowary/src/SymbolicWeight.js");
require.alias("slightlyoff-cassowary.js/src/Strength.js", "the-gss-engine/deps/cassowary/src/Strength.js");
require.alias("slightlyoff-cassowary.js/src/Variable.js", "the-gss-engine/deps/cassowary/src/Variable.js");
require.alias("slightlyoff-cassowary.js/src/Point.js", "the-gss-engine/deps/cassowary/src/Point.js");
require.alias("slightlyoff-cassowary.js/src/Expression.js", "the-gss-engine/deps/cassowary/src/Expression.js");
require.alias("slightlyoff-cassowary.js/src/Constraint.js", "the-gss-engine/deps/cassowary/src/Constraint.js");
require.alias("slightlyoff-cassowary.js/src/EditInfo.js", "the-gss-engine/deps/cassowary/src/EditInfo.js");
require.alias("slightlyoff-cassowary.js/src/Tableau.js", "the-gss-engine/deps/cassowary/src/Tableau.js");
require.alias("slightlyoff-cassowary.js/src/SimplexSolver.js", "the-gss-engine/deps/cassowary/src/SimplexSolver.js");
require.alias("slightlyoff-cassowary.js/src/Timer.js", "the-gss-engine/deps/cassowary/src/Timer.js");
require.alias("slightlyoff-cassowary.js/src/parser/parser.js", "the-gss-engine/deps/cassowary/src/parser/parser.js");
require.alias("slightlyoff-cassowary.js/src/parser/api.js", "the-gss-engine/deps/cassowary/src/parser/api.js");

require.alias("the-gss-engine/lib/GSS-with-compiler.js", "the-gss-engine/index.js");
require.alias("boot/index.js", "boot/index.js");
require('boot');